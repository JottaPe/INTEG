import { Component, ViewChild } from '@angular/core';
import { ThfDialogType } from '@totvs/thf-core/services/thf-dialog-base/thf-dialog.enum';
import { ThfModalComponent } from '../../components/thf-modal/thf-modal.component';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog('Confirmar', ((dialogOptions)).confirm, 'Cancelar', ((dialogOptions)).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog('Ok', ((dialogOptions)).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    ThfDialogComponent.decorators = [
        { type: Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDialogComponent.ctorParameters = function () { return []; };
    ThfDialogComponent.propDecorators = {
        'thfModal': [{ type: ViewChild, args: [ThfModalComponent,] },],
    };
    return ThfDialogComponent;
}());
export { ThfDialogComponent };
function ThfDialogComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfDialogComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfDialogComponent.ctorParameters;
    /** @type {?} */
    ThfDialogComponent.propDecorators;
    /** @type {?} */
    ThfDialogComponent.prototype.thfModal;
    /** @type {?} */
    ThfDialogComponent.prototype.title;
    /** @type {?} */
    ThfDialogComponent.prototype.message;
    /** @type {?} */
    ThfDialogComponent.prototype.primaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.secondaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.componentRef;
}
