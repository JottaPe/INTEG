(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@totvs/thf-core/components/thf-button-base'), require('@totvs/thf-core/components/thf-modal-base'), require('@totvs/thf-core/services/thf-dialog-base/thf-dialog.enum'), require('@totvs/thf-core/services/thf-dialog-base/thf-dialog-base.service')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@totvs/thf-core/components/thf-button-base', '@totvs/thf-core/components/thf-modal-base', '@totvs/thf-core/services/thf-dialog-base/thf-dialog.enum', '@totvs/thf-core/services/thf-dialog-base/thf-dialog-base.service'], factory) :
	(factory((global['thf-dialog'] = {}),global.core,global.common,global.thfButtonBase,global.thfModalBase,global.thfDialog_enum,global.thfDialogBase_service));
}(this, (function (exports,core,common,thfButtonBase,thfModalBase,thfDialog_enum,thfDialogBase_service) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-button-labs' title='Totvs Button Labs'>
 *  <file name='sample-thf-button-labs.component.html'> </file>
 *  <file name='sample-thf-button-labs.component.ts'> </file>
 * </example>
 *
 * <example name='thf-button-click' title='Eventos de click e botão desabilitado'>
 *  <file name='sample-thf-button-click.component.html'> </file>
 *  <file name='sample-thf-button-click.component.ts'> </file>
 *  <file name='sample-thf-button-click.component.css'> </file>
 * </example>
 *
 * <example name='thf-button' title='Tipos e tamanhos do thf-button' >
 *  <file name='sample-thf-button.component.html'> </file>
 * <file name='sample-thf-button.component.ts'> </file>
 * </example>
 */
var ThfButtonComponent = (function (_super) {
    __extends(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button\" type=\"button\" id=\"{{ id }}\" [disabled]=\"disabled\" [ngClass]=\"{ 'thf-button--primary' : primary, 'thf-button--sm' : small }\" (click)=\"onClick()\"> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> {{ label }} </button> ",
                    providers: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonComponent.ctorParameters = function () { return []; };
    return ThfButtonComponent;
}(thfButtonBase.ThfButtonBaseComponent));

/**
 * \@description
 * Módulo do componente thf-button.
 */
var ThfButtonModule = (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfButtonComponent],
                    exports: [ThfButtonComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonModule.ctorParameters = function () { return []; };
    return ThfButtonModule;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-modal' title="Totvs Modal Labs">
 *  <file name='sample-thf-modal.component.html'>
 *    <thf-button
 *      t-label="Chamar Modal"
 *      (t-click)="openPedidoModal()"
 *      t-primary="true">
 *    </thf-button>
 *
 *    <form #f="ngForm">
 *
 *      <thf-input
 *        t-label="Titulo"
 *        t-help="Informe o título da modal"
 *        t-placeholder="Título"
 *        name="title"
 *        [(ngModel)]="modalTitle"
 *        t-maxlength="30"
 *        t-clean>
 *      </thf-input>
 *
 *      <thf-input
 *        t-label="Texto"
 *        t-help="Informe o texto da modal"
 *        t-placeholder="Texto"
 *        name="text"
 *        [(ngModel)]="modalText"
 *        t-maxlength="100"
 *        t-focus
 *        t-clean>
 *      </thf-input>
 *
 *      <thf-radio-group
 *        name="modalSize"
 *        t-required
 *        t-label="Tamanho da modal"
 *        [t-options]="modalSizeOptions"
 *        [(ngModel)]="modalSize">
 *      </thf-radio-group>
 *
 *      <thf-checkbox-group
 *        name="configurationCheckbox"
 *        t-label="Configurações"
 *        t-help="Permite fazer ajustes na modal"
 *        [t-options]="configurationOptions"
 *        [(ngModel)]="configurationModel">
 *      </thf-checkbox-group>
 *
 *    </form>
 *
 *    <thf-modal
 *      [t-title]="modalTitle"
 *      [t-primary-action]="primaryAction"
 *      [t-secondary-action]="secondaryAction"
 *      [t-size]="modalSize"
 *      [t-click-out]="configurationModel.includes('click-out')"
 *      [t-hide-close]="configurationModel.includes('hide-close')">
 *      {{modalText}}
 *    </thf-modal>
 *  </file>
 *  <file name='sample-thf-modal.component.ts'>
 *    import { Component, ViewChild } from '\@angular/core';
 *
 *    import { ThfModalAction } from "\@totvs/thf-core/components/thf-modal-base/thf-modal-action.interface";
 *    import { ThfModalComponent } from '\@totvs/thf-web/components/thf-modal/thf-modal.component';
 *    import { ThfRadioGroupOption, ThfCheckboxGroupOption } from '\@totvs/thf-core/components/thf-field-base';
 *
 *    \@Component({
 *      selector: 'sample-thf-modal',
 *      templateUrl: './sample-thf-modal.component.html'
 *    })
 *    export class SampleThfModalComponent {
 *
 *      \@ViewChild(ThfModalComponent) thfModal: ThfModalComponent;
 *
 *      primaryAction: ThfModalAction = {
 *        action: () => {
 *          this.thfModal.close();
 *        },
 *        label: 'Confirmar'
 *      };
 *
 *      secondaryAction: ThfModalAction = {
 *        action: () => {
 *           this.thfModal.close();
 *        },
 *        label: 'Cancelar'
 *      };
 *
 *      modalSize = 'sm';
 *      modalText = 'Somos TOTVERS!!!';
 *      modalTitle = 'Totvs';
 *
 *      configurationOptions: Array<ThfCheckboxGroupOption> = [
 *        {value: 'click-out', label: 'Permitir o fechamento ao clicar fora da modal' },
 *        {value: 'hide-close', label: 'Esconder o ícone de fechar a modal' }
 *      ];
 *      configurationModel: Array<any> = [];
 *
 *      modalSizeOptions: Array<ThfRadioGroupOption> = [
 *        { label: 'Pequeno', value: 'sm' },
 *        { label: 'Médio', value: 'md' },
 *        { label: 'Grande', value: 'lg' },
 *        { label: 'Extra grande', value: 'xl' },
 *        { label: 'Automático', value: 'auto' },
 *      ];
 *
 *      openPedidoModal() {
 *        this.thfModal.open();
 *      }
 *
 *    }
 *  </file>
 * </example>
 */
var ThfModalComponent = (function (_super) {
    __extends$1(ThfModalComponent, _super);
    function ThfModalComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.focusableElements = 'input, select, textarea, button, a';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.open = function () {
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.close = function () {
        _super.prototype.close.call(this);
        document.removeEventListener('focus', this.focusFunction, true);
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.handleFocus = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.initFocus = function () {
        var _this = this;
        this.focusFunction = function (event) {
            var /** @type {?} */ modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target)) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (!this.hideClose) {
            var /** @type {?} */ firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1];
            firstFieldElement.focus();
        }
        else {
            this.firstElement.focus();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.setFirstElement = function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements);
    };
    ThfModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-modal', template: "<div class=\"thf-modal\" *ngIf=\"!isHidden\"> <div class=\"thf-modal-overlay\" (click)=\"onClickOut()\"></div> <div #modalContent class=\"thf-modal-content thf-modal-{{ modalSize }}\" tabindex=\"-1\"> <div class=\"thf-modal-header\"> <div class=\"thf-modal-title\"> <a class=\"thf-modal-header-close-button\" *ngIf=\"!hideClose\" (click)=\"close()\" tabindex=\"0\" > <span class=\"thf-icon thf-icon-close\"></span> </a> {{ title }} </div> </div> <div class=\"thf-modal-body\"> <ng-content></ng-content> </div> <div class=\"thf-modal-footer\"> <thf-button *ngIf=\"secondaryAction\" class=\"thf-modal-footer-button\" [t-label]=\"secondaryAction.label\" (t-click)=\"secondaryAction.action()\" t-primary=\"false\"> </thf-button> <thf-button *ngIf=\"primaryAction\" class=\"thf-modal-footer-button\" [t-label]=\"primaryAction.label\" (t-click)=\"primaryAction.action()\" t-primary=\"true\"> </thf-button> </div> </div> </div> ", styles: [".thf-modal { font-family: NunitoSans; position: relative; z-index: 50; } .thf-modal-overlay:before { content: ''; position: fixed; background-color: #052e3e; top: 0; bottom: 0; right: 0; left: 0; opacity: 0.7; } .thf-modal-sm { width: 50% !important; } .thf-modal-md { width: 70% !important; } .thf-modal-lg { width: 80% !important; } .thf-modal-xl { width: 90% !important; } .thf-modal-auto { width: auto !important; } @media screen and (max-width: 480px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 90%; } } @media screen and (min-width: 481px) and (max-width: 960px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 80%; } } @media screen and (min-width: 961px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 70%; } } .thf-modal-header { border-radius: 3px; padding-top: 18px; padding-left: 24px; padding-right: 24px; padding-bottom: 12px; border: 0px; } .thf-modal-title { font-size: 34px; font-weight: 200; line-height: 27px; text-align: left; color: #4a5c60; } .thf-modal-header-close-button { float: right; border-radius: 1px; text-align: right; color: #0c9abe; cursor: pointer; text-decoration: none; } .thf-modal-body { margin: 12px 24px 12px 24px; font-size: 14px; line-height: 1.71; text-align: left; color: #425357; max-height: calc(100vh - 210px); overflow-y: auto; } .thf-modal-footer { font-family: NunitoSans; background-color: #ffffff; border-radius: 3px; border: 0px; text-align: right; padding-top: 12px; padding-left: 0px; padding-bottom: 24px; padding-right: 24px; } .thf-modal-footer-button { margin-left: 16px; margin-top: 5px; } ::-webkit-scrollbar { width: 4px; height: 50px; opacity: 0.5; border-radius: 2px; } ::-webkit-scrollbar-thumb { background-color: #0c9abe; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfModalComponent.ctorParameters = function () { return []; };
    ThfModalComponent.propDecorators = {
        'modalContent': [{ type: core.ViewChild, args: ['modalContent', { read: core.ElementRef },] },],
    };
    return ThfModalComponent;
}(thfModalBase.ThfModalBaseComponent));

/**
 * \@description
 * Módulo do componente thf-modal
 */
var ThfModalModule = (function () {
    function ThfModalModule() {
    }
    ThfModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfModalComponent
                    ],
                    exports: [ThfModalComponent],
                    providers: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfModalModule.ctorParameters = function () { return []; };
    return ThfModalModule;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        switch (dialogType) {
            case thfDialog_enum.ThfDialogType.Confirm: {
                this.configDialog('Confirmar', ((dialogOptions)).confirm, 'Cancelar', ((dialogOptions)).cancel);
                break;
            }
            case thfDialog_enum.ThfDialogType.Alert: {
                this.configDialog('Ok', ((dialogOptions)).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    ThfDialogComponent.decorators = [
        { type: core.Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDialogComponent.ctorParameters = function () { return []; };
    ThfDialogComponent.propDecorators = {
        'thfModal': [{ type: core.ViewChild, args: [ThfModalComponent,] },],
    };
    return ThfDialogComponent;
}());

var ThfComponentInjectorService = (function () {
    /**
     * @param {?} componentResolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = function (component) {
        var /** @type {?} */ componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        var /** @type {?} */ domElem = (((componentRef.hostView)).rootNodes[0]);
        document.body.appendChild(domElem);
        return componentRef;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return ThfComponentInjectorService;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name='thf-dialog-labs' title='Totvs Dialog Labs'>
 *  <file name='sample-thf-dialog-labs.component.html'>
 *    <thf-button
 *      name="openDialog"
 *      t-icon="thf-icon-logo-totvs"
 *      t-label="Abrir Diálogo"
 *      t-primary="true"
 *      [t-disabled]="f.invalid"
 *      (t-click)="openDialog()">
 *    </thf-button>
 *
 *    <br><br>
 *    <span *ngIf="choice">
 *      <b>Opção selecionada: </b>{{ choice }}
 *    </span>
 *
 *    <hr>
 *
 *    <form #f="ngForm">
 *      <thf-radio-group
 *        name="dialogOptions"
 *        [(ngModel)]="dialogType"
 *        t-label="Opções de diálogo"
 *        t-required
 *        [t-options]="dialogOptions">
 *      </thf-radio-group>
 *
 *      <thf-input
 *        name="title"
 *        [(ngModel)]="title"
 *        t-clean
 *        t-label="Título"
 *        t-placeholder="Insira o título da caixa diálogo"
 *        t-required>
 *      </thf-input>
 *
 *      <thf-input
 *        name="mensage"
 *        [(ngModel)]="mensage"
 *        t-clean
 *        t-label="Mensagem"
 *        t-placeholder="Insira a mensagem da caixa diálogo"
 *        t-required>
 *      </thf-input>
 *    </form>
 *  </file>
 *  <file name='sample-thf-dialog-labs.component.ts'>
 *    import { Component } from '\@angular/core';
 *
 *    import { ThfModule } from '\@totvs/thf-web';
 *    import { ThfDialogService } from '\@totvs/thf-web/services/thf-dialog/thf-dialog.service';
 *
 *    \@Component({
 *      selector: 'sample-thf-dialog-labs',
 *      providers: [ThfDialogService],
 *      templateUrl: './sample-thf-dialog-labs.component.html',
 *    })
 *
 *    export class SampleThfDialogLabsComponent {
 *      title = 'Confirmação';
 *      mensage = 'Você tem certeza que deseja efetuar o pedido número #42?';
 *      dialogType = 'confirm';
 *
 *      choice: string;
 *
 *      dialogOptions: Array<any> = [
 *        { label: 'Alert Dialog', value: 'alert' },
 *        { label: 'Confirm Dialog', value: 'confirm' }
 *      ];
 *
 *      constructor(private thfAlert: ThfDialogService) { }
 *
 *      openDialog() {
 *        this.choice = '';
 *        if (this.dialogType === 'alert') {
 *          this.alertDialog();
 *        } else if (this.dialogType === 'confirm') {
 *          this.confirmDialog();
 *        }
 *      }
 *
 *      alertDialog() {
 *        this.thfAlert.alert({
 *          title: this.title,
 *          message: this.mensage,
 *          ok: () => this.yourChoice('OK')
 *        });
 *      }
 *
 *      confirmDialog() {
 *        this.thfAlert.confirm({
 *          title: this.title,
 *          message: this.mensage,
 *          confirm: () => this.yourChoice('CONFIRMAR'),
 *          cancel: () => this.yourChoice('CANCELAR')
 *        });
 *      }
 *
 *      yourChoice(choice) {
 *        this.choice = choice;
 *      }
 *    }
 *  </file>
 * </example>
 */
var ThfDialogService = (function (_super) {
    __extends$2(ThfDialogService, _super);
    /**
     * @param {?} thfComponentInjector
     */
    function ThfDialogService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    ThfDialogService.prototype.openDialog = function (dialogType, dialogOptions) {
        var /** @type {?} */ componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    ThfDialogService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfDialogService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService, },
    ]; };
    return ThfDialogService;
}(thfDialogBase_service.ThfDialogBaseService));

var ThfDialogModule = (function () {
    function ThfDialogModule() {
    }
    ThfDialogModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThfDialogComponent
                    ],
                    imports: [
                        ThfModalModule
                    ],
                    exports: [
                        ThfDialogComponent
                    ],
                    entryComponents: [
                        ThfDialogComponent
                    ],
                    providers: [
                        ThfDialogService
                    ],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDialogModule.ctorParameters = function () { return []; };
    return ThfDialogModule;
}());

exports.ThfDialogModule = ThfDialogModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
