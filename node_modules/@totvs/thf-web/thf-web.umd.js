(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@totvs/thf-core/components/thf-avatar-base'), require('@totvs/thf-core/components/thf-button-base'), require('@progress/kendo-angular-charts'), require('@totvs/thf-core/components/thf-chart-base'), require('@totvs/thf-core/components/thf-chart-base/thf-chart-colors.constant'), require('hammerjs'), require('@angular/router'), require('@angular/forms'), require('@angular/common/http'), require('@totvs/thf-core/utils/util'), require('@totvs/thf-core/components/thf-field-base'), require('@totvs/thf-core/utils'), require('@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file'), require('@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum'), require('@progress/kendo-angular-grid'), require('@progress/kendo-data-query'), require('@totvs/thf-core/components/thf-grid-base/thf-grid-base.component'), require('@totvs/thf-core/components/thf-modal-base'), require('@totvs/thf-core/components/thf-menu-base'), require('@totvs/thf-core/components/thf-page-base'), require('@totvs/thf-core/components/thf-page-base/thf-page-base.component'), require('@totvs/thf-core/components/thf-tabs-base'), require('@angular/platform-browser'), require('@totvs/thf-core/components/thf-toolbar-base'), require('@totvs/thf-core/components/thf-widget-base'), require('@totvs/thf-core/services/thf-dialog-base/thf-dialog.enum'), require('@totvs/thf-core/services/thf-dialog-base/thf-dialog-base.service'), require('@totvs/thf-core/services/thf-notification-base/thf-notification-base.service'), require('@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum'), require('@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-base.component'), require('@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-type.enum'), require('@totvs/thf-core/interceptors/thf-http-interceptor-base'), require('@totvs/thf-core/services/thf-i18n-base/thf-i18n-base.pipe')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@totvs/thf-core/components/thf-avatar-base', '@totvs/thf-core/components/thf-button-base', '@progress/kendo-angular-charts', '@totvs/thf-core/components/thf-chart-base', '@totvs/thf-core/components/thf-chart-base/thf-chart-colors.constant', 'hammerjs', '@angular/router', '@angular/forms', '@angular/common/http', '@totvs/thf-core/utils/util', '@totvs/thf-core/components/thf-field-base', '@totvs/thf-core/utils', '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file', '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum', '@progress/kendo-angular-grid', '@progress/kendo-data-query', '@totvs/thf-core/components/thf-grid-base/thf-grid-base.component', '@totvs/thf-core/components/thf-modal-base', '@totvs/thf-core/components/thf-menu-base', '@totvs/thf-core/components/thf-page-base', '@totvs/thf-core/components/thf-page-base/thf-page-base.component', '@totvs/thf-core/components/thf-tabs-base', '@angular/platform-browser', '@totvs/thf-core/components/thf-toolbar-base', '@totvs/thf-core/components/thf-widget-base', '@totvs/thf-core/services/thf-dialog-base/thf-dialog.enum', '@totvs/thf-core/services/thf-dialog-base/thf-dialog-base.service', '@totvs/thf-core/services/thf-notification-base/thf-notification-base.service', '@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum', '@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-base.component', '@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-type.enum', '@totvs/thf-core/interceptors/thf-http-interceptor-base', '@totvs/thf-core/services/thf-i18n-base/thf-i18n-base.pipe'], factory) :
	(factory((global['thf-web'] = {}),global.core,global.common,global.thfAvatarBase,global.thfButtonBase,global.kendoAngularCharts,global.thfChartBase,global.thfChartColors_constant,null,global.router,global.forms,global.http,global.util,global.thfFieldBase,global.utils,global.thfUploadFile,global.thfUploadStatus_enum,global.kendoAngularGrid,global.kendoDataQuery,global.thfGridBase_component,global.thfModalBase,global.thfMenuBase,global.thfPageBase,global.thfPageBase_component,global.thfTabsBase,global.platformBrowser,global.thfToolbarBase,global.thfWidgetBase,global.thfDialog_enum,global.thfDialogBase_service,global.thfNotificationBase_service,global.thfToasterOrientation_enum,global.thfToasterBase_component,global.thfToasterType_enum,global.thfHttpInterceptorBase,global.thfI18nBase_pipe));
}(this, (function (exports,core,common,thfAvatarBase,thfButtonBase,kendoAngularCharts,thfChartBase,thfChartColors_constant,hammerjs,router,forms,http,util,thfFieldBase,utils,thfUploadFile,thfUploadStatus_enum,kendoAngularGrid,kendoDataQuery,thfGridBase_component,thfModalBase,thfMenuBase,thfPageBase,thfPageBase_component,thfTabsBase,platformBrowser,thfToolbarBase,thfWidgetBase,thfDialog_enum,thfDialogBase_service,thfNotificationBase_service,thfToasterOrientation_enum,thfToasterBase_component,thfToasterType_enum,thfHttpInterceptorBase,thfI18nBase_pipe) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name="thf-avatar-labs" title="Totvs Avatar Labs" >
 *  <file name='sample-thf-avatar-labs.component.html'> </file>
 *  <file name="sample-thf-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-avatar" title="Totvs Avatar com diferentes imagens" >
 *  <file name='sample-thf-avatar.component.html'> </file>
 *  <file name="sample-thf-avatar.component.ts"> </file>
 * </example>
 */
var ThfAvatarComponent = (function (_super) {
    __extends(ThfAvatarComponent, _super);
    function ThfAvatarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultSrc = './assets/images/totvs-avatar-default.svg';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.ngOnInit = function () {
        if (!this.src) {
            this.src = this.defaultSrc;
        }
    };
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.onError = function () {
        this.src = this.defaultSrc;
    };
    ThfAvatarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-avatar', template: "<div class=\"thf-avatar thf-avatar-{{size}}\"> <img [src]=\"src\" alt=\"\" (error)=\"onError()\" class=\"thf-avatar-image\" > </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfAvatarComponent.ctorParameters = function () { return []; };
    return ThfAvatarComponent;
}(thfAvatarBase.ThfAvatarBaseComponent));

/**
 * \@description
 * Módulo do componente thf-avatar
 */
var ThfAvatarModule = (function () {
    function ThfAvatarModule() {
    }
    ThfAvatarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfAvatarComponent
                    ],
                    exports: [
                        ThfAvatarComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfAvatarModule.ctorParameters = function () { return []; };
    return ThfAvatarModule;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-button-labs' title='Totvs Button Labs'>
 *  <file name='sample-thf-button-labs.component.html'> </file>
 *  <file name='sample-thf-button-labs.component.ts'> </file>
 * </example>
 *
 * <example name='thf-button-click' title='Eventos de click e botão desabilitado'>
 *  <file name='sample-thf-button-click.component.html'> </file>
 *  <file name='sample-thf-button-click.component.ts'> </file>
 *  <file name='sample-thf-button-click.component.css'> </file>
 * </example>
 *
 * <example name='thf-button' title='Tipos e tamanhos do thf-button' >
 *  <file name='sample-thf-button.component.html'> </file>
 * <file name='sample-thf-button.component.ts'> </file>
 * </example>
 */
var ThfButtonComponent = (function (_super) {
    __extends$1(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button\" type=\"button\" id=\"{{ id }}\" [disabled]=\"disabled\" [ngClass]=\"{ 'thf-button--primary' : primary, 'thf-button--sm' : small }\" (click)=\"onClick()\"> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> {{ label }} </button> ",
                    providers: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonComponent.ctorParameters = function () { return []; };
    return ThfButtonComponent;
}(thfButtonBase.ThfButtonBaseComponent));

/**
 * \@description
 * Módulo do componente thf-button.
 */
var ThfButtonModule = (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfButtonComponent],
                    exports: [ThfButtonComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonModule.ctorParameters = function () { return []; };
    return ThfButtonModule;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@description
 *
 * Para o correto funcionamento do THF Chart deve ser importado o módulo ```BrowserAnimationsModule``` no módulo principal da sua aplicação.
 *
 * > Módulo da sua aplicação:
 *
 *
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * No arquivo```angular-cli.json``` da sua aplicação você deve importar o arquivo ```all.css```, que pertence ao
 * pacote ```\@progress/kendo-theme-default```.
 *
 *
 * > Arquivo .angular-cli.json:
 *
 *
 * ```
 * ...
 *
 * "styles": [
 *   "../node_modules/\@progress/kendo-theme-default/dist/all.css"
 * ]
 *
 * ...
 * ```
 * \@example
 * <example name="thf-chart" title="Totvs Chart Labs">
 *  <file name='sample-thf-chart.component.html'> </file>
 *  <file name='sample-thf-chart.component.ts'> </file>
 * </example>
 */
var ThfChartComponent = (function (_super) {
    __extends$2(ThfChartComponent, _super);
    function ThfChartComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.label = {
            color: '#fff',
            background: '#0c9abe',
            border: {
                color: '#0c9abe'
            }
        };
        return _this;
    }
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.getSeriesColor = function () {
        if (this.series) {
            var /** @type {?} */ chart = this.typeChart;
            var /** @type {?} */ index = this.series.length - 1;
            if (chart === 'donut' || chart === 'funnel' || chart === 'pie') {
                // Caso for donut, funnel ou pie utiliza a propriedade data para recuperar o index.
                var /** @type {?} */ dataSeries = this.series[index].data;
                var /** @type {?} */ dataSerieIndex = dataSeries.length - 1;
                return thfChartColors_constant.ThfChartColors[dataSerieIndex];
            }
            // Caso houver 12 ou mais series define o index como 11.
            index = index >= 12 ? 11 : index;
            return thfChartColors_constant.ThfChartColors[index];
        }
        return thfChartColors_constant.ThfChartColors[11];
    };
    ThfChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-chart',
                    encapsulation: core.ViewEncapsulation.None, template: "<kendo-chart [seriesColors]=\"getSeriesColor()\" [style.height]=\"height\" [categoryAxis]=\"{'categories': categories}\" (seriesClick)=\"onSeriesClick($event)\" (seriesHover)=\"onSeriesHover($event)\"> <kendo-chart-title [text]=\"title\"> </kendo-chart-title> <kendo-chart-legend position=\"bottom\" orientation=\"horizontal\"> </kendo-chart-legend> <kendo-chart-tooltip> </kendo-chart-tooltip> <kendo-chart-value-axis> <kendo-chart-value-axis-item [max]=\"maxValue\" [min]=\"minValue\"> </kendo-chart-value-axis-item> </kendo-chart-value-axis> <kendo-chart-series> <kendo-chart-series-item *ngFor=\"let serie of series\" [name]=\"serie.name\" [type]=\"typeChart\" [data]=\"serie.data\"> <kendo-chart-series-item-labels [visible]=\"labelVisible\" [color]=\"label.color\" [background]=\"label.background\" [border]=\"label.border\"> </kendo-chart-series-item-labels> </kendo-chart-series-item> </kendo-chart-series> </kendo-chart> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfChartComponent.ctorParameters = function () { return []; };
    return ThfChartComponent;
}(thfChartBase.ThfChartBaseComponent));

/**
 * \@description
 *
 * Módulo do componente thf-chart.
 */
var ThfChartModule = (function () {
    function ThfChartModule() {
    }
    ThfChartModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        kendoAngularCharts.ChartModule,
                        common.CommonModule
                    ],
                    declarations: [ThfChartComponent],
                    exports: [ThfChartComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfChartModule.ctorParameters = function () { return []; };
    return ThfChartModule;
}());

/**
 * \@description
 * O componente **thf-dropdown** pode ser utilizado como um agrupador de ações.
 *
 * \@example
 * <example name='thf-dropdown'>
 *  <file name='sample-thf-dropdown.component.html'>
 *    <thf-dropdown
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *    <thf-dropdown
 *      [t-disabled]="disabled"
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *     <thf-dropdown
 *      [t-label]="label">
 *     </thf-dropdown>
 *
 * </file>
 *
 *  <file name='sample-thf-dropdown.component.ts'>
 *    import { Component } from '\@angular/core';
 *    import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-dropdown',
 *      templateUrl: './sample-thf-dropdown.component.html'
 *   })
 *   export class SampleThfDropdownComponent {
 *
 *       public disabled = true;
 *       public label  = 'Outras ações';
 *       public actions: Array<{}> = [
 *         {label: 'Adicionar', action: this.add, icon: 'thf-icon-plus'},
 *         {label: 'Clonar', action: this.clone, icon: 'thf-icon-copy', disabled: true},
 *         {label: 'Totvs', url: 'http://www.google.com', icon: 'thf-icon-document'}
 *       ];
 *
 *      public add(): void {
 *          console.log('Adicionar');
 *      }
 *
 *      public clone(): void {
 *          console.log('Clonar');
 *      }
 *   }
 *  </file>
 * </example>
 */
var ThfDropdownComponent = (function () {
    /**
     * @param {?} _element
     * @param {?} _view
     * @param {?} _router
     */
    function ThfDropdownComponent(_element, _view, _router) {
        this._element = _element;
        this._view = _view;
        this._router = _router;
        this._open = false;
        this.icon = 'thf-icon-arrow-down';
        this._parentRef = _view['_view']['component'];
        this._addListenerCloseDropdown();
    }
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype.toggleButton = function () {
        this.icon = this._open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.actions && this.actions.length) {
            this._selector('.dropdown').classList.toggle('t-show');
        }
        this._open = !this._open;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfDropdownComponent.prototype.onClick = function (item) {
        if (item.url) {
            var /** @type {?} */ url = item.url, /** @type {?} */ regexUrl = /(http(s?))\:\/\//gi;
            if (regexUrl.test(url)) {
                window.open(url, '_blank');
            }
            else {
                this._router.navigate([url]);
            }
        }
        else if (item.action) {
            this._callAction(item.action);
        }
    };
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype._addListenerCloseDropdown = function () {
        var /** @type {?} */ _this = this;
        window.onclick = function (event) {
            var /** @type {?} */ value = event.target && event.target.getAttribute('class');
            if (value !== 'button-dropdown' && _this._open) {
                _this.toggleButton();
            }
        };
    };
    /**
     * @param {?} _function
     * @return {?}
     */
    ThfDropdownComponent.prototype._callAction = function (_function) {
        this._callActionOfContext(_function, this._parentRef);
    };
    /**
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    ThfDropdownComponent.prototype._callActionOfContext = function (_function, _context) {
        if (this._isTypeof(_function, 'function')) {
            _function.call(_context);
        }
        else {
            _context[_function]();
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfDropdownComponent.prototype._selector = function (query) {
        return this._element.nativeElement.querySelector(query);
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfDropdownComponent.prototype._isTypeof = function (object, type) {
        return typeof object === type;
    };
    ThfDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-dropdown', template: "<div class=\"dropdown\"> <div class=\"button-dropdown\" [ngClass]=\"{'disabled' : disabled}\" (click)=\"toggleButton()\"> {{label}} <div class=\"hidden-xs icon-dropdown thf-icon {{icon}}\" (click)=\"toggleButton()\"></div> </div> <ul class=\"dropdown-content\"> <li *ngFor=\"let action of actions\"> <a (click)=\"onClick(action)\" [ngClass]=\"{'disabled' : action.disabled}\"> {{action?.label}} </a> </li> </ul> </div> ", styles: [".dropdown { position: relative; display: inline-block; width: inherit; } .dropdown.t-show > .button-dropdown { border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-bottom: none; } .dropdown.t-show > .dropdown-content { display: block !important; } div.button-dropdown { cursor: pointer; line-height: 24px; font-size: 16px; height: 44px; border-radius: 3px; padding: 9px 38px 9px 16px; background-color: #ffffff; border: solid 1px #0c9abe; color: #0c9abe; } div.button-dropdown > span { padding-top: 3px; } div.button-dropdown.disabled { background-color: #ffffff; border: solid 1px #4a5c60; opacity: 0.4; } div.button-dropdown:hover { color: #0a7b98; border: solid 1px #0a7b98; } ul.dropdown-content { display: none; position: absolute; background-color: #ffffff; border: solid 1px #0c9abe; border-top: none; z-index: 1; width: 100%; max-height: 175px; overflow-y: auto; list-style-type: none; padding: 0; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; } ul.dropdown-content > li > a { color: #0c9abe; padding: 10px 16px; text-decoration: none; display: block; cursor: pointer; word-wrap: break-word; line-height: 1.5; } ul.dropdown-content > li > a:hover { color: #0a7b98; } ul.dropdown-content > li > a:active { color: #075c72; } .disabled { pointer-events: none; color: #b7bebf !important; } .icon-dropdown { font-size: 24px; right: 10px; top: 10px; position: absolute; } ::-webkit-scrollbar { width: 7px; } ::-webkit-scrollbar-track { display: none; } ::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #0c9abe; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
        { type: router.Router, },
    ]; };
    ThfDropdownComponent.propDecorators = {
        'disabled': [{ type: core.Input, args: ['t-disabled',] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
    };
    return ThfDropdownComponent;
}());

/**
 * \@description
 * Módulo do componente thf-dropdown.
 */
var ThfDropdownModule = (function () {
    function ThfDropdownModule() {
    }
    ThfDropdownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDropdownComponent],
                    exports: [ThfDropdownComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownModule.ctorParameters = function () { return []; };
    return ThfDropdownModule;
}());

var ThfCalendarLangService = (function () {
    function ThfCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'en';
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    ThfCalendarLangService.prototype.setLanguage = function (lang) {
        if (lang) {
            if (lang.length >= 2) {
                lang = lang.toLowerCase().slice(0, 2);
                this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordMonth = function () {
        return this.wordMonth[this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordYear = function () {
        return this.wordYear[this.lang];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonth = function (month) {
        return this.months[month][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayMonths = function () {
        var /** @type {?} */ arrMonths = Array();
        for (var /** @type {?} */ i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeedDays = function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayWeekDays = function () {
        var /** @type {?} */ arrWeekDays = Array();
        for (var /** @type {?} */ i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    ThfCalendarLangService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarLangService.ctorParameters = function () { return []; };
    return ThfCalendarLangService;
}());

var ThfCalendarService = (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = function (date) {
        var /** @type {?} */ startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        var /** @type {?} */ weeks = [];
        var /** @type {?} */ week = [];
        var /** @type {?} */ i = 0;
        var /** @type {?} */ date = this.weekStartDate(new Date(year, month, 1));
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = function (year, month) {
        var /** @type {?} */ getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var ThfCalendarComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} thfCalendarService
     * @param {?} thfCalendarLangService
     */
    function ThfCalendarComponent(elementRef, thfCalendarService, thfCalendarLangService) {
        this.elementRef = elementRef;
        this.dateChange = new core.EventEmitter();
        this.submit = new core.EventEmitter();
        this.today = new Date();
        this.isMobile = util.isMobile;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "date", {
        /**
         * @return {?}
         */
        get: function () {
            return this._date;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                this._date = val;
                this.updateDate(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateStart;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateStart = new Date(year, month, day, 0, 0, 0);
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateEnd;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateEnd = new Date(year, month, day, 23, 59, 59);
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
        this.init();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = function () {
        if (!this.date) {
            this.date = new Date();
        }
        this.selectDay();
        this.updateDate(this.date);
        if (this.isMobile()) {
            this.setMobileVisualization();
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = function () {
        var /** @type {?} */ thfCalendarOverlay = this.elementRef.nativeElement.querySelector('.thf-calendar-overlay');
        var /** @type {?} */ thfCalendar = this.elementRef.nativeElement.querySelector('.thf-calendar');
        thfCalendar.classList.add('thf-calendar-mobile');
        thfCalendarOverlay.classList.remove('thf-invisible');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentMonth = this.displayMonths[this.currentMonthNumber];
        this.currentYear = date.getFullYear();
        this.currentDay = date.getDate();
        this.currentDayOfWeek = this.displayWeedDays[date.getDay()];
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = function (year, month) {
        var /** @type {?} */ calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = function () {
        this.elDays.nativeElement.classList.remove('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.remove('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.remove('thf-invisible');
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (day) {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.dateInRange = function (date) {
        if (this._dateStart && !this._dateEnd) {
            return date >= this._dateStart ? true : false;
        }
        if (this._dateEnd && !this._dateStart) {
            return date <= this._dateEnd ? true : false;
        }
        if (this._dateStart && this._dateEnd) {
            return date >= this._dateStart && date <= this._dateEnd ? true : false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthBackgroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthForegroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearBackgroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearForegroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevYear = function () {
        this.updateDisplay(this.displayYear - 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextYear = function () {
        this.updateDisplay(this.displayYear + 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevDecade = function () {
        this.updateDisplay(this.displayYear - 10, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextDecade = function () {
        this.updateDisplay(this.displayYear + 10, this.displayMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleção de mês
        if (this.lastDisplay === 'month') {
            this.selectMonth();
        }
        else {
            this.selectDay();
        }
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = function (date) {
        if (this.dateInRange(date)) {
            this.date = date;
            this.dateChange.emit(date);
            this.submit.emit(this.date);
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = function (year) {
        this.displayDecade = Array();
        var /** @type {?} */ i;
        if (year % 10 === 0) {
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        }
        else {
            // Descobre o início da década
            while (year % 10 !== 0) {
                year--;
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = function () {
        return this.thfCalendarLangService.getWordYear();
    };
    ThfCalendarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar-overlay thf-invisible\"></div> <div class=\"thf-calendar\"> <div #days> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\" [ngClass]=\"getDayBackgroundColor(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div #months> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevYear()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextYear()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordMonth() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" (click)=\"onSelectMonth(displayYear, i)\" [ngClass]=\"getMonthBackgroundColor(i)\"> <span [ngClass]=\"getMonthForegroundColor(i)\"> {{ month }} </span> </div> </div> </div> </div> <div #years> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevDecade()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)=\"onNextDecade()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordYear() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" (click)=\"onSelectYear(year, displayMonthNumber)\" [ngClass]=\"getYearBackgroundColor(year)\"> <span [ngClass]=\"getYearForegroundColor(year)\"> {{ year }} </span> </div> </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: ThfCalendarService, },
        { type: ThfCalendarLangService, },
    ]; };
    ThfCalendarComponent.propDecorators = {
        'date': [{ type: core.Input, args: ['t-date',] },],
        'dateChange': [{ type: core.Output, args: ['t-dateChange',] },],
        'dateStart': [{ type: core.Input, args: ['t-start',] },],
        'dateEnd': [{ type: core.Input, args: ['t-end',] },],
        'locale': [{ type: core.Input, args: ['t-locale',] },],
        'submit': [{ type: core.Output, args: ['t-submit',] },],
        'elDays': [{ type: core.ViewChild, args: ['days', { read: core.ElementRef },] },],
        'elMonths': [{ type: core.ViewChild, args: ['months', { read: core.ElementRef },] },],
        'elYears': [{ type: core.ViewChild, args: ['years', { read: core.ElementRef },] },],
    };
    return ThfCalendarComponent;
}());

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-checkbox-group'>
 * <file name='sample-thf-checkbox-group.component.html'>
 *  <form #f="ngForm">
 *    <thf-checkbox-group
 *      name="checkboxDiasUteis"
 *      t-label="THF-CHECKBOX"
 *      t-help="thf-checkbox"
 *      t-required="true"
 *      [t-options]="diasSemana"
 *      (t-change)="change($event)"
 *      [(ngModel)]="modelDiasSemana">
 *    </thf-checkbox-group>
 *  </form>
 *  <br>
 *  <thf-button
 *    t-label="Checar dias úteis"
 *    (t-click)="modelDiasSemana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta']">
 *  </thf-button>
 *  <thf-button
 *    t-label="Checar dias corridos"
 *    (t-click)="modelDiasSemana = ['domingo','segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado']">
 *  </thf-button>
 *  <br>
 *  <pre>{{ modelDiasSemana | json }}</pre>
 * </file>
 * <file name='sample-thf-checkbox-group.component.ts'>
 *  import { Component, ViewChild } from '\@angular/core';
 *  import { ThfModule } from '\@totvs/thf-web';
 *  import { ThfCheckboxGroupOption } from '\@totvs/thf-core/components/thf-field-base/thf-checkbox-group-base/thf-checkbox-group.interface';
 *
 *  \@Component({
 *    selector: 'sample-thf-checkbox-group',
 *    templateUrl: './sample-thf-checkbox-group.component.html'
 *  })
 *
 *  export class SampleThfCheckboxGroupComponent {
 *    diasSemana: Array<ThfCheckboxGroupOption>;
 *    modelDiasSemana: Array<any>;
 *
 *    constructor() {
 *      this.diasSemana = [
 *        {
 *          value: 'domingo',
 *          label: 'Domingo'
 *        },
 *        {
 *          value: 'segunda',
 *          label: 'Segunda-feira'
 *        },
 *        {
 *          value: 'terca',
 *          label: 'Terça-feira',
 *        },
 *        {
 *          value: 'quarta',
 *          label: 'Quarta-feira',
 *          disabled: true
 *        },
 *        {
 *          value: 'quinta',
 *          label: 'Quinta-feira',
 *        },
 *        {
 *          value: 'sexta',
 *          label: 'Sexta-feira',
 *        },
 *        {
 *          value: 'sabado',
 *          label: 'Sábado'
 *        }
 *      ];
 *      this.modelDiasSemana = ['terca', 'quinta', 'sexta'];
 *    }
 *
 *    change(value) {
 *      console.log('Chamado evento de change', value);
 *    }
 *  }
 * </file>
 * </example>
 */
var ThfCheckboxGroupComponent = (function (_super) {
    __extends$3(ThfCheckboxGroupComponent, _super);
    function ThfCheckboxGroupComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfCheckboxGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-checkbox-group', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-checkbox-container\" #inp> <div class=\"thf-input-checkbox-inline\" *ngFor=\"let option of options\"> <input class=\"thf-input-checkbox\" type=\"checkbox\" [attr.name]=\"name + option.value\" [attr.id]=\"name + option.value\" [required]=\"required\" [disabled]=\"option.disabled === true\" [value]=\"option.value\" (click)=\"eventClick(name, option.value)\"> <label for=\"{{name + option.value}}\">{{option.label}}</label> </div> </div> </thf-field-container> ", styles: [".thf-input-checkbox-inline { display: inline-block; } .thf-input-checkbox { width: 20px; height: 20px; border-radius: 2px; box-shadow: inset 0 1px 8px 0 rgba(0, 0, 0, 0.1); border: solid 1px rgba(255, 255, 255, 0.6); } .thf-input-checkbox:checked { width: 20px; height: 20px; border-radius: 2px; } input[type=checkbox] { visibility: hidden; position: absolute; } input[type=checkbox] + label:before { width: 20px; height: 20px; margin-top: -2px; margin-right: 8px; display: inline-block; vertical-align: middle; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf; content: ' '; } input[type=checkbox]:checked + label:before { background-color: #0c9abe; box-shadow: none; color: white; font-family: 'TotvsIcon' !important; line-height: 18px; content: ' '; padding-left: 1px; } input[type=checkbox]:disabled + label:before { background-color: #edefef; border: solid 1px #b7bebf; } input[type=checkbox]:checked:disabled + label:before { color: #b7bebf; } input[type=checkbox] + label:before { border-radius: 2px; } label { height: 16px; font-family: NunitoSans; font-size: 16px; line-height: 1.5; text-align: left; color: #1e2526; margin: 0 6px 6px 6px; cursor: pointer; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCheckboxGroupComponent.ctorParameters = function () { return []; };
    ThfCheckboxGroupComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfCheckboxGroupComponent;
}(thfFieldBase.ThfCheckboxGroupBaseComponent));

var ThfCleanComponent = (function () {
    function ThfCleanComponent() {
        this.position = 1;
    }
    ThfCleanComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-clean', template: "<span class=\"thf-icon thf-icon-close thf-span-clean\" [ngClass]=\"{'thf-icon': true, 'thf-icon-close': true, 'thf-span-clean': true, 'thf-span-clean-pos1': position==1, 'thf-span-clean-pos2': position!=1}\"> </span> ", styles: [".thf-span-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; top: 19px; text-decoration: none; cursor: pointer; } .thf-span-clean-pos1 { right: 35px; } .thf-span-clean-pos2 { right: 70px; } .ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCleanComponent.ctorParameters = function () { return []; };
    ThfCleanComponent.propDecorators = {
        'position': [{ type: core.Input },],
    };
    return ThfCleanComponent;
}());

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-datepicker' title='Totvs Datepicker'>
 *  <file name='sample-thf-datepicker.component.html'> </file>
 *  <file name='sample-thf-datepicker.component.ts'> </file>
 * </example>
 */
var ThfDatepickerComponent = (function (_super) {
    __extends$4(ThfDatepickerComponent, _super);
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?=} ngControl
     */
    function ThfDatepickerComponent(renderer, el, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.validators = [];
        _this.date = new Date();
        _this.hour = 'T00:00:00+00:00';
        _this.el = el;
        _this.clickListener = renderer.listenGlobal('document', 'click', function (event) { return _this.wasClickedOnPicker(event); });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngAfterViewInit = function () {
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
        if (this.clean) {
            this.inputEl.nativeElement.style.paddingRight = '30px';
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngOnDestroy = function () {
        this.clickListener();
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.togglePicker = function () {
        var /** @type {?} */ datepickerEl = this.dialogPicker.nativeElement;
        if (this.disabled) {
            return;
        }
        if (datepickerEl.classList.contains('thf-datepicker-invisible')) {
            var /** @type {?} */ scrollInit = document.body.scrollWidth;
            // Primeiro joga o Datepicker na posição inicial
            // Em seguida, verifica se vai estourar o tamanho da tela
            datepickerEl.style.marginLeft = '0px';
            datepickerEl.classList.remove('thf-datepicker-invisible');
            this.picker.init();
            // Se estourar o tamanho da tela, então alinha o Datepicker à direita do componente
            /* istanbul ignore if */
            if (document.body.scrollWidth !== scrollInit) {
                // Ignorado teste devido a necessidade de testar em uma tela menor
                datepickerEl.style.marginLeft = (this.inputEl.nativeElement.offsetWidth - 288) + 'px';
            }
        }
        else {
            datepickerEl.classList.add('thf-datepicker-invisible');
            this.inputEl.nativeElement.disabled = false;
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.dateSelected = function () {
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.callOnChange(utils.convertDateToISOExtended(this.date, this.hour));
        this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.wasClickedOnPicker = function (event) {
        /* istanbul ignore else */
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target)) {
            this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeyup = function ($event) {
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeypress = function ($event) {
        this.objMask.keypress($event);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeydown = function ($event) {
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasInvalidClass = function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.cleanInput = function () {
        this.inputEl.nativeElement.value = '';
        this.callOnChange('');
        this.date = undefined;
        if (this.required) {
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnBlur = function ($event) {
        if (!utils.isMobile()) {
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnChange = function ($event) {
        if (utils.isMobile()) {
            this.controlModel(this.inputEl.nativeElement.value);
            this.callOnChange(this.inputEl.nativeElement.value);
        }
        this.onchange.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnClick = function ($event) {
        var _this = this;
        if (utils.isMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(function () { return _this.togglePicker(); }, 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.formatToDate = function (value) {
        var /** @type {?} */ dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.writeValue = function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                var /** @type {?} */ dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else {
                this.hour = value.substring(10, 25);
                var /** @type {?} */ day = parseInt(value.substring(8, 10), 10);
                var /** @type {?} */ month = parseInt(value.substring(5, 7), 10) - 1;
                var /** @type {?} */ year = parseInt(value.substring(0, 4), 10);
                var /** @type {?} */ dateTemp = new Date(year, month, day);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasOverlayClass = function (element) {
        return element.classList.contains('thf-calendar-overlay');
    };
    ThfDatepickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-datepicker', template: "<div class=\"thf-input-datepicker\"> <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp type=\"text\" class=\"thf-input-elem\" (blur)=\"eventOnBlur($event)\" (change)=\"eventOnChange($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" position=\"2\" *ngIf=\"clean && !disabled\"></thf-clean> <span #iconDatepicker (click)=\"togglePicker()\" class=\"thf-icon thf-icon-calendar thf-span-datepicker\"></span> </div> <div class=\"thf-datepicker thf-datepicker-invisible\" #dialogPicker> <thf-calendar #picker [t-locale]=\"locale\" [t-end]=\"end\" [t-start]=\"start\" [(t-date)]=\"date\" (t-submit)=\"dateSelected()\"> </thf-calendar> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> </div> ", styles: [".thf-input-datepicker { max-width: 100%; } .thf-clean-arrow-mobile { z-index: 4; position: relative; width: 20px; float: right; height: 20px; background-color: white; bottom: 33px; right: 2px; } .thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-datepicker.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-datepicker.ng-invalid.ng-dirty .thf-input-elem { outline: none; border: solid 1px #c64840 !important; } thf-datepicker.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: absolute; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } .thf-datepicker { position: absolute; padding-top: 8px; z-index: 1000; } .thf-datepicker-invisible { display: none; } .thf-span-datepicker { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 18px; text-decoration: none; z-index: 100; cursor: pointer; } thf-datepicker.ng-invalid.ng-dirty .thf-span-datepicker { color: #c64840 !important; } "],
                    encapsulation: core.ViewEncapsulation.None
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDatepickerComponent.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    ThfDatepickerComponent.propDecorators = {
        'picker': [{ type: core.ViewChild, args: ['picker',] },],
        'dialogPicker': [{ type: core.ViewChild, args: ['dialogPicker', { read: core.ElementRef },] },],
        'iconDatepicker': [{ type: core.ViewChild, args: ['iconDatepicker', { read: core.ElementRef },] },],
        'inputEl': [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef },] },],
        'cleanEl': [{ type: core.ViewChild, args: ['clean', { read: core.ElementRef },] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'onKeyup': [{ type: core.HostListener, args: ['keyup', ['$event'],] },],
        'onKeypress': [{ type: core.HostListener, args: ['keypress', ['$event'],] },],
        'onKeydown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfDatepickerComponent;
}(thfFieldBase.ThfDatepickerBaseComponent));

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 * thf-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * \@example
 *  <example name='thf-email'>
 *  <file name='sample-thf-email.component.html'>
 *  <form #f="ngForm">
 *    <thf-email
 *    t-label="E-mail"
 *    t-help="Informe seu e-mail completo"
 *    t-placeholder="Informe seu e-mail completo"
 *    name="email"
 *    [(ngModel)]="email"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-email>
 *  </form>
 *  </file>
 *  <file name='sample-thf-email.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-email',
 *     templateUrl: './sample-thf-email.component.html'
 *   })
 *   export class SampleThfEmailComponent {
 *
 *     email = 'fulano\@totvs.com.br';
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfEmailComponent = (function (_super) {
    __extends$5(ThfEmailComponent, _super);
    function ThfEmailComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indica a quantidade máxima de caracteres que o campo aceita
         */
        _this.maxlength = 254;
        _this.type = 'email';
        _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
        _this.mask = '';
        return _this;
    }
    Object.defineProperty(ThfEmailComponent.prototype, "setMaxlength", {
        /**
         * @param {?} maxlength
         * @return {?}
         */
        set: function (maxlength) {
            if (!isNaN(parseInt(maxlength, 10))) {
                this.maxlength = parseInt(maxlength, 10);
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfEmailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-email', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfEmailComponent.ctorParameters = function () { return []; };
    ThfEmailComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMaxlength': [{ type: core.Input, args: ['t-maxlength',] },],
    };
    return ThfEmailComponent;
}(thfFieldBase.ThfInputBaseComponent));

/**
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
var ThfFieldContainerComponent = (function () {
    function ThfFieldContainerComponent() {
        this.optional = {
            pt: '(Opcional)',
            en: '(Optional)',
            es: '(Opcional)'
        };
    }
    /**
     * @return {?}
     */
    ThfFieldContainerComponent.prototype.getOptional = function () {
        var /** @type {?} */ lang = (navigator.language) ? navigator.language.toLowerCase().slice(0, 2) : 'pt';
        return (this.optional[lang]) ? this.optional[lang] : '';
    };
    /**
     * @return {?}
     */
    ThfFieldContainerComponent.prototype.ngOnInit = function () {
    };
    ThfFieldContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-field-container', template: " <div style=\"display:block\"> <span class=\"thf-label\">{{label}}</span> <span *ngIf=\"opcional\" class=\"thf-opcional\">{{getOptional()}}</span> <br> <span *ngIf=\"help!==''\" class=\"thf-label-help\">{{help}}</span> <ng-content></ng-content> </div> ", styles: [".thf-label { font-size: 14px; line-height: 2; text-align: left; color: #4a5c60; font-family: 'NunitoSans-Bold'; } .thf-opcional { font-size: 12px; line-height: 2; color: #4a5c60; font-family: NunitoSans; float: right !important; text-align: bottom; } .thf-label-help { font-size: 12px; line-height: 1.67; text-align: left; color: #4a5c60; font-family: NunitoSans; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfFieldContainerComponent.ctorParameters = function () { return []; };
    ThfFieldContainerComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'opcional': [{ type: core.Input, args: ['t-opcional',] },],
    };
    return ThfFieldContainerComponent;
}());

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-input-labs' title='Totvs Input Labs' >
 *  <file name='sample-thf-input-labs.component.html'> </file>
 *  <file name='sample-thf-input-labs.component.ts'> </file>
 * </example>
 */
var ThfInputComponent = (function (_super) {
    __extends$6(ThfInputComponent, _super);
    function ThfInputComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-input', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInputComponent.ctorParameters = function () { return []; };
    ThfInputComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfInputComponent;
}(thfFieldBase.ThfInputBaseComponent));

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 *
 * \@description
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *  <example name='thf-number'>
 *  <file name='sample-thf-number.component.html'>
 *  <form #f="ngForm">
 *    <thf-number
 *    t-label="Idade"
 *    t-help="Você precisa ser maior de idade"
 *    t-placeholder="Informe sua idade"
 *    name="idade"
 *    [(ngModel)]="idade"
 *    t-min="18"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-number>
 *  </form>
 *  </file>
 *  <file name='sample-thf-number.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-number',
 *     templateUrl: './sample-thf-number.component.html'
 *   })
 *   export class SampleThfNumberComponent {
 *
 *     idade = 40;
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfNumberComponent = (function (_super) {
    __extends$7(ThfNumberComponent, _super);
    function ThfNumberComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'number';
        /**
         * Intervalo
         */
        _this.step = '';
        return _this;
    }
    Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
        /**
         * @param {?} min
         * @return {?}
         */
        set: function (min) {
            if (!isNaN(parseInt(min, 10))) {
                this.min = parseInt(min, 10);
                // Atualiza Validador do campo
                this.validators['min'] = this.getValidatorMin();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
        /**
         * @param {?} max
         * @return {?}
         */
        set: function (max) {
            if (!isNaN(parseInt(max, 10))) {
                this.max = parseInt(max, 10);
                // Atualiza Validador do campo
                this.validators['max'] = this.getValidatorMax();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.ngOnInit = function () {
        this.validators['min'] = this.getValidatorMin();
        this.validators['max'] = this.getValidatorMax();
        this._onInit();
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMin = function () {
        return (this.min) ? forms.Validators.min(this.min) : null;
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMax = function () {
        return (this.max) ? forms.Validators.max(this.max) : null;
    };
    ThfNumberComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-number', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" [attr.name]=\"name\" [attr.min]=\"min\" [attr.max]=\"max\" [attr.step]=\"step\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfNumberComponent.ctorParameters = function () { return []; };
    ThfNumberComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMin': [{ type: core.Input, args: ['t-min',] },],
        'setMax': [{ type: core.Input, args: ['t-max',] },],
        'step': [{ type: core.Input, args: ['t-step',] },],
    };
    return ThfNumberComponent;
}(thfFieldBase.ThfInputBaseComponent));

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *  <example name='thf-radio-group'>
 *  <file name='sample-thf-radio-group.component.html'>
 *  <form #f="ngForm">
 *    <thf-radio-group
 *      name="genderName"
 *      t-required
 *      t-label="Gênero"
 *      [t-options]="genderOptions"
 *      (t-change)="changeGender($event)"
 *      [(ngModel)]="gender">
 *    </thf-radio-group>
 *
 *    <thf-radio-group
 *      name="interestName"
 *      t-required
 *      t-label="Área de interesse"
 *      t-help="Apenas um interesse poderá ser selecionado"
 *      [t-options]="interestOptions"
 *      [(ngModel)]="interest">
 *    </thf-radio-group>
 *
 *    <thf-button
 *      t-label='Enviar'
 *      [t-disabled]='!f.form.valid'>
 *    </thf-button>
 *  </form>
 *  </file>
 *  <file name='sample-thf-radio-group.component.ts'>
 * import { Component } from '\@angular/core';
 * import { ThfRadioGroupOption } from '\@totvs/thf-core/components/thf-field-base/thf-radio-group-base/thf-radio-group.interface';
 *
 * \@Component({
 *   selector: 'sample-thf-radio-group',
 *   templateUrl: './sample-thf-radio-group.component.html'
 * })
 * export class SampleThfRadioGroupComponent {
 *
 *   gender = '';
 *
 *   genderOptions: Array<ThfRadioGroupOption> = [
 *     { label: 'Masculino', value: 'male' },
 *     { label: 'Feminino', value: 'female' }
 *   ];
 *
 *   interest = 'arts';
 *
 *   interestOptions: Array<ThfRadioGroupOption> = [
 *     { label: 'Livros', value: 'books' },
 *     { label: 'Filmes', value: 'movies' },
 *     { label: 'Músicas', value: 'music' },
 *     { label: 'Artes', value: 'arts' },
 *     { label: 'Esportes', value: 'sports', disabled: true }
 *   ];
 *
 *   changeGender(value) {
 *     console.log('O gênero foi alterado: ', value);
 *   }
 *
 *   constructor() { }
 * }
 *
 *  </file>
 * </example>
 */
var ThfRadioGroupComponent = (function (_super) {
    __extends$8(ThfRadioGroupComponent, _super);
    function ThfRadioGroupComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfRadioGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-radio-group', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-input-radio-container\" #inp> <div *ngFor=\"let option of options\" class=\"thf-input-radio-outline\"> <input class=\"thf-input-radio\" type=\"radio\" (keyup)=\"keyup()\" [attr.name]=\"name\" [required]=\"required\" [disabled]=\"option.disabled === true || disabled\" [readonly]=\"readonly\" [value]=\"option.value\" [checked]=\"selectCheckedValue === option.value\"> <label [for]=\"name\" class=\"thf-input-radio-label\" (click)=\"eventClick(option.value, option.disabled === true || disabled)\">{{option.label}} </label> </div> </div> </thf-field-container> ", styles: [".thf-input-radio { -webkit-appearance: none; -moz-appearance: none; position: absolute; width: 0px; height: 0px; margin: 0; outline: none; border: 1px solid transparent; background-color: transparent; } .thf-input-radio-label { height: 16px; font-family: NunitoSans; font-size: 16px; line-height: 1.5; text-align: left; color: #1e2526; margin: 0 6px 6px 6px; cursor: pointer; } .thf-input-radio + .thf-input-radio-label:before { width: 18px; height: 18px; margin-top: -2px; margin-right: 8px; display: inline-block; vertical-align: middle; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf; border-radius: 50%; content: ' '; } .thf-input-radio:checked + .thf-input-radio-label:before { background-color: #0c9abe; border: 1px solid #0c9abe; box-shadow: none; color: white; font-family: 'TotvsIcon' !important; line-height: 18px; content: '\e937'; font-weight: bold; padding-left: 1px; width: 17px; } .thf-input-radio:focus + .thf-input-radio-label:before { border: solid 1px #0c9abe !important; } .thf-input-radio:disabled + .thf-input-radio-label:before { background-color: #edefef; border: solid 1px #b7bebf; } .thf-input-radio:checked:disabled + .thf-input-radio-label:before { color: #b7bebf; width: 17px; } .thf-input-radio-container { padding-top: 10px; display: block; } .thf-input-radio-outline { padding-bottom: 20px; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfRadioGroupComponent.ctorParameters = function () { return []; };
    ThfRadioGroupComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfRadioGroupComponent;
}(thfFieldBase.ThfRadioGroupBaseComponent));

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select" title="Totvs Select dinâmicos">
 *   <file name="sample-thf-select.component.html"> </file>
 *   <file name="sample-thf-select.component.ts"> </file>
 * </example>
 */
var ThfSelectComponent = (function (_super) {
    __extends$9(ThfSelectComponent, _super);
    /**
     * @param {?} element
     * @param {?} changeDetector
     * @param {?} renderer
     * @param {?=} ngControl
     */
    function ThfSelectComponent(element, changeDetector, renderer, ngControl) {
        var _this = _super.call(this, element, changeDetector, ngControl) || this;
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.isNative = false;
        renderer.listenGlobal('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        return _this;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = function ($event) {
        // Seleciona os itens com as teclas "up" e "down"
        if (!this.open && ($event.keyCode === 40 || $event.keyCode === 38)) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if ($event.keyCode === 13 || $event.keyCode === 32) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && $event.keyCode === 9) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngAfterViewInit = function () {
        this.isNative = utils.checkIsNativeIOS();
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = function () {
        this.selectElement.nativeElement.focus();
        this.selectIcon = this.open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.options && this.options.length) {
            this.selector('.thf-select-container').classList.toggle('thf-select-show');
        }
        this.open = !this.open;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = function (value) {
        var _this = this;
        if (value && this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                var /** @type {?} */ index = this.options.indexOf(optionFound);
                this.scrollTo(index);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = (optionFound.label);
            }
            else if (utils.validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.callModelChange(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = function (option) {
        this.selectedValue = option.value;
        this.selectElement.nativeElement.value = option.value;
        this.callModelChange(option.value);
        this.displayValue = option.label;
        this.onChange();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.callModelChange = function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollTo = function (index) {
        var /** @type {?} */ ul = this.element.nativeElement.querySelector('ul.thf-select-content');
        var /** @type {?} */ heightLiByIndex = index * 44; // 44 tamanho de cada li no UL;
        if (this.oldValue > heightLiByIndex) {
            this.oldValue = heightLiByIndex;
            ul.scrollTop -= 44;
            return;
        }
        this.oldValue = heightLiByIndex;
        ul.scrollTop += 44;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    ThfSelectComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-select', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <select #select [attr.name]=\"name\" [required]=\"required\" [disabled]=\"disabled\" class=\"thf-select\" (change)=\"onSelectChange($event.target.value)\"> <option *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> {{option?.label}} </option> </select> <div class=\"thf-select-container\"> <div #selectButton class=\"thf-select-button\" [ngClass]=\"{'thf-select-button-disabled' : disabled}\" (click)=\"toggleButton()\"> <span>{{ displayValue || placeholder }}</span> <span #icon class=\"thf-select-icon thf-icon {{selectIcon}}\"></span> </div> <ul class=\"thf-select-content\" [ngClass]=\"{'thf-invisible': isNative}\"> <li *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\" [class.thf-select-item-selected]=\"selectedValue == option.value\"> <a class=\"thf-select-item\"> {{option?.label}}</a> </li> </ul> </div> <div class=\"thf-field-error\"> <!-- Adicionado para corrigir o layout, existe outro item para acertar as mensagens de erro --> <div *ngIf=\"false\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> ",
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
        { type: core.Renderer, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    ThfSelectComponent.propDecorators = {
        'selectElement': [{ type: core.ViewChild, args: ['select', { read: core.ElementRef },] },],
        'iconElement': [{ type: core.ViewChild, args: ['icon', { read: core.ElementRef },] },],
        'selectButtonElement': [{ type: core.ViewChild, args: ['selectButton', { read: core.ElementRef },] },],
        'onKeydown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfSelectComponent;
}(thfFieldBase.ThfSelectBaseComponent));

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-switch-labs" title="Totvs Switch Labs">
 *   <file name="sample-thf-switch-labs.component.html"> </file>
 *   <file name="sample-thf-switch-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-switch" title="Totvs Switch e seus estados">
 *   <file name="sample-thf-switch.component.html"> </file>
 *   <file name="sample-thf-switch.component.ts"> </file>
 * </example>
 */
var ThfSwitchComponent = (function (_super) {
    __extends$10(ThfSwitchComponent, _super);
    function ThfSwitchComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getLabelPosition = function () {
        switch (this.labelPosition) {
            case thfFieldBase.ThfSwitchLabelPosition.Left: return 'left';
            case thfFieldBase.ThfSwitchLabelPosition.Right: return 'right';
            default: return 'right';
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getSwitchPosition = function () {
        switch (this.labelPosition) {
            case thfFieldBase.ThfSwitchLabelPosition.Left: return 'right';
            case thfFieldBase.ThfSwitchLabelPosition.Right: return 'left';
            default: return 'left';
        }
    };
    ThfSwitchComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-switch', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div [attr.name]=\"name\" class=\"thf-switch\"> <div class=\"thf-switch-container thf-clickable\" [class.thf-switch-container-right]=\"getSwitchPosition() === 'right'\" [class.thf-switch-container-on]=\"switchValue === true && !disabled\" [class.thf-switch-container-off]=\"switchValue === false && !disabled\" [class.thf-switch-container-disabled]=\"disabled\" (click)=\"eventClick()\"> <div class=\"thf-switch-button\" [class.thf-switch-button-on]=\"switchValue === true\" [class.thf-switch-button-off]=\"switchValue === false\" [class.thf-switch-button-disabled]=\"disabled\"> <span class=\"thf-icon thf-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span> </div> </div> <span class=\"thf-switch-label thf-clickable thf-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\"> {{ switchValue === true ? labelOn : labelOff }} </span> </div> </thf-field-container> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSwitchComponent.ctorParameters = function () { return []; };
    return ThfSwitchComponent;
}(thfFieldBase.ThfSwitchBaseComponent));

var __extends$12 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ThfUploadService = (function (_super) {
    __extends$12(ThfUploadService, _super);
    function ThfUploadService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfUploadService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfUploadService.ctorParameters = function () { return []; };
    return ThfUploadService;
}(thfFieldBase.ThfUploadBaseService));

var __extends$11 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *   <file name="sample-thf-upload-labs.component.html"> </file>
 *   <file name="sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 */
var ThfUploadComponent = (function (_super) {
    __extends$11(ThfUploadComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} uploadService
     * @param {?=} ngControl
     */
    function ThfUploadComponent(elementRef, uploadService, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.elementRef = elementRef;
        _this.uploadService = uploadService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.onClick = function () {
        var /** @type {?} */ input = this.elementRef.nativeElement.querySelector('input');
        input.click();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfUploadComponent.prototype.onFileChange = function (event) {
        var /** @type {?} */ files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel(this.currentFiles);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateModel = function (files) {
        if (files && files.length === 0) {
            return this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
        }
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadFiles = function (files) {
        var _this = this;
        var /** @type {?} */ filesFiltered = files.filter(function (file) {
            return file.status !== thfUploadStatus_enum.ThfUploadStatus.Uploaded;
        });
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, porcent) {
            // UPLOADING
            _this.uploadingHandler(file, porcent);
        }, function (file, eventResponse) {
            // SUCCESS
            _this.successHandler(file);
            _this.onSuccess.emit(eventResponse);
        }, function (file, eventError) {
            // Error
            _this.errorHandler(file);
            _this.onError.emit(eventError);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUpload = function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUploadHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    };
    /**
     * @param {?} file
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadingHandler = function (file, porcent) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, porcent, true);
        this.setUploadStatus(file, 'thf-upload-progress', porcent);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.successHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.errorHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    };
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.isStatusFile = function (status, file) {
        return file.status === thfUploadStatus_enum.ThfUploadStatus[status];
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.hasAnyFileUploading = function (files) {
        if (files && files.length) {
            return files.some(function (file) { return file.status === thfUploadStatus_enum.ThfUploadStatus.Uploading; });
        }
        return false;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.getThfIcon = function (file) {
        switch (file.status) {
            case thfUploadStatus_enum.ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case thfUploadStatus_enum.ThfUploadStatus.Error:
                return 'thf-icon-close';
            case thfUploadStatus_enum.ThfUploadStatus.None:
                return 'thf-icon-info';
            case thfUploadStatus_enum.ThfUploadStatus.Uploading:
            default:
                return '';
        }
    };
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.setUploadStatus = function (file, className, porcent) {
        var /** @type {?} */ uid = file.uid;
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (porcent > 5 && file.status !== thfUploadStatus_enum.ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    };
    /**
     * @param {?} uid
     * @param {?} porcent
     * @param {?} isShow
     * @return {?}
     */
    ThfUploadComponent.prototype.setProgressStatus = function (uid, porcent, isShow) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ divProgress = divStatus.querySelector('.thf-upload-progress-status');
        var /** @type {?} */ isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', "display: " + isDisplay + ";");
        divProgress.setAttribute('style', "width: " + porcent + "%;");
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFile = function (file) {
        var /** @type {?} */ index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    ThfUploadComponent.prototype.getFileSize = function (size) {
        var /** @type {?} */ kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadComponent.prototype.writeValue = function (model) {
        if (model) {
            this.currentFiles = this.parseFiles(model);
        }
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.addFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.parseFiles = function (files) {
        var /** @type {?} */ thfUploadFiles = this.currentFiles || [];
        var /** @type {?} */ filesLength = files.length;
        for (var /** @type {?} */ i = 0; i < filesLength; i++) {
            var /** @type {?} */ file = new thfUploadFile.ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                if (this.isMultiple) {
                    thfUploadFiles.push(file);
                }
                else {
                    thfUploadFiles.splice(0, 1, file);
                }
            }
        }
        return thfUploadFiles;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.checkRestrictions = function (file) {
        var /** @type {?} */ restrictions = this.fileRestrictions;
        if (restrictions) {
            var /** @type {?} */ allowedExtensions = restrictions.allowedExtensions;
            var /** @type {?} */ minFileSize = restrictions.minFileSize || 0;
            var /** @type {?} */ maxFileSize = restrictions.maxFileSize || 31457280; // 30MB
            var /** @type {?} */ isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            var /** @type {?} */ isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @param {?} extension
     * @param {?} allowedExtensions
     * @return {?}
     */
    ThfUploadComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
        return allowedExtensions.some(function (ext) {
            return ext.toLowerCase() === extension;
        });
    };
    ThfUploadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-upload', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-upload\"> <div (click)=\"onClick()\"> <input type=\"file\" [name]=\"name\" [id]=\"id\" (change)=\"onFileChange($event)\" [accept]=\"fileRestrictions?.allowedExtensions\" [multiple]=\"isMultiple\" class=\"thf-upload-input\" [disabled]=\"hasAnyFileUploading(currentFiles) || !url || disabled\"> <div for=\"file\" class=\"thf-upload-button\" [ngClass]=\"{'thf-upload-button-disabled': hasAnyFileUploading(currentFiles) || !url || disabled}\"> Selecionar arquivo </div> </div> <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\"> <div class=\"thf-upload-progress-status\"></div> <div class=\"thf-upload-filename-foreground\"> <div class=\"thf-upload-filename\"> <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div (click)=\"removeFile(file)\" *ngIf=\"isStatusFile('None', file)\"> <span class=\"thf-upload-action\"> Excluir </span> </div> <div (click)=\"stopUpload(file)\" *ngIf=\"isStatusFile('Uploading', file)\"> <span class=\"thf-upload-action\"> Cancelar </span> </div> <div (click)=\"uploadFiles([file])\" *ngIf=\"isStatusFile('Error', file)\"> <span class=\"thf-upload-action\"> Tentar Novamente </span> </div> </div> </div> <thf-button *ngIf=\"!autoUpload && currentFiles?.length > 0\" [t-disabled]=\"hasAnyFileUploading(currentFiles)\" t-primary=\"true\" t-label=\"Iniciar envio\" (t-click)=\"uploadFiles(currentFiles)\"> </thf-button> </div> </thf-field-container> ",
                    providers: [ThfUploadService]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfUploadComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: ThfUploadService, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    return ThfUploadComponent;
}(thfFieldBase.ThfUploadBaseComponent));

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 * thf-url é um input específico para receber URL, com o pattern já configurado.
 *
 * \@example
 *  <example name='thf-url'>
 *  <file name='sample-thf-url.component.html'>
 *  <form #f="ngForm">
 *    <thf-url
 *    t-label="Página"
 *    t-help="Informe o site da sua empresa"
 *    t-placeholder="Site"
 *    name="pagina"
 *    [(ngModel)]="pagina"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-url>
 *  </form>
 *  </file>
 *  <file name='sample-thf-url.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-url',
 *     templateUrl: './sample-thf-url.component.html'
 *   })
 *   export class SampleThfUrlComponent {
 *
 *     pagina = 'http://www.totvs.com.br';
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfUrlComponent = (function (_super) {
    __extends$13(ThfUrlComponent, _super);
    function ThfUrlComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indica a quantidade máxima de caracteres que o campo aceita
         */
        _this.maxlength = 254;
        _this.type = 'url';
        _this.pattern = '^((https|http):\\/\\/)?' +
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' +
            '((\\d{1,3}\\.){3}\\d{1,3}))' +
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' +
            '(\\?[;&a-z\\d%_.~+=-]*)?' +
            '(\\#[-a-z\\d_]*)?$';
        _this.mask = '';
        return _this;
    }
    Object.defineProperty(ThfUrlComponent.prototype, "setMaxlength", {
        /**
         * @param {?} maxlength
         * @return {?}
         */
        set: function (maxlength) {
            if (!isNaN(parseInt(maxlength, 10))) {
                this.maxlength = parseInt(maxlength, 10);
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfUrlComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-url', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfUrlComponent.ctorParameters = function () { return []; };
    ThfUrlComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMaxlength': [{ type: core.Input, args: ['t-maxlength',] },],
    };
    return ThfUrlComponent;
}(thfFieldBase.ThfInputBaseComponent));

/**
 * \@description
 *
 * Módulo dos componentes thf-datepicker, thf-email, thf-input, thf-number, thf-radio-group, thf-upload e thf-url
 */
var ThfFieldModule = (function () {
    function ThfFieldModule() {
    }
    ThfFieldModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        http.HttpClientModule,
                        ThfButtonModule
                    ],
                    exports: [
                        ThfCheckboxGroupComponent,
                        ThfDatepickerComponent,
                        ThfEmailComponent,
                        ThfInputComponent,
                        ThfNumberComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSwitchComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    declarations: [
                        ThfCalendarComponent,
                        ThfCheckboxGroupComponent,
                        ThfCleanComponent,
                        ThfDatepickerComponent,
                        ThfEmailComponent,
                        ThfFieldContainerComponent,
                        ThfInputComponent,
                        ThfNumberComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSwitchComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    providers: [
                        ThfCalendarService,
                        ThfCalendarLangService
                    ],
                    entryComponents: [
                        ThfCalendarComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfFieldModule.ctorParameters = function () { return []; };
    return ThfFieldModule;
}());

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 *
 * Para o correto funcionamento do THF Grid deve ser importado o módulo `BrowserAnimationsModule` no módulo principal da sua aplicação.
 *
 * > Módulo da sua aplicação:
 *
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * No arquivo `angular-cli.json` da sua aplicação deve ser importado o arquivo `all.css`, que pertence ao
 * pacote `\@progress/kendo-theme-default`.
 *
 * > Arquivo .angular-cli.json:
 *
 * ```
 * ...
 * "styles": [
 *   "../node_modules/\@progress/kendo-theme-default/dist/all.css"
 * ]
 * ...
 * ```
 *
 * \@example
 * <example name="thf-grid" title="Totvs Grid Labs">
 *  <file name='sample-thf-grid.component.html'> </file>
 *  <file name='sample-thf-grid.component.ts'> </file>
 * </example>
 */
var ThfGridComponent = (function (_super) {
    __extends$14(ThfGridComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     */
    function ThfGridComponent(viewRef, renderer) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        /**
         * Habilita a opção de ordenação dos dados nas colunas.
         */
        _this.sortable = false;
        /**
         * Habilita a opção de selecionar uma linha do grid
         */
        _this.selectable = false;
        /**
         * Habilita o botão para edição da coluna.
         */
        _this.editable = false;
        /**
         * Habilita a opção para agrupamento permitindo agrupar no máximo dois níveis.
         */
        _this.groupable = false;
        /**
         * Habilita a opção para exportação dos dados.
         */
        _this.exportButtons = false;
        /**
         * Recebe valores "true" ou "false" para habilitar ou desabilitar o botão "Carregar Mais Resultados"
         */
        _this.showMoreDisabled = 'false';
        /**
         * Habilita o botão "Remover" permitindo que o usuário possa remover uma linha do grid.
         */
        _this.showRemoveButton = false;
        /**
         * Habilita o botão para adicionar linhas
         */
        _this.addButton = false;
        /**
         * Habilita um botão "Carregar mais resultados" com evento de clique que chama um método do componente.
         */
        _this.showMore = new core.EventEmitter();
        /**
         * Evento de seleção de linha que chama um método do componente. Este atributo é utilizado em conjunto com o atributo "t-selectable".
         */
        _this.selectionChange = new core.EventEmitter();
        /**
         * Evento disparado ao salvar dados do modo de edição inline, contém o modelo que foi alterado.
         */
        _this.saveValue = new core.EventEmitter();
        _this.editedRowIndex = -1;
        _this.groups = [];
        _this.state = { skip: 0 };
        _this.sort = [];
        _this.addButtonCalled = false;
        _this.isCancelling = false;
        _this._parentRef = viewRef['_view']['component'];
        _this.allData = _this.allData.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer.listen('document', 'click', function (_a) {
            var target = _a.target;
            _this.validateSaveEventInDocument(target);
        });
        if (!this.data) {
            this.data = [];
        }
        if (!this.columns) {
            this.columns = [];
        }
        else {
            this.defineColumnType();
        }
        if (this.sortable) {
            this.sortableObject = {
                allowUnsort: this.sortable,
                mode: 'single'
            };
        }
        if (this.groupable) {
            var /** @type {?} */ arraySize = this.columns.length;
            for (var /** @type {?} */ count = 0; count < arraySize; count++) {
                var /** @type {?} */ columnTemp = this.columns[count];
                if (this.groups.length < 2 && columnTemp.groupHeader) {
                    this.groups.push({ field: columnTemp.column });
                }
            }
            this.sortableObject = null;
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
        if (!this.editable) {
            this.grid = null;
        }
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.defineColumnType = function () {
        var /** @type {?} */ lookupTableType = {
            number: function (column) {
                column.type = 'numeric';
                column.format = undefined;
            },
            currency: function (column) {
                column.type = 'numeric';
                column.format = '{0:c}';
            },
            date: function (column) {
                column.type = 'date';
                if (column.format && column.format.trim().length > 0) {
                    column.format = "{0:" + column.format + "}";
                }
                else {
                    column.format = '{0:dd/MM/yyyy}';
                }
            },
            string: function (column) {
                column.type = 'text';
                column.format = undefined;
            }
        };
        this.columns.forEach(function (column) {
            if (column.type && lookupTableType.hasOwnProperty(column.type.trim().toLowerCase())) {
                lookupTableType[column.type.trim().toLowerCase()](column);
            }
            else {
                column.type = 'text';
            }
        });
    };
    /**
     * @param {?} el
     * @param {?} className
     * @return {?}
     */
    ThfGridComponent.prototype.isChildOf = function (el, className) {
        while (el && el.parentElement) {
            if (this.hasClass(el.parentElement, className)) {
                return true;
            }
            el = el.parentElement;
        }
        return false;
    };
    /**
     * @param {?} el
     * @param {?} className
     * @return {?}
     */
    ThfGridComponent.prototype.hasClass = function (el, className) {
        return new RegExp(className).test(el.className);
    };
    /**
     * @param {?} target
     * @return {?}
     */
    ThfGridComponent.prototype.validateSaveEventInDocument = function (target) {
        if (!this.isChildOf(target, 'k-grid-content') && !this.isChildOf(target, 'k-grid-toolbar')) {
            this.saveClick();
        }
    };
    /**
     * @param {?} sort
     * @return {?}
     */
    ThfGridComponent.prototype.sortChange = function (sort) {
        this.sort = sort;
        this.loadData();
    };
    /**
     * @param {?} state
     * @return {?}
     */
    ThfGridComponent.prototype.dataStateChange = function (state) {
        // Esta condição foi realizada para não deixar adicionar mais de 2 grupos devido
        // a um problema no kendo grid. Ja tem um chamado aberto para este problema.
        if (state.group.length > 2) {
            state.group.splice(0, 1);
        }
        this.state = state;
        this.gridView = kendoDataQuery.process(this.data, this.state);
    };
    /**
     * @param {?} dataUpdated
     * @return {?}
     */
    ThfGridComponent.prototype.updateIndex = function (dataUpdated) {
        // A variavel "this.data" é a fonte de dados principal,
        // na linha abaixo eu estou atualizando a fonte de dados
        // principal com a fonte de dados ordenada para os indices
        // não se perderem na hora de salvar uma edição.
        for (var /** @type {?} */ i = 0, /** @type {?} */ dataLength = dataUpdated.length; i < dataLength; i++) {
            this.data[i] = dataUpdated[i];
        }
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.loadData = function () {
        // A variavel "this.data" é a fonte de dados principal,
        // na linha abaixo eu estou atualizando a fonte de dados
        // principal com a fonte de dados ordenada para os indices
        // não se perderem na hora de salvar uma edição.
        this.updateIndex(kendoDataQuery.orderBy(this.data, this.sort));
        this.gridView = {
            data: this.data,
            total: this.data.length
        };
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.createFormGroup = function () {
        var /** @type {?} */ group = {};
        for (var /** @type {?} */ count = 0; count < this.columns.length; count++) {
            var /** @type {?} */ columnTemp = this.columns[count];
            if (!columnTemp.checkbox) {
                if (columnTemp.required) {
                    group[columnTemp.column] = new forms.FormControl('', forms.Validators.required);
                }
                else {
                    group[columnTemp.column] = new forms.FormControl('');
                }
            }
        }
        this.formGroup = new forms.FormGroup(group);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.addHandler = function (_a) {
        var sender = _a.sender;
        if (this.editedRowIndex >= 0) {
            this.closeEditor(sender, this.editedRowIndex);
        }
        this.addButtonCalled = true;
        this.createFormGroup();
        if (this.addAction) {
            if (this.executeFunctionValidation(this.addAction, this.formGroup.value)) {
                this.formGroup.setValue(this.formGroup.value);
            }
            else {
                return;
            }
        }
        sender.addRow(this.formGroup);
    };
    /**
     * @param {?} func
     * @param {?} param
     * @return {?}
     */
    ThfGridComponent.prototype.executeFunctionValidation = function (func, param) {
        return (func && this._parentRef[func](param));
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.saveLine = function () {
        if (this.editable) {
            var /** @type {?} */ newRowValue = void 0;
            if (this.editedRowIndex >= 0) {
                newRowValue = Object.assign(this.data[this.editedRowIndex], this.formGroup.value);
                this.data[this.editedRowIndex] = newRowValue;
            }
            else if (this.addButtonCalled && this.formGroup) {
                newRowValue = this.formGroup.value;
                this.data.push(newRowValue);
                this.addButtonCalled = false;
            }
            if (this.isGroup()) {
                this.loadDataGroupable();
            }
            this.saveValue.emit({ data: newRowValue });
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.editClickHandler = function (_a) {
        var rowIndex = _a.rowIndex, dataItem = _a.dataItem;
        if (this.isValidForm()) {
            return;
        }
        if (this.executeFunctionValidation(this.saveAction, { data: this.data[this.editedRowIndex] })) {
            this.saveLine();
        }
        // Verifica se está utilizando agrupamento e busca o indice atualizado
        // do objeto que está sendo editado no momento.
        if (this.isGroup()) {
            rowIndex = this.getRowIndex(this.data, dataItem);
        }
        this.editHandler({
            sender: this.grid,
            rowIndex: rowIndex,
            dataItem: dataItem
        });
    };
    /**
     * @param {?} arr
     * @param {?} searchFor
     * @return {?}
     */
    ThfGridComponent.prototype.getRowIndex = function (arr, searchFor) {
        var /** @type {?} */ keys = Object.keys(searchFor);
        for (var /** @type {?} */ i = 0; i < arr.length; i++) {
            var /** @type {?} */ isEqual = true;
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (arr[i][key] !== searchFor[key]) {
                    isEqual = false;
                    break;
                }
            }
            if (isEqual) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.editHandler = function (_a) {
        var sender = _a.sender, rowIndex = _a.rowIndex, dataItem = _a.dataItem;
        if (!this.editable) {
            return;
        }
        this.closeEditor(sender);
        this.editedProducted = Object.assign({}, dataItem);
        this.formGroup = new forms.FormGroup({});
        for (var _i = 0, _b = Object.keys(dataItem); _i < _b.length; _i++) {
            var key = _b[_i];
            var /** @type {?} */ control = void 0;
            var /** @type {?} */ columnTemp = this.getColumn(key);
            if (columnTemp && columnTemp.editable) {
                if (columnTemp.required) {
                    control = new forms.FormControl(dataItem[key], forms.Validators.required);
                }
                else {
                    control = new forms.FormControl(dataItem[key]);
                }
                this.formGroup.addControl(key, control);
            }
        }
        this.editedRowIndex = rowIndex;
        sender.editRow(rowIndex, this.formGroup);
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.saveClick = function () {
        if (this.addButtonCalled && this.saveAction && this.formGroup) {
            if (!this.executeFunctionValidation(this.saveAction, { data: this.formGroup.value })) {
                return;
            }
        }
        else if (this.editedRowIndex >= 0 && this.saveAction) {
            if (!this.executeFunctionValidation(this.saveAction, { data: this.data[this.editedRowIndex] })) {
                this.closeEditor(this.grid, this.editedRowIndex);
                return;
            }
        }
        if (this.isValidForm()) {
            return;
        }
        this.saveLine();
        this.closeEditor(this.grid);
        if (this.isGroup()) {
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.isGroup = function () {
        return (this.groups && this.groups.length > 0);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfGridComponent.prototype.getColumn = function (key) {
        for (var /** @type {?} */ index = 0; index < this.columns.length; index++) {
            var /** @type {?} */ element = this.columns[index];
            if (element.column === key) {
                return element;
            }
        }
    };
    /**
     * @param {?} grid
     * @param {?=} rowIndex
     * @return {?}
     */
    ThfGridComponent.prototype.closeEditor = function (grid, rowIndex) {
        rowIndex = this.editedRowIndex;
        if (grid) {
            grid.closeRow(rowIndex);
        }
        this.editedRowIndex = undefined;
        this.formGroup = undefined;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.saveHandler = function (_a) {
        var sender = _a.sender, rowIndex = _a.rowIndex, formGroup = _a.formGroup, isNew = _a.isNew;
        var /** @type {?} */ item = formGroup.value;
        if (isNew && !this.editable) {
            this.data.push(item);
        }
        else {
            this.data[rowIndex] = Object.assign(this.data[rowIndex], item);
        }
        if (this.isGroup()) {
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
        sender.closeRow(rowIndex);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfGridComponent.prototype.cancelPropagation = function (event) {
        event.stopPropagation();
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.cancelHandler = function (_a) {
        var sender = _a.sender, rowIndex = _a.rowIndex;
        if (this.editedProducted != null) {
            this.data[rowIndex] = this.editedProducted;
            this.editedProducted = null;
        }
        if (this.isGroup()) {
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
        this.closeEditor(sender);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ThfGridComponent.prototype.removeHandler = function (_a) {
        var rowIndex = _a.rowIndex;
        if (this.removeAction) {
            if (!this.executeFunctionValidation(this.removeAction, { data: this.data[rowIndex] })) {
                return;
            }
        }
        this.data.splice(rowIndex, 1);
        if (this.groupable) {
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.isValidForm = function () {
        return (this.formGroup && !this.formGroup.valid);
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.allData = function () {
        var /** @type {?} */ result = {
            data: kendoDataQuery.process(this.data, {}).data
        };
        return result;
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @param {?} column
     * @return {?}
     */
    ThfGridComponent.prototype.changeValueCheckbox = function (event, index, data, column) {
        if (!this.editable) {
            event.target.checked = !event.target.checked;
            return;
        }
        data[column] = event.target.checked;
        this.data[index] = Object.assign(data);
        this.saveValue.emit({ data: this.data[index] });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ThfGridComponent.prototype.onSelectionChange = function (e) {
        this.selectionChange.emit({ data: this.gridView.data[e.index] });
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.onShowMore = function () {
        this.showMore.emit(null);
        if (this.groupable) {
            this.loadDataGroupable();
        }
        else {
            this.loadData();
        }
    };
    /**
     * @param {?} groups
     * @return {?}
     */
    ThfGridComponent.prototype.groupChange = function (groups) {
        this.groups = groups;
        this.loadDataGroupable();
    };
    /**
     * @return {?}
     */
    ThfGridComponent.prototype.loadDataGroupable = function () {
        this.gridView = kendoDataQuery.process(this.data, { group: this.groups });
        this.dataArrayOrdered = [];
        this.getObjects(this.gridView.data);
        this.updateIndex(this.dataArrayOrdered);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ThfGridComponent.prototype.getObjects = function (data) {
        var _this = this;
        data.forEach(function (value) {
            if (value.items instanceof Array) {
                _this.getObjects(value.items);
            }
            else {
                _this.dataArrayOrdered.push(value);
            }
        });
    };
    ThfGridComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-grid',
                    encapsulation: core.ViewEncapsulation.None, template: "<kendo-grid  [data]=\"gridView\"  [sortable]=\"sortableObject\" [sort]=\"sort\" [groupable]=\"groupable\" [group]=\"groups\" [selectable]=\"selectable\" (dataStateChange)=\"dataStateChange($event)\" (groupChange)=\"groupChange($event)\" (selectionChange)=\"onSelectionChange($event)\" (sortChange)=\"sortChange($event)\" (add)=\"addHandler($event)\" (cancel)=\"cancelHandler($event)\" (cellClick)=\"editClickHandler($event)\" (edit)=\"editHandler($event)\" (remove)=\"removeHandler($event)\" (save)=\"saveHandler($event)\" style=\"height: 70%\"> <kendo-grid-messages  i18n-noRecords=\"\" noRecords=\"Não há registros\" i18n-groupPanelEmpty=\"\" groupPanelEmpty=\"Arraste a coluna até o cabeçalho e solte para agrupar por esta coluna\"> </kendo-grid-messages> <ng-template kendoGridToolbarTemplate *ngIf=\"addButton || exportButtons\" > <button kendoGridAddCommand *ngIf=\"addButton\" class=\"k-primary\">Adicionar</button> <button type=\"button\" kendoGridExcelCommand *ngIf=\"exportButtons\" ><span class=\"k-icon k-i-file-excel\"></span></button> <button kendoGridPDFCommand *ngIf=\"exportButtons\"><span class='k-icon k-i-file-pdf'></span></button> </ng-template> <kendo-grid-column *ngFor=\"let col of columns; let i = index\" [field]=\"col.column\" [title]=\"col.label\" [width]=\"col.width\" [filter]=\"col.filter\" [format]=\"col.format\" [editor]=\"col.type\"> <ng-template kendoGridCellTemplate let-data *ngIf=\"col.checkbox\" let-rowIndex=\"rowIndex\"> <input type=\"checkbox\" id=\"chkbox_{{rowIndex}}\" name=\"chkbox_{{col.column}}_{{rowIndex}}\" [checked]=\"data[col.column]\" (change)=\"changeValueCheckbox($event, rowIndex, data, col.column)\" class=\"thf-grid thf-grid-checkbox\" /> <label for=\"chkbox_{{rowIndex}}\"></label> </ng-template> <ng-template kendoGridGroupHeaderTemplate let-value=\"value\" *ngIf=\"col.groupHeader\"> {{value}} </ng-template> </kendo-grid-column> <kendo-grid-command-column title=\"\" width=\"80\"> <ng-template kendoGridCellTemplate let-isNew=\"isNew\"> <button kendoGridRemoveCommand class=\"k-primary\" *ngIf=\"showRemoveButton\" >Remover</button> <button kendoGridCancelCommand class=\"k-primary\" (click)=\"cancelPropagation($event)\">{{ isNew ? 'Descartar' : 'Cancelar' }} </button> </ng-template> </kendo-grid-command-column> <kendo-grid-excel fileName=\"spreadsheet.xlsx\" [fetchData]=\"allData\"></kendo-grid-excel> <kendo-grid-pdf fileName=\"grid.pdf\" [allPages]=\"true\"> <kendo-grid-pdf-margin top=\"1cm\" left=\"1cm\" right=\"1cm\" bottom=\"1cm\"></kendo-grid-pdf-margin> </kendo-grid-pdf> </kendo-grid> <div class=\"thf-grid-show-more\" *ngIf=\"showMore.observers.length > 0\"> <div style=\"text-align: center;\"> <thf-button t-label=\"Carregar mais resultados\" (t-click)=\"onShowMore()\" t-id=\"btnShowMoreId\" [t-disabled]=\"showMoreDisabled\"></thf-button> </div> </div> ", styles: [".k-grid .k-state-selected { background-color: skyblue !important; color: #000000; } .k-grid .k-alt.k-state-selected { background-color: skyblue !important; color: #000000; } .thf-grid.thf-grid-checkbox { width: 20px; height: 20px; border-radius: 2px; box-shadow: inset 0 1px 8px 0 rgba(0, 0, 0, 0.1); border: solid 1px rgba(255, 255, 255, 0.6); } .thf-grid.thf-grid-checkbox:checked { width: 20px; height: 20px; border-radius: 2px; } input[type=checkbox] { visibility: hidden; position: absolute; } input[type=checkbox] + label:before { width: 20px; height: 20px; margin-top: -2px; margin-right: 8px; display: inline-block; vertical-align: middle; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf; content: ' '; } input[type=checkbox]:checked + label:before { background-color: #0c9abe; box-shadow: none; color: white; font-family: 'TotvsIcon' !important; line-height: 18px; content: '\\e937'; padding-left: 1px; } input[type=checkbox]:disabled + label:before { background-color: #edefef; border: solid 1px #b7bebf; } input[type=checkbox]:checked:disabled + label:before { color: #b7bebf; border: solid 1px #b6bdbf; } input[type=checkbox] + label:before { border-radius: 2px; } .thf-grid-show-more { width: 100%; margin-top: 10px; margin-bottom: 10px; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfGridComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.Renderer2, },
    ]; };
    ThfGridComponent.propDecorators = {
        'columns': [{ type: core.Input, args: ['t-columns',] },],
        'sortable': [{ type: core.Input, args: ['t-sortable',] },],
        'selectable': [{ type: core.Input, args: ['t-selectable',] },],
        'editable': [{ type: core.Input, args: ['t-editable',] },],
        'groupable': [{ type: core.Input, args: ['t-groupable',] },],
        'exportButtons': [{ type: core.Input, args: ['t-show-export-buttons',] },],
        'showMoreDisabled': [{ type: core.Input, args: ['t-show-more-disabled',] },],
        'showRemoveButton': [{ type: core.Input, args: ['t-show-remove-button',] },],
        'addButton': [{ type: core.Input, args: ['t-show-add-button',] },],
        'saveAction': [{ type: core.Input, args: ['t-save-action',] },],
        'removeAction': [{ type: core.Input, args: ['t-remove-action',] },],
        'addAction': [{ type: core.Input, args: ['t-add-action',] },],
        'showMore': [{ type: core.Output, args: ['t-show-more',] },],
        'selectionChange': [{ type: core.Output, args: ['t-selection-change',] },],
        'saveValue': [{ type: core.Output, args: ['t-save-value',] },],
        'grid': [{ type: core.ViewChild, args: [kendoAngularGrid.GridComponent,] },],
    };
    return ThfGridComponent;
}(thfGridBase_component.ThfGridBaseComponent));

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-modal' title="Totvs Modal Labs">
 *  <file name='sample-thf-modal.component.html'>
 *    <thf-button
 *      t-label="Chamar Modal"
 *      (t-click)="openPedidoModal()"
 *      t-primary="true">
 *    </thf-button>
 *
 *    <form #f="ngForm">
 *
 *      <thf-input
 *        t-label="Titulo"
 *        t-help="Informe o título da modal"
 *        t-placeholder="Título"
 *        name="title"
 *        [(ngModel)]="modalTitle"
 *        t-maxlength="30"
 *        t-clean>
 *      </thf-input>
 *
 *      <thf-input
 *        t-label="Texto"
 *        t-help="Informe o texto da modal"
 *        t-placeholder="Texto"
 *        name="text"
 *        [(ngModel)]="modalText"
 *        t-maxlength="100"
 *        t-focus
 *        t-clean>
 *      </thf-input>
 *
 *      <thf-radio-group
 *        name="modalSize"
 *        t-required
 *        t-label="Tamanho da modal"
 *        [t-options]="modalSizeOptions"
 *        [(ngModel)]="modalSize">
 *      </thf-radio-group>
 *
 *      <thf-checkbox-group
 *        name="configurationCheckbox"
 *        t-label="Configurações"
 *        t-help="Permite fazer ajustes na modal"
 *        [t-options]="configurationOptions"
 *        [(ngModel)]="configurationModel">
 *      </thf-checkbox-group>
 *
 *    </form>
 *
 *    <thf-modal
 *      [t-title]="modalTitle"
 *      [t-primary-action]="primaryAction"
 *      [t-secondary-action]="secondaryAction"
 *      [t-size]="modalSize"
 *      [t-click-out]="configurationModel.includes('click-out')"
 *      [t-hide-close]="configurationModel.includes('hide-close')">
 *      {{modalText}}
 *    </thf-modal>
 *  </file>
 *  <file name='sample-thf-modal.component.ts'>
 *    import { Component, ViewChild } from '\@angular/core';
 *
 *    import { ThfModalAction } from "\@totvs/thf-core/components/thf-modal-base/thf-modal-action.interface";
 *    import { ThfModalComponent } from '\@totvs/thf-web/components/thf-modal/thf-modal.component';
 *    import { ThfRadioGroupOption, ThfCheckboxGroupOption } from '\@totvs/thf-core/components/thf-field-base';
 *
 *    \@Component({
 *      selector: 'sample-thf-modal',
 *      templateUrl: './sample-thf-modal.component.html'
 *    })
 *    export class SampleThfModalComponent {
 *
 *      \@ViewChild(ThfModalComponent) thfModal: ThfModalComponent;
 *
 *      primaryAction: ThfModalAction = {
 *        action: () => {
 *          this.thfModal.close();
 *        },
 *        label: 'Confirmar'
 *      };
 *
 *      secondaryAction: ThfModalAction = {
 *        action: () => {
 *           this.thfModal.close();
 *        },
 *        label: 'Cancelar'
 *      };
 *
 *      modalSize = 'sm';
 *      modalText = 'Somos TOTVERS!!!';
 *      modalTitle = 'Totvs';
 *
 *      configurationOptions: Array<ThfCheckboxGroupOption> = [
 *        {value: 'click-out', label: 'Permitir o fechamento ao clicar fora da modal' },
 *        {value: 'hide-close', label: 'Esconder o ícone de fechar a modal' }
 *      ];
 *      configurationModel: Array<any> = [];
 *
 *      modalSizeOptions: Array<ThfRadioGroupOption> = [
 *        { label: 'Pequeno', value: 'sm' },
 *        { label: 'Médio', value: 'md' },
 *        { label: 'Grande', value: 'lg' },
 *        { label: 'Extra grande', value: 'xl' },
 *        { label: 'Automático', value: 'auto' },
 *      ];
 *
 *      openPedidoModal() {
 *        this.thfModal.open();
 *      }
 *
 *    }
 *  </file>
 * </example>
 */
var ThfModalComponent = (function (_super) {
    __extends$15(ThfModalComponent, _super);
    function ThfModalComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.focusableElements = 'input, select, textarea, button, a';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.open = function () {
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.close = function () {
        _super.prototype.close.call(this);
        document.removeEventListener('focus', this.focusFunction, true);
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.handleFocus = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        });
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.initFocus = function () {
        var _this = this;
        this.focusFunction = function (event) {
            var /** @type {?} */ modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target)) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (!this.hideClose) {
            var /** @type {?} */ firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1];
            firstFieldElement.focus();
        }
        else {
            this.firstElement.focus();
        }
    };
    /**
     * @return {?}
     */
    ThfModalComponent.prototype.setFirstElement = function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements);
    };
    ThfModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-modal', template: "<div class=\"thf-modal\" *ngIf=\"!isHidden\"> <div class=\"thf-modal-overlay\" (click)=\"onClickOut()\"></div> <div #modalContent class=\"thf-modal-content thf-modal-{{ modalSize }}\" tabindex=\"-1\"> <div class=\"thf-modal-header\"> <div class=\"thf-modal-title\"> <a class=\"thf-modal-header-close-button\" *ngIf=\"!hideClose\" (click)=\"close()\" tabindex=\"0\" > <span class=\"thf-icon thf-icon-close\"></span> </a> {{ title }} </div> </div> <div class=\"thf-modal-body\"> <ng-content></ng-content> </div> <div class=\"thf-modal-footer\"> <thf-button *ngIf=\"secondaryAction\" class=\"thf-modal-footer-button\" [t-label]=\"secondaryAction.label\" (t-click)=\"secondaryAction.action()\" t-primary=\"false\"> </thf-button> <thf-button *ngIf=\"primaryAction\" class=\"thf-modal-footer-button\" [t-label]=\"primaryAction.label\" (t-click)=\"primaryAction.action()\" t-primary=\"true\"> </thf-button> </div> </div> </div> ", styles: [".thf-modal { font-family: NunitoSans; position: relative; z-index: 50; } .thf-modal-overlay:before { content: ''; position: fixed; background-color: #052e3e; top: 0; bottom: 0; right: 0; left: 0; opacity: 0.7; } .thf-modal-sm { width: 50% !important; } .thf-modal-md { width: 70% !important; } .thf-modal-lg { width: 80% !important; } .thf-modal-xl { width: 90% !important; } .thf-modal-auto { width: auto !important; } @media screen and (max-width: 480px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 90%; } } @media screen and (min-width: 481px) and (max-width: 960px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 80%; } } @media screen and (min-width: 961px) { .thf-modal-content { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: #ffffff; box-shadow: 0px 4px 16px 0 rgba(7, 9, 9, 0.24); max-height: 90%; width: 70%; } } .thf-modal-header { border-radius: 3px; padding-top: 18px; padding-left: 24px; padding-right: 24px; padding-bottom: 12px; border: 0px; } .thf-modal-title { font-size: 34px; font-weight: 200; line-height: 27px; text-align: left; color: #4a5c60; } .thf-modal-header-close-button { float: right; border-radius: 1px; text-align: right; color: #0c9abe; cursor: pointer; text-decoration: none; } .thf-modal-body { margin: 12px 24px 12px 24px; font-size: 14px; line-height: 1.71; text-align: left; color: #425357; max-height: calc(100vh - 210px); overflow-y: auto; } .thf-modal-footer { font-family: NunitoSans; background-color: #ffffff; border-radius: 3px; border: 0px; text-align: right; padding-top: 12px; padding-left: 0px; padding-bottom: 24px; padding-right: 24px; } .thf-modal-footer-button { margin-left: 16px; margin-top: 5px; } ::-webkit-scrollbar { width: 4px; height: 50px; opacity: 0.5; border-radius: 2px; } ::-webkit-scrollbar-thumb { background-color: #0c9abe; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfModalComponent.ctorParameters = function () { return []; };
    ThfModalComponent.propDecorators = {
        'modalContent': [{ type: core.ViewChild, args: ['modalContent', { read: core.ElementRef },] },],
    };
    return ThfModalComponent;
}(thfModalBase.ThfModalBaseComponent));

/**
 * \@description
 * Módulo do componente thf-modal
 */
var ThfModalModule = (function () {
    function ThfModalModule() {
    }
    ThfModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfModalComponent
                    ],
                    exports: [ThfModalComponent],
                    providers: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfModalModule.ctorParameters = function () { return []; };
    return ThfModalModule;
}());

var hasClass = function (el, className) { return new RegExp(className).test(el.className); };
var isChildOf = function (el, className) {
    while (el && el.parentElement) {
        if (hasClass(el.parentElement, className)) {
            return true;
        }
        el = el.parentElement;
    }
    return false;
};
var eq = function (s1, s2) { return s1.toLowerCase() === s2.toLowerCase(); };
var closest = function (el, nodeName) {
    while (el && el.parentElement) {
        if (eq(el.nodeName, nodeName) || eq(el.parentElement.nodeName, nodeName)) {
            return el.parentElement;
        }
        el = el.parentElement;
    }
    return null;
};
var ThfRowClickDirective = (function () {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    function ThfRowClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.editRow = new core.EventEmitter();
        this.saveRow = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfRowClickDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer.listen(this.el.nativeElement, 'click', function (_a) {
            var target = _a.target;
            var /** @type {?} */ tr = closest(target, 'tr');
            if (tr && !hasClass(tr, 'k-grid-edit-row') && isChildOf(target, 'k-grid-content')) {
                _this.editRow.emit(tr.rowIndex);
            }
        });
        this.renderer.listen('document', 'click', function (_a) {
            var target = _a.target;
            if (!isChildOf(target, 'k-grid-content') && !isChildOf(target, 'k-grid-toolbar')) {
                _this.saveRow.emit();
            }
        });
    };
    ThfRowClickDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[row-click]' },] },
    ];
    /**
     * @nocollapse
     */
    ThfRowClickDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    ThfRowClickDirective.propDecorators = {
        'editRow': [{ type: core.Output },],
        'saveRow': [{ type: core.Output },],
    };
    return ThfRowClickDirective;
}());

/**
 * \@description
 * Módulo do componente thf-grid
 */
var ThfGridModule = (function () {
    function ThfGridModule() {
    }
    ThfGridModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        kendoAngularGrid.GridModule,
                        kendoAngularGrid.ExcelModule,
                        kendoAngularGrid.PDFModule,
                        ThfButtonModule,
                        ThfModalModule
                    ],
                    declarations: [
                        ThfGridComponent,
                        ThfRowClickDirective
                    ],
                    exports: [ThfGridComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfGridModule.ctorParameters = function () { return []; };
    return ThfGridModule;
}());

/**
 * \@description
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
 *
 * \@example
 * <example name='thf-info'>
 * <file name='sample-thf-info.component.html'>
 *    <thf-info t-label="Label" t-value="Valor"></thf-info>
 * </file>
 *
 * <file name="sample-thf-info.component.ts">
 *  import { Component, OnInit } from '\@angular/core';
 *  import { ThfModule } from '\@totvs/thf-web';
 *
 *  \@Component({
 *   selector: 'sample-thf-info',
 *   templateUrl: './sample-thf-info.component.html',
 *  })
 *  export class SampleThfInfoComponent {
 *  }
 * </file>
 * </example>
 */
var ThfInfoComponent = (function () {
    function ThfInfoComponent() {
    }
    ThfInfoComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-info', template: "<div><span class=\"thf-info label\">{{label}}</span></div> <div><span class=\"thf-info value\">{{value}}</span></div> ", styles: [".thf-info.label { font-family: 'NunitoSans-Bold'; font-size: 14px; text-align: left; color: #4a5c60; height: 12px; padding: 0px; } .thf-info.value { font-family: 'NunitoSans'; font-size: 16px; text-align: left; color: #1e2526; height: 13px; padding: 0px; margin-top: 11px; display: block; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInfoComponent.ctorParameters = function () { return []; };
    ThfInfoComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'value': [{ type: core.Input, args: ['t-value',] },],
    };
    return ThfInfoComponent;
}());

/**
 * \@description
 * Módulo do componente thf-info
 */
var ThfInfoModule = (function () {
    function ThfInfoModule() {
    }
    ThfInfoModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfInfoComponent
                    ],
                    exports: [ThfInfoComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInfoModule.ctorParameters = function () { return []; };
    return ThfInfoModule;
}());

/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela. O componente disponibiliza uma área de exibição específica
 * para exibição de mais informações através do link "Exibir Detalhes".
 * Este componente é utilizado em conjunto com os componentes thf-list-item, thf-list-item-content e
 * thf-list-item-detail.
 *
 * \@example
 * <example name='thf-list'>
 * <file name='sample-thf-list.component.html'>
 *   <thf-list>
 *      <thf-list-item *ngFor="let item of data2; let i = index"
 *            [t-title]="item.name">
 *      </thf-list-item>
 *    </thf-list>
 *    <hr/>
 *    <thf-list>
 *      <thf-list-item *ngFor="let item of data2; let i = index"
 *            [t-title]="item.name">
 *            <thf-list-item-content>
 *                {{item.name}}
 *            </thf-list-item-content>
 *      </thf-list-item>
 *    </thf-list>
 *    <hr/>
 *    <thf-list (t-show-more)="showMoreFunction()" [t-show-more-disabled]="showMoreDisabled">
 *        <thf-list-item *ngFor="let item of data; let i = index"
 *          [t-title]="item.title"
 *          [t-index]="i"
 *          [t-actions]="eventsObject">
 *          <thf-list-item-content style="display:flex">
 *            <thf-info t-label="Cadastro" [t-value]="item.register"></thf-info>
 *            <thf-info t-label="E-mail" [t-value]="item.mail" style="margin-left: 80px;"></thf-info>
 *            <thf-info t-label="Última Atualização" [t-value]="item.updated" style="margin-left: 80px;"></thf-info>
 *            <thf-info t-label="Telefone" [t-value]="item.phoneNumber" style="margin-left: 80px;"></thf-info>
 *          </thf-list-item-content>
 *          <thf-list-item-detail>
 *            <div>Outros detalhes a serem exibidos</div>
 *          </thf-list-item-detail>
 *        </thf-list-item>
 *    </thf-list>
 *    <hr/>
 *    <thf-list (t-show-more)="showMoreFunction()" [t-show-more-disabled]="showMoreDisabled">
 *        <thf-list-item *ngFor="let item of data; let i = index"
 *          [t-title]="item.title"
 *          [t-index]="i"
 *          [t-actions]="eventsObject2">
 *          <thf-list-item-content style="display:flex">
 *            <thf-info t-label="Cadastro" [t-value]="item.register"></thf-info>
 *            <thf-info t-label="E-mail" [t-value]="item.mail" style="margin-left: 80px;"></thf-info>
 *            <thf-info t-label="Última Atualização" [t-value]="item.updated" style="margin-left: 80px;"></thf-info>
 *            <thf-info t-label="Telefone" [t-value]="item.phoneNumber" style="margin-left: 80px;"></thf-info>
 *          </thf-list-item-content>
 *          <thf-list-item-detail>
 *            <div>Outros detalhes a serem exibidos</div>
 *          </thf-list-item-detail>
 *       </thf-list-item>
 *   </thf-list>
 * </file>
 *
 * <file name="sample-thf-list.component.ts">
 * import { Component, OnInit } from '\@angular/core';
 *
 * import { ThfModule } from '\@totvs/thf-web';
 *
 * \@Component({
 *   selector: 'sample-thf-list',
 *   templateUrl: './sample-thf-list.component.html',
 * })
 * export class SampleThfListComponent {
 *
 *   showMoreDisabled = false;
 *
 *   data: Array<any> = [
 *     {
 *       title: 'José dos Santos', name: 'José', register: '22/03/2017', mail: 'jose.santos\@email.com.br',
 *       updated: '22/10/2017 as 04:20', phoneNumber: '(47) 8888-8888'
 *     },
 *     {
 *       title: 'Maria da Silva', name: 'Maria', register: '21/03/2017', mail: 'maria.silva\@email.com.br',
 *       updated: '16/10/2017 as 04:20', phoneNumber: '(42) 9888-9999'
 *     }
 *   ];
 *
 *   data2: Array<any> = [
 *     { 'title': 'Marte', 'name': 'Marte' },
 *     { 'title': 'Plutão', 'name': 'Plutão' },
 *     { 'title': 'Terra', 'name': 'Terra' }];
 *
 *   eventsObject: Array<any> = [{ 'label': 'Editar', 'function': 'onClick1' },
 *   { 'label': 'Excluir', 'function': 'onClick2' }];
 *
 *   eventsObject2: Array<any> = [{ 'label': 'Editar', 'function': 'onClick1' },
 *   { 'label': 'Excluir', 'function': 'onClick2' },
 *   { 'label': 'Clonar', 'function': 'onClick3' }];
 *
 *   onClick1() {
 *     alert('onClick1');
 *   }
 *
 *   onClick2() {
 *     alert('onClick2');
 *   }
 *
 *   onClick3() {
 *     alert('onClick3');
 *   }
 *
 *   showMoreFunction() {
 *     this.data.push({
 *       title: 'Marcos Figueira', name: 'Marcos', register: '10/08/2017',
 *       mail: 'marcos.figueira\@email.com.br', updated: '01/08/2017 as 14:28',
 *       phoneNumber: '(12) 9778-9985'
 *     });
 *     this.showMoreDisabled = true;
 *   }
 * }
 *
 * </file>
 * </example>
 */
var ThfListComponent = (function () {
    function ThfListComponent() {
        /**
         * Recebe uma ação de clique do controller da página para o botão "Carregar mais resultados".
         */
        this.showMore = new core.EventEmitter;
        /**
         * Recebe valores "true" ou "false" para habilitar ou desabilitar o botão "Carregar Mais Resultados"
         */
        this.showMoreDisabled = 'false';
    }
    /**
     * @return {?}
     */
    ThfListComponent.prototype.onShowMore = function () {
        this.showMore.emit(null);
    };
    ThfListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-list', template: "<ng-content></ng-content> <div style=\"width: 100%\" *ngIf=\"showMore.observers.length > 0\"> <div style=\"text-align: center;\"> <thf-button t-label=\"Carregar mais resultados\" (t-click)=\"onShowMore()\" t-id=\"btnShowMoreId\" [t-disabled]=\"showMoreDisabled\"></thf-button> </div> </div>"
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListComponent.ctorParameters = function () { return []; };
    ThfListComponent.propDecorators = {
        'showMore': [{ type: core.Output, args: ['t-show-more',] },],
        'showMoreDisabled': [{ type: core.Input, args: ['t-show-more-disabled',] },],
    };
    return ThfListComponent;
}());

/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list.
 */
var ThfListItemComponent = (function () {
    /**
     * @param {?} myElement
     * @param {?} viewRef
     */
    function ThfListItemComponent(myElement, viewRef) {
        this.myElement = myElement;
        this.viewRef = viewRef;
        /**
         * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
         * se passar de duas ações é exibido um menu com todas as opções.
         */
        this.actions = [];
        this.showLink = true;
        this.showContent = true;
        this._parentRef = viewRef['_view']['component'];
        this.collapsed = true;
    }
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngAfterContentInit = function () {
        if (this.content && this.content.nativeElement.children.length === 0) {
            this.showContent = false;
        }
        if (this.detailsContent && this.detailsContent.nativeElement.children.length === 0) {
            this.showLink = false;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfListItemComponent.prototype.showDetails = function (index) {
        var /** @type {?} */ nativeElement = this.myElement.nativeElement;
        var /** @type {?} */ spanElement = nativeElement.querySelector("#spanIcon" + index + "Id");
        var /** @type {?} */ colElement = nativeElement.querySelector("#col" + index + "Id");
        if (spanElement) {
            var /** @type {?} */ icon = spanElement.className.includes('thf-icon-arrow-up') ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
            var /** @type {?} */ text = icon === 'thf-icon-arrow-up' ? 'Ocultar detalhes' : 'Exibir detalhes';
            nativeElement.querySelector('.thf-list-details').innerHTML = "<span id=\"spanIcon" + index + "Id\" class=\"" + icon + "\"></span> " + text;
        }
        if (colElement) {
            colElement.className = colElement.className === 'collapse' ? 'not-collapse' : 'collapse';
        }
    };
    Object.defineProperty(ThfListItemComponent.prototype, "parentRef", {
        /**
         * @return {?}
         */
        get: function () {
            return this._parentRef;
        },
        enumerable: true,
        configurable: true
    });
    ThfListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-list-item', template: "<div class=\"thf-list-border\"> <div class=\"thf-list-header-container\"> <div *ngIf=\"title\" class=\"thf-list-title-container\"> <span class=\"thf-list-title\">{{title}}</span> </div> <div id=\"divActionButtonsId\" class=\"thf-list-actions-button\" *ngIf=\"actions.length > 0 && actions.length <= 2\"> <thf-button *ngFor=\"let action of actions\" [t-label]=\"action.label\" (t-click)=\"parentRef[action.function](index)\" t-small=\"true\"></thf-button> </div> <div id=\"divActionDropdownId\" class=\"thf-list-more-button\" *ngIf=\"actions.length > 0 && actions.length > 2\"> <a href=\"javascript:void(0);\" id=\"dropdownMenu{{index}}\" data-toggle=\"dropdown\"><span class=\"thf-icon thf-icon-more\"></span></a> <ul class=\"dropdown-menu thf-list-more-base\" aria-labelledby=\"dropdownMenu\"> <li class=\"thf-list-li-margin\" *ngFor=\"let action of actions\"> <a href=\"javascript:void(0);\" class=\"thf-list-more-text\" (click)=\"parentRef[action.function](index)\">{{action.label}}</a> </li> </ul> </div>  </div> <div class=\"thf-list-item-container\" #content [hidden]=\"!showContent\"> <ng-content select=\"thf-list-item-content\"></ng-content> </div> <div select=\"details\" class=\"thf-list-details-link text-center\" [hidden]=\"!showLink\"> <a href=\"javascript:void(0);\" class=\"thf-list-details\" (click)=\"showDetails(index)\"><span id=\"spanIcon{{index}}Id\" class=\"thf-icon thf-icon-arrow-down\"></span> Exibir detalhes</a> <div id=\"col{{index}}Id\" class=\"collapse\" #detailsContent> <ng-content select=\"thf-list-item-detail\"></ng-content> </div> </div> </div>", styles: [".thf-list-title { display: block; height: 22px; font-family: NunitoSans; font-size: 24px; line-height: 1.25; text-align: left; color: #0c9abe; margin: 19px 0 27px 27px; } .thf-list-title-container { width: 60%; } .thf-list-border { border-radius: 3px; background-color: #ffffff; border: solid 1px #dbdedf; margin-bottom: 16px; } .thf-list-actions-button, .thf-list-more-button { padding-right: 38px; margin-top: 18px; width: 40%; text-align: end; } .thf-list-header-container { width: 100%; display: flex; } .thf-list-item-container { padding-left: 27px; margin-bottom: 20px; } thf-button { padding-left: 10px; } .thf-list-li-margin { padding-top: 8px; padding-bottom: 8px; } .thf-list-more-text { font-family: NunitoSans; font-size: 14px !important; line-height: 1.71; text-align: left; color: #1d9abc; padding-left: 16px; } .thf-list-more-text:hover { color: #c44944; } .dropdown-menu { left: 82% !important; top: initial !important; } .thf-list-more-base { border-radius: 3px; background-color: #ffffff; border: none; left: auto; box-shadow: 0px 1px 4px 0 rgba(0, 0, 0, 0.3) !important; } .thf-list-details { height: 12px; font-family: 'NunitoSans-Bold'; font-size: 14px !important; line-height: 1.71; text-align: left; color: #1d9abc; padding-top: 13px; padding-bottom: 15px; } .thf-list-details-link { border-top: solid 1px #dbdedf; margin-top: 49px; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListItemComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
    ]; };
    ThfListItemComponent.propDecorators = {
        'title': [{ type: core.Input, args: ['t-title',] },],
        'index': [{ type: core.Input, args: ['t-index',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
        'detailsContent': [{ type: core.ViewChild, args: ['detailsContent',] },],
        'content': [{ type: core.ViewChild, args: ['content',] },],
    };
    return ThfListItemComponent;
}());

/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list-item. Neste componente deve ser passado o
 * HTML que será exibido ao clicar no link "Exibir Detalhes".
 */
var ThfListItemDetailComponent = (function () {
    function ThfListItemDetailComponent() {
    }
    ThfListItemDetailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-list-item-detail', template: "<ng-content></ng-content>"
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListItemDetailComponent.ctorParameters = function () { return []; };
    return ThfListItemDetailComponent;
}());

/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list-item. Neste componente deve ser passado o
 * HTML que será exibido a cada item".
 */
var ThfListItemContentComponent = (function () {
    function ThfListItemContentComponent() {
    }
    ThfListItemContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-list-item-content', template: "<ng-content></ng-content>"
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListItemContentComponent.ctorParameters = function () { return []; };
    return ThfListItemContentComponent;
}());

/**
 * \@description
 * Módulo do componente thf-list
 */
var ThfListModule = (function () {
    function ThfListModule() {
    }
    ThfListModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfListComponent,
                        ThfListItemComponent,
                        ThfListItemDetailComponent,
                        ThfListItemContentComponent
                    ],
                    exports: [
                        ThfListComponent,
                        ThfListItemComponent,
                        ThfListItemDetailComponent,
                        ThfListItemContentComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListModule.ctorParameters = function () { return []; };
    return ThfListModule;
}());

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 *
 * Aparece completo em telas com largura que maior que 1200px, caso contrário o menu é escondido e chamado
 * por meio de um botão.
 *
 * Para o menu funcionar corretamente é necessário importar o ```RouterModule```  e ```Routes``` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 * <example name='thf-menu-labs' title='Totvs Menu Labs'>
 * <file name='sample-thf-menu-labs.component.html'> </file>
 * <file name='sample-thf-menu-labs.component.ts'> </file>
 * </example>
 */
var ThfMenuComponent = (function (_super) {
    __extends$16(ThfMenuComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} viewRef
     * @param {?} location
     * @param {?} router
     */
    function ThfMenuComponent(elementRef, viewRef, location, router$$1) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.viewRef = viewRef;
        _this.location = location;
        _this.router = router$$1;
        _this.parentRef = viewRef['_view']['component'];
        _this.router.events.subscribe(function (val) {
            if (val instanceof router.NavigationEnd) {
                _this.checkActiveMenuByUrl(_this.location.path());
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.validateMenus();
        setTimeout(function () {
            _this.checkActiveMenuByUrl(_this.location.path());
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.validateMenus = function () {
        this.menus.forEach(function (menu) {
            if (menu.label.trim() === '') {
                throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
            }
            if (menu.subItems) {
                menu.subItems.forEach(function (subMenu) {
                    if (subMenu.label.trim() === '') {
                        throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
                    }
                });
            }
        });
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItem = function (menu) {
        this.menuMobileOpened = false;
        if (this.isExternalLink(menu.link)) {
            this.openExternalLink(menu.link);
        }
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu.link && !this.isExternalLink(menu.link)) {
            this.menuItemActive = menu;
            this.menuItemOpened = undefined;
        }
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItemGrouped = function (menu) {
        this.menuItemOpened = (this.menuItemOpened === menu) ? undefined : menu;
    };
    /**
     * @param {?} subMenu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickSubMenuItem = function (subMenu) {
        this.menuMobileOpened = false;
        if (this.isExternalLink(subMenu.link)) {
            this.openExternalLink(subMenu.link);
        }
        if (subMenu.action) {
            this.executeMenuAction(subMenu);
        }
        if (subMenu.link && !this.isExternalLink(subMenu.link)) {
            this.menuItemActive = subMenu;
        }
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuMobile = function () {
        this.menuMobileOpened = !this.menuMobileOpened;
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.isMenuItemSelected = function (menu) {
        return this.menuItemActive === menu &&
            this.menuItemActive !== this.menuItemOpened ||
            (menu !== this.menuItemOpened && menu.subItems && menu.subItems.includes(this.menuItemActive));
        // Submenu ativo fechado
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.setActiveMenuByUrl(urlPath);
        }
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.checkUrl = function (menu) {
        var /** @type {?} */ urlMenu = '';
        // Retira todos os pontos no começo da URL.
        if (menu.link) {
            urlMenu = menu.link.replace(/^(\.)+/g, '');
        }
        // Verifica se foi utilizado uma rota que não comece com barra.
        if (!urlMenu.startsWith('/')) {
            urlMenu = '/'.concat(urlMenu);
        }
        return urlMenu;
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.setActiveMenuByUrl = function (urlPath) {
        var _this = this;
        this.menus.some(function (menu) {
            if (_this.checkUrl(menu) === urlPath) {
                setTimeout(function () {
                    _this.menuItemActive = menu;
                    _this.linkActive = _this.menuItemActive.link;
                    _this.menuItemOpened = undefined;
                });
                return true;
            }
            else if (menu.subItems) {
                var /** @type {?} */ subItemSelected_1 = menu.subItems.find(function (subItem) { return _this.checkUrl(subItem) === urlPath; });
                if (subItemSelected_1) {
                    setTimeout(function () {
                        _this.menuItemActive = subItemSelected_1;
                        _this.menuItemOpened = menu;
                        _this.linkActive = _this.menuItemActive.link;
                        return true;
                    });
                }
            }
        });
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.executeMenuAction = function (menu) {
        if (typeof (menu.action) === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuComponent.prototype.openExternalLink = function (url) {
        window.open(url, '_blank');
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuComponent.prototype.isExternalLink = function (url) {
        if (url) {
            return url.startsWith('http');
        }
    };
    ThfMenuComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-menu', template: "<div *ngIf=\"menuMobileOpened\" class=\"thf-menu-overlay\" (click)=\"toggleMenuMobile()\"></div> <div class=\"thf-menu-mobile thf-clickable\" (click)=\"toggleMenuMobile()\"> <span class=\"thf-icon thf-icon-menu\"></span> </div> <div class=\"thf-menu\" [ngClass]=\"{ 'thf-menu-animation' : menuMobileOpened }\"> <a href=\"/\" class=\"thf-menu-logo-container\"> <div class=\"thf-menu-logo\"></div> </a> <nav class=\"thf-menu-container\"> <!-- Inner e outer para esconder scroll --> <div class=\"thf-menu-outer\"> <div class=\"thf-menu-inner\"> <div *ngFor=\"let menu of menus\" class=\"thf-menu-item-wrapper\"> <!-- item de menu não selecionado sem agrupamento --> <a *ngIf=\"!menu.subItems && !this.isExternalLink(menu.link) && menu.link\" class=\"thf-menu-item-link\" (click)=\"clickMenuItem(menu)\" [routerLink]=\"menu.link\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === menu}\"> {{ menu.label }} </div> </a> <a *ngIf=\"!menu.subItems && (this.isExternalLink(menu.link) || !menu.link)\" class=\"thf-menu-item-link\" (click)=\"$event.preventDefault();clickMenuItem(menu);\" [href]=\"menu.link ? menu.link : 'javascript:;'\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === menu}\"> {{ menu.label }} </div> </a> <!-- item de menu com sub itens --> <div *ngIf=\"menu.subItems\"> <div (click)=\"clickMenuItemGrouped(menu)\" class=\"thf-menu-item thf-clickable\" [ngClass]=\"{ 'thf-menu-item-selected': isMenuItemSelected(menu), 'thf-menu-item-grouper-up': menu === menuItemOpened }\"> <!-- menu agrupado fechado --> <div *ngIf=\"menu !== menuItemOpened\" class=\"thf-menu-grouper-icon-down\"> <span class=\"thf-icon thf-icon-arrow-down\"></span> </div> <!-- menu agrupado aberto --> <div *ngIf=\"menu === menuItemOpened\" class=\"thf-menu-grouper-icon-up\"> <span class=\"thf-icon thf-icon-arrow-up\"></span> </div> {{ menu.label }} </div> <!-- sub itens menu agrupado --> <div [ngClass]=\"{ 'thf-menu-sub-items-visible': menu === menuItemOpened }\" class=\"thf-menu-sub-items\"> <div *ngFor=\"let subMenu of menu.subItems\"> <a *ngIf=\"!this.isExternalLink(subMenu.link) && subMenu.link\" class=\"thf-menu-item-link\" [routerLink]=\"subMenu.link\" (click)=\"clickSubMenuItem(subMenu)\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === subMenu}\"> {{ subMenu.label }} </div> </a> <a *ngIf=\"(this.isExternalLink(subMenu.link) || !subMenu.link)\" class=\"thf-menu-item-link\" [href]=\"subMenu.link ? subMenu.link : 'javascript:;'\" (click)=\"$event.preventDefault(); clickSubMenuItem(subMenu);\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === subMenu}\"> {{ subMenu.label }} </div> </a> </div> </div> </div> </div> </div> </div> </nav> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfMenuComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
        { type: common.Location, },
        { type: router.Router, },
    ]; };
    return ThfMenuComponent;
}(thfMenuBase.ThfMenuBaseComponent));

/**
 * \@description
 * Módulo do componente thf-menu
 */
var ThfMenuModule = (function () {
    function ThfMenuModule() {
    }
    ThfMenuModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule
                    ],
                    declarations: [ThfMenuComponent],
                    exports: [ThfMenuComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfMenuModule.ctorParameters = function () { return []; };
    return ThfMenuModule;
}());

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-default-labs' title='Sample Labs Totvs Page Default' >
 *  <file name='sample-thf-page-default-labs.component.html'>
 *  <thf-page-default [t-title]="title" [t-actions]="actions">
 *
 *    <thf-input t-label="Título do thf-page" name="title" [(ngModel)]="title" ngDefaultControl>
 *    </thf-input>
 *
 *    <form  #f="ngForm">
 *      <h4>Adicionar novos botões</h4>
 *      <br>
 *
 *      <thf-input t-label="Título do botão de ação" name="title" [(ngModel)]="button.label" t-required>
 *      </thf-input>
 *
 *      <thf-select name="iconButton" [(ngModel)]="button.icon" t-label="Selecione o tipo de ícone do botão"
 *        [t-options]="iconList" t-required>
 *      </thf-select>
 *
 *      <thf-button t-label='Adicionar botão' (t-click)="newButton()" [t-disabled]='!button.label || !button.icon'>
 *      </thf-button>
 *
 *    </form>
 *  </thf-page-default>
 *  </file>
 *  <file name='sample-thf-page-default-labs.component.ts'>
 *  import { Component } from '\@angular/core';
 *  import { FormGroup, FormControl, FormBuilder } from '\@angular/forms';
 *
 *  import { ThfNotificationService } from '\@totvs/thf-web/services/thf-notification/thf-notification.service';
 *  import { ThfToasterOrientation } from '\@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum';
 *
 *  \@Component({
 *    selector: 'sample-thf-page-default-labs',
 *    templateUrl: './sample-thf-page-default-labs.component.html'
 *  })
 *  export class SampleThfPageDefaultLabsComponent {
 *    title = 'THF Page Default Labs';
 *    button = {
 *      label: undefined,
 *      action: undefined,
 *      icon: undefined
 *    };
 *
 *    iconList = [
 *      { value: 'thf-icon-copy', label: 'Copiar' },
 *      { value: 'thf-icon-delete', label: 'Deletar' },
 *      { value: 'thf-icon-logo-totvs', label: 'Totvs' },
 *    ];
 *
 *    actions: Array<{}> = [
 *      { label: 'Compartilhar', action: this.share, icon: 'thf-icon-share' }
 *    ];
 *
 *    constructor(private thfNotification: ThfNotificationService) {}
 *
 *    newButton() {
 *      switch (this.button.icon) {
 *        case 'thf-icon-copy':
 *          this.button.action = this.copy;
 *          break;
 *        case 'thf-icon-delete':
 *          this.button.action = this.delete;
 *          break;
 *        case 'thf-icon-logo-totvs':
 *          this.button.action = this.totvs;
 *      }
 *
 *      this.actions.push(Object.assign({}, this.button));
 *    }
 *
 *    copy () {
 *      const message = 'Item copiado!';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    delete() {
 *      const message = 'Item #3 deletado';
 *      const type = 'warning';
 *      this.showMessage(message, type);
 *    }
 *
 *    totvs() {
 *      const message = 'Somos #Totvers';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    share() {
 *      const message = 'Compartilhado com sucesso!';
 *      const type = 'success';
 *      this.showMessage(message, type);
 *    }
 *
 *    showMessage(message, type) {
 *      this.thfNotification[type]({
 *        message: message,
 *        orientation: ThfToasterOrientation.Bottom,
 *      });
 *    }
 *
 *  }
 *  </file>
 * </example>
 */
var ThfPageDefaultComponent = (function (_super) {
    __extends$17(ThfPageDefaultComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageDefaultComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            utils.callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    ThfPageDefaultComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-default', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-default-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageDefaultComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.Renderer, },
        { type: router.Router, },
    ]; };
    return ThfPageDefaultComponent;
}(thfPageBase.ThfPageDefaultBaseComponent));

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 *
 */
var ThfPageContentComponent = (function (_super) {
    __extends$18(ThfPageContentComponent, _super);
    /**
     * @param {?} renderer
     */
    function ThfPageContentComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.height = '90%';
        _this.marginTop = '';
        _this.overflowY = 'none';
        renderer.listenGlobal('window', 'resize', function (event) {
            _this.setHeightContent(_this.pageHeaderElement, _this.bottomActions, _this.toolbarElement);
        });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.pageHeaderElement = (document.querySelector('div.thf-page-header'));
            _this.bottomActions = (document.querySelector('div.thf-page-bottom-container'));
            _this.toolbarElement = (document.querySelector('div.thf-toolbar'));
            _this.setHeightContent(_this.pageHeaderElement, _this.bottomActions, _this.toolbarElement);
        });
    };
    /**
     * @param {?} thfPageHeader
     * @param {?} bottomActions
     * @param {?} toolbarElement
     * @return {?}
     */
    ThfPageContentComponent.prototype.setHeightContent = function (thfPageHeader, bottomActions, toolbarElement) {
        var /** @type {?} */ toolbarElementHeight = toolbarElement ? 33 : 0;
        var /** @type {?} */ pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetHeight : 0;
        var /** @type {?} */ bottomActionsHeight = bottomActions ? bottomActions.offsetHeight : 0;
        var /** @type {?} */ bodyHeight = document.body.clientHeight;
        var /** @type {?} */ newHeight = bodyHeight - (pageHeaderHeight + bottomActionsHeight + toolbarElementHeight);
        this.overflowY = bottomActions ? 'auto' : 'none';
        this.height = newHeight + "px";
        this.marginTop = pageHeaderHeight + toolbarElementHeight + "px";
    };
    ThfPageContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-content', template: "<div class=\"thf-page-content\" [style.height]=\"height\" [style.margin-top]=\"marginTop\" [style.overflow-y]=\"overflowY\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageContentComponent.ctorParameters = function () { return [
        { type: core.Renderer, },
    ]; };
    return ThfPageContentComponent;
}(thfPageBase.ThfPageContentBaseComponent));

var __extends$19 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 *
 */
var ThfPageComponent = (function (_super) {
    __extends$19(ThfPageComponent, _super);
    function ThfPageComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page', template: "<div class=\"thf-page\"> <ng-content> </ng-content> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageComponent.ctorParameters = function () { return []; };
    return ThfPageComponent;
}(thfPageBase_component.ThfPageBaseComponent));

var __extends$20 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-edit-labs' title='Totvs Page Edit Labs'>
 *  <file name='sample-thf-page-edit-labs.component.html'> </file>
 *  <file name='sample-thf-page-edit-labs.component.ts'> </file>
 * </example>
 */
var ThfPageEditComponent = (function (_super) {
    __extends$20(ThfPageEditComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfPageEditComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.hasAction = thfPageBase.hasAction;
        _this.callAction = thfPageBase.callAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageEditComponent.prototype.hasAnyAction = function () {
        return thfPageBase.hasAction('cancel', this.parentContext) || thfPageBase.hasAction('saveNew', this.parentContext) || thfPageBase.hasAction('save', this.parentContext);
    };
    ThfPageEditComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-edit', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-bottom-container\"> <div class=\"thf-page-bottom-actions\"> <thf-button t-label=\"Cancelar\" *ngIf=\"hasAction('cancel', parentContext)\" (t-click)=\"callAction('cancel', parentContext)\"> </thf-button> <thf-button t-label=\"Salvar e Novo\" *ngIf=\"hasAction('saveNew', parentContext)\" [t-disabled]=\"disableSubmit\" (t-click)=\"callAction('saveNew', parentContext)\"> </thf-button> <thf-button t-label=\"Salvar\" t-primary=\"true\" *ngIf=\"hasAction('save', parentContext)\" [t-disabled]=\"disableSubmit\" (t-click)=\"callAction('save', parentContext)\"> </thf-button> </div> </div> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageEditComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    return ThfPageEditComponent;
}(thfPageBase.ThfPageEditBaseComponent));

var __extends$21 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-detail-labs' title='Totvs Page Detail Labs'>
 *  <file name='sample-thf-page-detail-labs.component.html'> </file>
 *  <file name='sample-thf-page-detail-labs.component.ts'> </file>
 * </example>
 */
var ThfPageDetailComponent = (function (_super) {
    __extends$21(ThfPageDetailComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfPageDetailComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.callActionFn = thfPageBase.callAction;
        _this.hasActionFn = thfPageBase.hasAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasAnyAction = function () {
        return this.hasActionFn('back', this.parentContext) ||
            this.hasActionFn('edit', this.parentContext) ||
            this.hasActionFn('remove', this.parentContext);
    };
    ThfPageDetailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-detail', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-bottom-container\"> <div class=\"thf-page-bottom-actions\"> <thf-button *ngIf=\"hasActionFn('back', parentContext)\" t-label=\"Voltar\" t-primary=\"true\" t-icon=\"thf-icon-arrow-left\" (t-click)=\"callActionFn('back', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('edit', parentContext)\" t-label=\"Editar\" t-icon=\"thf-icon-edit\" (t-click)=\"callActionFn('edit', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('remove', parentContext)\" t-label=\"Remover\" t-icon=\"thf-icon-delete\" (t-click)=\"callActionFn('remove', parentContext)\"> </thf-button> </div> </div> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageDetailComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    return ThfPageDetailComponent;
}(thfPageBase.ThfPageDetailBaseComponent));

var __extends$22 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 */
var ThfPageHeaderComponent = (function (_super) {
    __extends$22(ThfPageHeaderComponent, _super);
    function ThfPageHeaderComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-header', template: "<div class=\"thf-page-header\"> <!-- Título --> <div class=\"thf-page-header-title\" *ngIf=\"title\"> {{title}} </div> <!-- Operações --> <div class=\"thf-page-header-row\"> <ng-content></ng-content> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageHeaderComponent.ctorParameters = function () { return []; };
    return ThfPageHeaderComponent;
}(thfPageBase.ThfPageHeaderBaseComponent));

var __extends$23 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-list-labs' title='Totvs Page List Labs'>
 *  <file name='sample-thf-page-list-labs.component.html'> </file>
 *  <file name='sample-thf-page-list-labs.component.ts'> </file>
 * </example>
 */
var ThfPageListComponent = (function (_super) {
    __extends$23(ThfPageListComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageListComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.callFunction = utils.callFunction;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageListComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            utils.callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageListComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    ThfPageListComponent.prototype.callActionFilter = function (field) {
        this.callFunction(this.filter[field], this.parentRef);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfPageListComponent.prototype.onkeypress = function (key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    ThfPageListComponent.prototype.changeModel = function (newModel) {
        this.parentRef[this.filter.ngModel] = newModel;
    };
    ThfPageListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-list', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-header-row\"> <div class=\"thf-page-list-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> <!-- FILTER --> <div class=\"thf-page-list-filter-content\" *ngIf=\"filter\"> <div class=\"thf-page-list-filter-wrapper\"> <div class=\"thf-page-list-filter\"> <span class=\"thf-icon thf-icon-search thf-page-list-icon-search\" (click)=\"callActionFilter('action')\"> </span> <input type=\"text\" class=\"thf-input\" [ngModel]=\"parentRef[filter.ngModel]\" (ngModelChange)=\"changeModel($event)\" name=\"model\" [placeholder]=\"filter.placeholder\" (keypress)=\"onkeypress($event.keyCode)\"> </div> <div class=\"thf-page-list-filter-search\" *ngIf=\"filter.advancedAction\"> <a class=\"thf-page-list-filter-search-link\" (click)=\"callActionFilter('advancedAction')\"> Busca avançada </a> </div> </div> </div> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageListComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.Renderer, },
        { type: router.Router, },
    ]; };
    return ThfPageListComponent;
}(thfPageBase.ThfPageListBaseComponent));

/**
 * \@description
 * Módulo dos componentes thf-page-default, thf-page-edit, thf-page-list e thf-page-detail
 */
var ThfPageModule = (function () {
    function ThfPageModule() {
    }
    ThfPageModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        router.RouterModule,
                        ThfButtonModule,
                        ThfFieldModule,
                        ThfDropdownModule
                    ],
                    declarations: [
                        ThfPageContentComponent,
                        ThfPageComponent,
                        ThfPageDefaultComponent,
                        ThfPageDetailComponent,
                        ThfPageEditComponent,
                        ThfPageHeaderComponent,
                        ThfPageListComponent
                    ],
                    exports: [
                        ThfPageDetailComponent,
                        ThfPageDefaultComponent,
                        ThfPageEditComponent,
                        ThfPageListComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageModule.ctorParameters = function () { return []; };
    return ThfPageModule;
}());

/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes dados que podem ser datas e números com
 * formatos personalizados ou também textos.
 *
 * É possivel criar uma tabela com ordenação de dados, coluna de seleção de linhas, coluna com menu com ações e
 * também carregamento por demanda, com o botão "Carregar mais resultados".
 *
 * \@example
 *
 *  <example name="thf-table-labs" title="Totvs Table Labs">
 *    <file name="sample-thf-table-labs.component.ts"> </file>
 *    <file name="sample-thf-table-labs.component.html"> </file>
 *    <file name="sample-airfare.service.ts"> </file>
 *  </example>
 */
var ThfTableComponent = (function () {
    /**
     * @param {?} myElement
     * @param {?} renderer
     * @param {?} viewRef
     */
    function ThfTableComponent(myElement, renderer, viewRef) {
        this.viewRef = viewRef;
        /**
         * Lista de ações exibidas no menu que aparece ao clicar na columa de ações de cada linha.
         * Essa propriedade deve receber um array de objetos que implementam a interface ThfColumnAction, caso o
         * array esteja vazio a coluna será escondida.
         */
        this.actions = [];
        /**
         * Habilita ou desabilita o botão "Carregar mais resultados"
         */
        this.showMoreDisabled = false;
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso não seja definida uma ação, o botão
         * não é visível.
         */
        this.showMore = new core.EventEmitter;
        this.selectAll = false;
        this.parentRef = viewRef['_view']['component'];
        this.myElement = myElement;
    }
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.selectAllRows = function () {
        var _this = this;
        this.selectAll = !this.selectAll;
        // Seleciona os itens
        this.items.forEach(function (item) {
            item.$selected = _this.selectAll;
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.selectRow = function (row) {
        // Toggle item selecionado
        row.$selected = !row.$selected;
        // verifica se todos os itens estão selecionados
        this.selectAll = this.items.filter(function (item) { return item.$selected; }).length === this.items.length;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.toggleRowAction = function (row) {
        var /** @type {?} */ toggleShowAction = row.$showAction;
        // hide all row actions
        this.items.forEach(function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        // toggle dropdown
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.sortColumn = function (column) {
        if (this.sort) {
            var /** @type {?} */ element = this.myElement.nativeElement.querySelector('#sort-' + column.column);
            if (element.classList.contains('thf-table-header-icon-unselected') || element.classList.contains('thf-table-header-icon-ascending')) {
                element.className = 'thf-table-header-icon-descending';
                this.sortArray(column, true);
            }
            else {
                element.className = 'thf-table-header-icon-ascending';
                this.sortArray(column, false);
            }
            this.clearSortingElement(column);
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.clearSortingElement = function (column) {
        for (var /** @type {?} */ index = 0; index < this.columns.length; index++) {
            var /** @type {?} */ element = this.columns[index];
            if (element.column !== column.column) {
                this.myElement.nativeElement.querySelector('#sort-' + element.column).className = 'thf-table-header-icon-unselected';
            }
        }
    };
    /**
     * @param {?} input
     * @return {?}
     */
    ThfTableComponent.prototype.parseDate = function (input) {
        var /** @type {?} */ parts;
        if (input.indexOf('-') >= 0) {
            parts = input.split('-');
            return new Date(parts[0], parts[1] - 1, parts[2]);
        }
        else if (input.indexOf('/') >= 0) {
            parts = input.split('/');
            return new Date(parts[2], parts[1] - 1, parts[0]);
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} leftSide
     * @param {?} rightSide
     * @param {?} asc
     * @return {?}
     */
    ThfTableComponent.prototype.sortValidate = function (leftSide, rightSide, asc) {
        if (asc) {
            if (leftSide < rightSide) {
                return -1;
            }
            else if (leftSide > rightSide) {
                return 1;
            }
        }
        else {
            if (leftSide < rightSide) {
                return 1;
            }
            else if (leftSide > rightSide) {
                return -1;
            }
        }
        return 0;
    };
    /**
     * @param {?} column
     * @param {?} asc
     * @return {?}
     */
    ThfTableComponent.prototype.sortArray = function (column, asc) {
        var _this = this;
        this.items.sort(function (leftSide, rightSide) {
            if (column.type === 'date') {
                var /** @type {?} */ leftSideMil = _this.parseDate(leftSide[column.column]).getTime();
                var /** @type {?} */ rightSideMil = _this.parseDate(rightSide[column.column]).getTime();
                return _this.sortValidate(leftSideMil, rightSideMil, asc);
            }
            if (asc) {
                if (leftSide[column.column] < rightSide[column.column]) {
                    return -1;
                }
                else if (leftSide[column.column] > rightSide[column.column]) {
                    return 1;
                }
            }
            else {
                if (leftSide[column.column] < rightSide[column.column]) {
                    return 1;
                }
                else if (leftSide[column.column] > rightSide[column.column]) {
                    return -1;
                }
            }
            return 0;
        });
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.onShowMore = function () {
        this.showMore.emit(null);
    };
    ThfTableComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-table', template: "<table class=\"thf-table\"> <thead> <tr class=\"thf-table-header\"> <th *ngIf=\"checkbox\" class=\"thf-table-header-ellipsis thf-table-column-checkbox\"> <input type=\"checkbox\" class=\"thf-table-checkbox\" [ngClass]=\"{ 'thf-table-checkbox-checked': selectAll }\"> <label class=\"thf-table-checkbox-label\" (click)=\"selectAllRows()\"></label> </th> <th *ngFor=\"let column of columns\" class=\"thf-table-header-ellipsis\" [style.width]=\"column.width\" [ngClass]=\"{ 'thf-clickable': sort, 'thf-table-column-right': column.type == 'currency' || column.type == 'number' }\" (click)=\"sortColumn(column)\"> <span id=\"sort-{{column.column}}\" *ngIf=\"sort\"  class='thf-table-header-icon-unselected'></span> <span class=\"thf-table-header-ellipsis thf-table-header-block\">{{ column.label }}</span> </th> <th *ngIf=\"actions.length > 0\" class=\"thf-table-header-action\"></th> </tr> </thead> <tbody> <tr *ngFor=\"let row of items, let rowIndex = index;\" class=\"thf-table-row\"> <td *ngIf=\"checkbox\" class=\"thf-table-column thf-table-column-checkbox\" [ngClass]=\"{ 'thf-table-row-active': row.$selected && checkbox }\"> <input type=\"checkbox\" class=\"thf-table-checkbox\" [ngClass]=\"{ 'thf-table-checkbox-checked': row.$selected }\"> <label class=\"thf-table-checkbox-label\" (click)=\"selectRow(row)\"></label> </td> <td *ngFor=\"let column of columns, let columnIndex = index;\" [ngClass]=\"{ 'thf-table-row-active': row.$selected && checkbox , 'thf-table-column-right': column.type == 'currency' || column.type == 'number', 'thf-table-main-column': columnIndex == 0 , 'thf-table-column': columnIndex > 0 }\"> <div [ngSwitch]=\"column.type\"> <span *ngSwitchCase=\"'currency'\">{{ row[column.column] | currency:column.format:true:'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\">{{ row[column.column] | date: (column.format ? column.format : 'dd/MM/yyyy') }}</span> <span *ngSwitchDefault>{{ row[column.column] }}</span> </div> </td> <td *ngIf=\"actions.length > 0\" class=\"thf-table-column-actions\" [ngClass]=\"{'thf-table-row-active': row.$selected && checkbox }\"> <span class=\"thf-icon thf-icon-more thf-clickable \" (click)=\"toggleRowAction(row)\"></span> <div [style.display]=\"row.$showAction ? 'block': 'none'\" class=\"thf-table-actions\"> <div *ngFor=\"let action of actions\" class=\"thf-table-action\" (click)=\"parentRef[action.function](row); toggleRowAction(row)\"> {{ action.label }} </div> </div> </td> </tr> </tbody> <tfoot *ngIf=\"showMore.observers.length > 0\"> <tr> <td class=\"thf-table-footer\" [colSpan]=\"(columns.length) + (actions.length > 0 ? 1 : 0) + ( checkbox ? 1 : 0)\"> <thf-button t-label=\"Carregar mais resultados\" t-id=\"btnShowMoreId\" (t-click)=\"onShowMore()\" [t-disabled]=\"showMoreDisabled\"> </thf-button> </td> </tr> </tfoot> </table> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTableComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer, },
        { type: core.ViewContainerRef, },
    ]; };
    ThfTableComponent.propDecorators = {
        'items': [{ type: core.Input, args: ['t-items',] },],
        'columns': [{ type: core.Input, args: ['t-columns',] },],
        'checkbox': [{ type: core.Input, args: ['t-checkbox',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
        'sort': [{ type: core.Input, args: ['t-sort',] },],
        'showMoreDisabled': [{ type: core.Input, args: ['t-show-more-disabled',] },],
        'showMore': [{ type: core.Output, args: ['t-show-more',] },],
    };
    return ThfTableComponent;
}());

/**
 * \@description
 * Módulo do componente thf-table
 */
var ThfTableModule = (function () {
    function ThfTableModule() {
    }
    ThfTableModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        ThfButtonModule
                    ],
                    declarations: [
                        ThfTableComponent
                    ],
                    exports: [
                        ThfTableComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTableModule.ctorParameters = function () { return []; };
    return ThfTableModule;
}());

var ThfTabButtonComponent = (function () {
    /**
     * @param {?} el
     */
    function ThfTabButtonComponent(el) {
        this.el = el;
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.clickCallback = new core.EventEmitter;
        this.clickTab = new core.EventEmitter;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ThfTabButtonComponent.prototype.onClick = function (e) {
        if (!this.disabled) {
            this.clickTab.emit(this.id);
            this.clickCallback.emit(this.id);
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.controlDisabled = function () {
        if (this.disabled) {
            this.el.nativeElement.classList.add('thf-tab-disabled');
        }
        else {
            this.el.nativeElement.classList.remove('thf-tab-disabled');
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.controlActive = function () {
        if (this.active) {
            this.el.nativeElement.classList.add('thf-tab-active');
        }
        else {
            this.el.nativeElement.classList.remove('thf-tab-active');
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.ngAfterViewChecked = function () {
        if (this.hide) {
            this.el.nativeElement.style.display = 'none';
        }
        else {
            this.el.nativeElement.style.display = '';
            this.el.nativeElement.style.width = this.width + '%';
        }
        this.controlDisabled();
        this.controlActive();
    };
    ThfTabButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tab-button', template: "<div #tab [ngClass]=\"{'thf-tab-size1': !small, 'thf-tab-size2': small}\"> {{label}} </div> ", styles: [":host(thf-tab-button) { background-color: red; display: table-cell; background-color: transparent; box-shadow: inset 0 -1px 0 0 #edefef; text-align: center; vertical-align: middle; font-family: NunitoSans; font-weight: bold; color: #0c9abe; cursor: pointer; } :host(thf-tab-button) .thf-tab-size1 { display: inline-flex; align-items: center; text-align: center; height: 44px; font-size: 16px; } :host(thf-tab-button) .thf-tab-size2 { display: inline-flex; align-items: center; text-align: center; height: 32px; font-size: 14px; } :host(thf-tab-button) .thf-tab-hidden { display: none; } :host(thf-tab-button).thf-tab-disabled { color: rgba(0, 0, 0, 0.4); cursor: initial; } :host(thf-tab-button).thf-tab-active { box-shadow: inset 0 -3px 0 0 #29b6c5; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTabButtonComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    ThfTabButtonComponent.propDecorators = {
        'id': [{ type: core.Input },],
        'active': [{ type: core.Input },],
        'label': [{ type: core.Input },],
        'width': [{ type: core.Input },],
        'small': [{ type: core.Input },],
        'disabled': [{ type: core.Input },],
        'hide': [{ type: core.Input },],
        'clickCallback': [{ type: core.Output },],
        'clickTab': [{ type: core.Output },],
        'tab': [{ type: core.ViewChild, args: ['tab',] },],
        'onClick': [{ type: core.HostListener, args: ['click', ['$event'],] },],
    };
    return ThfTabButtonComponent;
}());

var __extends$25 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ThfTabComponent = (function (_super) {
    __extends$25(ThfTabComponent, _super);
    /**
     * @param {?} el
     */
    function ThfTabComponent(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabComponent.prototype.ngAfterViewChecked = function () {
        this.el.nativeElement.style.display = (this.active) ? '' : 'none';
    };
    ThfTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tab', template: "<div id=\"content_tab_{{id}}\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTabComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    return ThfTabComponent;
}(thfTabsBase.ThfTabBaseComponent));

var __extends$24 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *  <example name='thf-tabs'>
 *  <file name='sample-thf-tabs.component.html'>
 *
 *    <thf-tabs>
 *      <thf-tab t-label="Aba 1">
 *        <h1>Conteúdo da aba 1</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 2" (t-click)="metodo()">
 *        <h1>Conteúdo da aba 2</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 3" t-active>
 *        <h1>Conteúdo da aba 3</h1>
 *      </thf-tab>
 *    </thf-tabs>
 *
 *    <thf-tabs t-small>
 *      <thf-tab t-label="Aba 1" t-active>
 *        <h1>Conteúdo da aba 1</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 2" [t-hide]="hide">
 *        <h1>Conteúdo da aba 2</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 3" t-disabled>
 *        <h1>Conteúdo da aba 3</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 4">
 *        <h1>Conteúdo da aba 4</h1>
 *      </thf-tab>
 *    </thf-tabs>
 *
 *    <thf-button (click)="hide=!hide" [t-label]="'hide: '+hide"></thf-button>
 *
 *  </file>
 *  <file name='sample-thf-tabs.component.ts'>
 *   import { Component, AfterViewChecked } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-tabs',
 *     templateUrl: './sample-thf-tabs.component.html',
 *   })
 *   export class SampleThfTabsComponent {
 *
 *     hide: boolean = false;
 *
 *     metodo() {
 *       console.log('Disparado método ao clicar na aba');
 *     }
 *
 *   }
 *  </file>
 * </example>
 */
var ThfTabsComponent = (function (_super) {
    __extends$24(ThfTabsComponent, _super);
    /**
     * @param {?} resolver
     */
    function ThfTabsComponent(resolver) {
        var _this = _super.call(this) || this;
        _this.resolver = resolver;
        // Id do componente
        _this.listButtons = [];
        _this.created = false;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var /** @type {?} */ ComponentFactory = this.resolver.resolveComponentFactory(ThfTabButtonComponent);
        // Calcula a largura das tabs
        var /** @type {?} */ width = this.calculateWidth(this.countVisibledTabs());
        // Percorre tabs
        this.tabsChild.forEach(function (tab) {
            // Cria os botões
            var /** @type {?} */ compButton = _this.nav.createComponent(ComponentFactory);
            compButton.instance.label = tab.label;
            compButton.instance.id = tab.id;
            compButton.instance.active = tab.active;
            compButton.instance.hide = tab.hide;
            compButton.instance.disabled = tab.disabled;
            compButton.instance.width = width;
            compButton.instance.small = _this.small;
            compButton.instance.clickCallback = tab.click;
            // É necessário esta arrow function para não perder o contexto.
            // Caso contrário, a funcão não teria mais acesso ao "this" deste component
            compButton.instance.clickTab.subscribe(function (id) { return _this.selectedTab(id); });
            _this.listButtons.push(compButton.instance);
        });
        this.created = true;
    };
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        if (this.created) {
            // Váriaveis utilizadas para trocar aba ativa,
            // quando a aba ativa está desabilitada ou escondida
            var /** @type {?} */ changeTab_1 = false;
            var /** @type {?} */ lastEnabledTab_1 = null;
            var /** @type {?} */ lastEnabledButton_1 = null;
            // Calcula a largura das tabs
            var /** @type {?} */ width_1 = this.calculateWidth(this.countVisibledTabs());
            this.tabsChild.forEach(function (tab) {
                _this.listButtons.forEach(function (button) {
                    if (button.id === tab.id) {
                        // Atualiza a largura dos botões de acordo com os botões visíveis
                        button.width = width_1;
                        button.active = tab.active;
                        if (tab.disabled || tab.hide) {
                            // Verifica se uma desativada ou escondida está ativa
                            if (tab.active) {
                                tab.active = false;
                                button.active = false;
                                changeTab_1 = true;
                            }
                        }
                        else {
                            // Armazena a aba que não esteja escondida para trocar de aba automaticamente
                            // caso a aba ativa seja escondida ou desabilitada.
                            if (!changeTab_1) {
                                lastEnabledTab_1 = tab;
                                lastEnabledButton_1 = button;
                            }
                            else if (!lastEnabledTab_1) {
                                lastEnabledTab_1 = tab;
                                lastEnabledButton_1 = button;
                            }
                        }
                        // Atualiza as propriedades disabled e hide das abas
                        button.disabled = tab.disabled;
                        button.hide = tab.hide;
                    }
                });
            });
            // Habilita uma aba ativa
            if (changeTab_1 && lastEnabledTab_1) {
                lastEnabledTab_1.active = true;
                lastEnabledButton_1.active = true;
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ThfTabsComponent.prototype.selectedTab = function (id) {
        this.tabsChild.forEach(function (tab) {
            tab.active = (tab.id === id);
        });
        this.listButtons.forEach(function (button) {
            if (button.id === id) {
                button.active = true;
            }
            else {
                button.active = false;
            }
        });
    };
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.countVisibledTabs = function () {
        var /** @type {?} */ cont = 0;
        this.tabsChild.forEach(function (tab) {
            cont = (tab.hide) ? cont : cont + 1;
        });
        return cont;
    };
    /**
     * @param {?} visibledTabs
     * @return {?}
     */
    ThfTabsComponent.prototype.calculateWidth = function (visibledTabs) {
        var /** @type {?} */ width = parseFloat((100 / visibledTabs).toFixed(2));
        if (width * visibledTabs > 100) {
            width = parseFloat(String(width).substring(0, String(width).length - 1));
        }
        return width;
    };
    ThfTabsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-tabs', template: "<div class=\"thf-tabs-parent\"> <div #nav></div> </div> <div class=\"thf-tabs-container\"> <ng-content></ng-content> </div> ", styles: [".thf-tabs-parent { width: 100%; display: table; } .thf-tabs-container { padding-top: 5px; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTabsComponent.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
    ]; };
    ThfTabsComponent.propDecorators = {
        'tabsChild': [{ type: core.ContentChildren, args: [ThfTabComponent,] },],
        'nav': [{ type: core.ViewChild, args: ['nav', { read: core.ViewContainerRef },] },],
    };
    return ThfTabsComponent;
}(thfTabsBase.ThfTabsBaseComponent));

/**
 * \@description
 * Módulo do componente thf-tabs
 */
var ThfTabsModule = (function () {
    function ThfTabsModule() {
    }
    ThfTabsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfTabsComponent,
                        ThfTabComponent,
                        ThfTabButtonComponent
                    ],
                    entryComponents: [
                        ThfTabButtonComponent
                    ],
                    exports: [
                        ThfTabsComponent,
                        ThfTabComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTabsModule.ctorParameters = function () { return []; };
    return ThfTabsModule;
}());

var __extends$26 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 *
 * O título da página web assumirá o valor da propriedade `t-title`.
 *
 * \@example
 * <example name="thf-toolbar-labs" title="Totvs Toolbar Labs" >
 *  <file name='sample-thf-toolbar-labs.component.html'> </file>
 *  <file name="sample-thf-toolbar-labs.component.ts"> </file>
 * </example>
 */
var ThfToolbarComponent = (function (_super) {
    __extends$26(ThfToolbarComponent, _super);
    /**
     * @param {?} titleService
     * @param {?} viewRef
     */
    function ThfToolbarComponent(titleService, viewRef) {
        var _this = _super.call(this) || this;
        _this.titleService = titleService;
        _this.viewRef = viewRef;
        _this.notificationMenu = false;
        _this.userMenu = false;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.ngOnInit = function () {
        this.setTitle(this.title);
    };
    /**
     * @param {?} newTitle
     * @return {?}
     */
    ThfToolbarComponent.prototype.setTitle = function (newTitle) {
        this.titleService.setTitle(newTitle);
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showNotificationMenu = function () {
        this.notificationMenu = !this.notificationMenu;
        this.userMenu = false;
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showUserMenu = function () {
        this.userMenu = !this.userMenu;
        this.notificationMenu = false;
    };
    ThfToolbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-toolbar', template: "<div class=\"thf-toolbar\"> <div class=\"thf-toolbar-title\" (click)=\"userMenu = notificationMenu = false;\"> {{title}} </div> <div *ngIf=\"showNotification\" class=\"thf-toolbar-notification\" (click)=\"showNotificationMenu()\"> <span class=\"thf-icon thf-icon-notification\"></span> <div *ngIf=\"notificationNumber > 0\" class=\"thf-toolbar-notification-badge\">{{ notificationNumber }}</div> <div class=\"thf-toolbar-notification-content\" [style.display]=\"notificationMenu ? 'block' : 'none'\"> <div *ngFor=\"let notificationAction of notificationActions\" class=\"thf-notification-item\" (click)=\"parentRef[notificationAction.action](notificationAction)\"> {{ notificationAction.label }} </div> </div> </div> <div *ngIf=\"userSrc\" class=\"thf-toolbar-avatar thf-clickable\" (click)=\"showUserMenu()\"> <thf-avatar t-size=\"xs\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-toolbar-user-menu-content\" [style.display]=\"userMenu ? 'block' : 'none'\"> <thf-avatar t-size=\"md\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-notification-item\"><span class=\"thf-icon thf-icon-user\"></span>{{ userName }}</div> <hr> <div *ngFor=\"let userAction of userActions\" class=\"thf-notification-item\" (click)=\"parentRef[userAction.action](userAction)\"> {{ userAction.label }} </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToolbarComponent.ctorParameters = function () { return [
        { type: platformBrowser.Title, },
        { type: core.ViewContainerRef, },
    ]; };
    return ThfToolbarComponent;
}(thfToolbarBase.ThfToolbarBaseComponent));

/**
 * \@description
 * Módulo do componente thf-toolbar
 */
var ThfToolbarModule = (function () {
    function ThfToolbarModule() {
    }
    ThfToolbarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfAvatarModule
                    ],
                    declarations: [
                        ThfToolbarComponent
                    ],
                    exports: [ThfToolbarComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToolbarModule.ctorParameters = function () { return []; };
    return ThfToolbarModule;
}());

var __extends$27 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-widget-labs' title='Totvs Widget Labs'>
 *  <file name='sample-thf-widget-labs.component.html'> </file>
 *  <file name='sample-thf-widget-labs.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget-chart' title='Mostrando gráficos'>
 *  <file name='sample-thf-widget-chart.component.html'> </file>
 *  <file name='sample-thf-widget-chart.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget' title='Trocando a visualização'>
 *  <file name='sample-thf-widget.component.html'> </file>
 *  <file name='sample-thf-widget.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget-background' title='Utilizando imagem de background'>
 *  <file name='sample-thf-widget-background.component.html'> </file>
 *  <file name='sample-thf-widget-background.component.ts'> </file>
 * </example>
 */
var ThfWidgetComponent = (function (_super) {
    __extends$27(ThfWidgetComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfWidgetComponent(viewRef) {
        var _this = _super.call(this) || this;
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        _this.setting = new core.EventEmitter;
        // Obtém a referência ao componente pai
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.ngOnInit = function () {
        if (this.background) {
            // Seta uma imagem de background e um tamanho mínimo para que o Widget apareça
            this.elBackground.nativeElement.style.backgroundImage = "url('" + this.background + "')";
            this.elBackground.nativeElement.style.minHeight = '20px';
        }
        if (this.height) {
            var /** @type {?} */ heightBody = this.height - 32; // 32 de padding
            // Calcula tamanho restante para o Body, subtraindo title e footer se existirem
            if (this.title) {
                heightBody = heightBody - 40;
            }
            if (this.primaryLabel) {
                heightBody = heightBody - 40;
            }
            // Seta o corpo do widget com o tamanho calculado
            this.elBody.nativeElement.style.height = heightBody + "px";
        }
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.runPrimaryAction = function () {
        this.primaryAction.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.runSecundaryAction = function () {
        this.secundaryAction.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.settingOutput = function () {
        this.setting.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.openHelp = function () {
        window.open(this.help, '_blank');
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfWidgetComponent.prototype.isTypeof = function (object, type) {
        return typeof object === type;
    };
    ThfWidgetComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-widget', template: "<div class=\"thf-widget thf-widget-{{ size }}\" #elemBackground> <div *ngIf=\"!isTypeof(title, 'undefined')\" class=\"thf-widget-header-title\"> {{title}} <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\"> <span id=\"settingAction\" *ngIf=\"setting.observers[0]\" class=\"thf-clickable thf-icon thf-icon-settings\" (click)=\"settingOutput()\"></span> <span id=\"helpLink\" *ngIf=\"help\" class=\"thf-clickable glyphicon glyphicon-question-sign\" (click)=\"openHelp()\"></span> </div> </div> <div class=\"thf-widget-body\" #elemBody> <ng-content></ng-content> </div> <div *ngIf=\"!isTypeof(primaryLabel, 'undefined')\" class=\"thf-widget-footer\"> <div class=\"thf-widget-xl\" *ngIf=\"isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction()\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction()\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='secundaryAct' (click)=\"runSecundaryAction()\">{{ secundaryLabel }}</a> </div> </div> </div>"
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfWidgetComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    ThfWidgetComponent.propDecorators = {
        'setting': [{ type: core.Output, args: ['t-setting',] },],
        'elBackground': [{ type: core.ViewChild, args: ['elemBackground', { read: core.ElementRef },] },],
        'elBody': [{ type: core.ViewChild, args: ['elemBody', { read: core.ElementRef },] },],
    };
    return ThfWidgetComponent;
}(thfWidgetBase.ThfWidgetBaseComponent));

/**
 * \@description
 * Módulo do componente thf-widget
 */
var ThfWidgetModule = (function () {
    function ThfWidgetModule() {
    }
    ThfWidgetModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        ThfWidgetComponent
                    ],
                    declarations: [ThfWidgetComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfWidgetModule.ctorParameters = function () { return []; };
    return ThfWidgetModule;
}());

var ThfComponentsModule = (function () {
    function ThfComponentsModule() {
    }
    ThfComponentsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfAvatarModule,
                        ThfButtonModule,
                        ThfChartModule,
                        ThfDropdownModule,
                        ThfFieldModule,
                        ThfGridModule,
                        ThfInfoModule,
                        ThfListModule,
                        ThfMenuModule,
                        ThfModalModule,
                        ThfPageModule,
                        ThfTableModule,
                        ThfTabsModule,
                        ThfToolbarModule,
                        ThfWidgetModule
                    ],
                    exports: [
                        ThfAvatarModule,
                        ThfButtonModule,
                        ThfChartModule,
                        ThfDropdownModule,
                        ThfFieldModule,
                        ThfGridModule,
                        ThfInfoModule,
                        ThfListModule,
                        ThfMenuModule,
                        ThfModalModule,
                        ThfPageModule,
                        ThfTabsModule,
                        ThfTableModule,
                        ThfToolbarModule,
                        ThfWidgetModule
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfComponentsModule.ctorParameters = function () { return []; };
    return ThfComponentsModule;
}());

var ThfDirectivesModule = (function () {
    function ThfDirectivesModule() {
    }
    ThfDirectivesModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDirectivesModule.ctorParameters = function () { return []; };
    return ThfDirectivesModule;
}());

var ThfGuardsModule = (function () {
    function ThfGuardsModule() {
    }
    ThfGuardsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfGuardsModule.ctorParameters = function () { return []; };
    return ThfGuardsModule;
}());

var ThfComponentInjectorService = (function () {
    /**
     * @param {?} componentResolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = function (component) {
        var /** @type {?} */ componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        var /** @type {?} */ domElem = (((componentRef.hostView)).rootNodes[0]);
        document.body.appendChild(domElem);
        return componentRef;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return ThfComponentInjectorService;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        switch (dialogType) {
            case thfDialog_enum.ThfDialogType.Confirm: {
                this.configDialog('Confirmar', ((dialogOptions)).confirm, 'Cancelar', ((dialogOptions)).cancel);
                break;
            }
            case thfDialog_enum.ThfDialogType.Alert: {
                this.configDialog('Ok', ((dialogOptions)).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    ThfDialogComponent.decorators = [
        { type: core.Component, args: [{ template: "<thf-modal [t-title]=\"title\" [t-primary-action]=\"primaryAction\" [t-secondary-action]=\"secondaryAction\"> {{ message }} </thf-modal> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDialogComponent.ctorParameters = function () { return []; };
    ThfDialogComponent.propDecorators = {
        'thfModal': [{ type: core.ViewChild, args: [ThfModalComponent,] },],
    };
    return ThfDialogComponent;
}());

var __extends$28 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name='thf-dialog-labs' title='Totvs Dialog Labs'>
 *  <file name='sample-thf-dialog-labs.component.html'>
 *    <thf-button
 *      name="openDialog"
 *      t-icon="thf-icon-logo-totvs"
 *      t-label="Abrir Diálogo"
 *      t-primary="true"
 *      [t-disabled]="f.invalid"
 *      (t-click)="openDialog()">
 *    </thf-button>
 *
 *    <br><br>
 *    <span *ngIf="choice">
 *      <b>Opção selecionada: </b>{{ choice }}
 *    </span>
 *
 *    <hr>
 *
 *    <form #f="ngForm">
 *      <thf-radio-group
 *        name="dialogOptions"
 *        [(ngModel)]="dialogType"
 *        t-label="Opções de diálogo"
 *        t-required
 *        [t-options]="dialogOptions">
 *      </thf-radio-group>
 *
 *      <thf-input
 *        name="title"
 *        [(ngModel)]="title"
 *        t-clean
 *        t-label="Título"
 *        t-placeholder="Insira o título da caixa diálogo"
 *        t-required>
 *      </thf-input>
 *
 *      <thf-input
 *        name="mensage"
 *        [(ngModel)]="mensage"
 *        t-clean
 *        t-label="Mensagem"
 *        t-placeholder="Insira a mensagem da caixa diálogo"
 *        t-required>
 *      </thf-input>
 *    </form>
 *  </file>
 *  <file name='sample-thf-dialog-labs.component.ts'>
 *    import { Component } from '\@angular/core';
 *
 *    import { ThfModule } from '\@totvs/thf-web';
 *    import { ThfDialogService } from '\@totvs/thf-web/services/thf-dialog/thf-dialog.service';
 *
 *    \@Component({
 *      selector: 'sample-thf-dialog-labs',
 *      providers: [ThfDialogService],
 *      templateUrl: './sample-thf-dialog-labs.component.html',
 *    })
 *
 *    export class SampleThfDialogLabsComponent {
 *      title = 'Confirmação';
 *      mensage = 'Você tem certeza que deseja efetuar o pedido número #42?';
 *      dialogType = 'confirm';
 *
 *      choice: string;
 *
 *      dialogOptions: Array<any> = [
 *        { label: 'Alert Dialog', value: 'alert' },
 *        { label: 'Confirm Dialog', value: 'confirm' }
 *      ];
 *
 *      constructor(private thfAlert: ThfDialogService) { }
 *
 *      openDialog() {
 *        this.choice = '';
 *        if (this.dialogType === 'alert') {
 *          this.alertDialog();
 *        } else if (this.dialogType === 'confirm') {
 *          this.confirmDialog();
 *        }
 *      }
 *
 *      alertDialog() {
 *        this.thfAlert.alert({
 *          title: this.title,
 *          message: this.mensage,
 *          ok: () => this.yourChoice('OK')
 *        });
 *      }
 *
 *      confirmDialog() {
 *        this.thfAlert.confirm({
 *          title: this.title,
 *          message: this.mensage,
 *          confirm: () => this.yourChoice('CONFIRMAR'),
 *          cancel: () => this.yourChoice('CANCELAR')
 *        });
 *      }
 *
 *      yourChoice(choice) {
 *        this.choice = choice;
 *      }
 *    }
 *  </file>
 * </example>
 */
var ThfDialogService = (function (_super) {
    __extends$28(ThfDialogService, _super);
    /**
     * @param {?} thfComponentInjector
     */
    function ThfDialogService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    ThfDialogService.prototype.openDialog = function (dialogType, dialogOptions) {
        var /** @type {?} */ componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    ThfDialogService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfDialogService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService, },
    ]; };
    return ThfDialogService;
}(thfDialogBase_service.ThfDialogBaseService));

var __extends$30 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 *
 */
var ThfToasterComponent = (function (_super) {
    __extends$30(ThfToasterComponent, _super);
    /**
     * @param {?=} elementeRef
     */
    function ThfToasterComponent(elementeRef) {
        var _this = _super.call(this) || this;
        _this.elementeRef = elementeRef;
        _this.margin = 20;
        _this.showToaster = true;
        return _this;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    ThfToasterComponent.prototype.changePosition = function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === thfToasterOrientation_enum.ThfToasterOrientation.Bottom) {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.close = function () {
        this.showToaster = false;
    };
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    ThfToasterComponent.prototype.configToaster = function (thfToaster) {
        this.type = thfToaster.type;
        this.message = thfToaster.message;
        this.orientation = thfToaster.orientation;
        this.position = thfToaster.position;
        this.action = thfToaster.action;
        this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
        this.componentRef = thfToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === thfToasterOrientation_enum.ThfToasterOrientation.Bottom) {
            this.toasterPosition = 'thf-toaster-bottom';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case thfToasterType_enum.ThfToasterType.Error: {
                this.toasterType = 'thf-toaster-error';
                this.icon = 'thf-icon-close';
                break;
            }
            case thfToasterType_enum.ThfToasterType.Information: {
                this.toasterType = 'thf-toaster-info';
                this.icon = 'thf-icon-info';
                break;
            }
            case thfToasterType_enum.ThfToasterType.Success: {
                this.toasterType = 'thf-toaster-success';
                this.icon = 'thf-icon-ok';
                break;
            }
            case thfToasterType_enum.ThfToasterType.Warning: {
                this.toasterType = 'thf-toaster-warning';
                this.icon = 'thf-icon-warning';
                break;
            }
        }
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.thfToasterAction = function () {
        this.action(this);
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getShowToaster = function () {
        return this.showToaster;
    };
    ThfToasterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-toaster', template: "<div #toaster *ngIf=\"getShowToaster()\" class=\"thf-toaster {{ toasterType }} {{ toasterPosition }}\"> <div class=\"thf-toaster-message\"> <span class=\"thf-icon {{ icon }}\"></span> {{ message }} </div> <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\"> {{ actionLabel }} </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToasterComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    ThfToasterComponent.propDecorators = {
        'toaster': [{ type: core.ViewChild, args: ['toaster',] },],
    };
    return ThfToasterComponent;
}(thfToasterBase_component.ThfToasterBaseComponent));

var __extends$29 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-notification-labs' title='Totvs Notification Labs' >
 *  <file name='sample-thf-notification-labs.component.html'>
 *    <thf-button
 *      (t-click)="myFunction()"
 *      t-label="Exibir">
 *    </thf-button>
 *
 *    <form #f="ngForm">
 *      <thf-input
 *        name="text"
 *        [(ngModel)]="text"
 *        t-label="Texto da Notificação"
 *        t-help="Informe uma mensagem para notificação"
 *        t-placeholder="Texto"
 *        t-focus
 *        t-clean>
 *      </thf-input>
 *
 *      <thf-radio-group
 *        name="notificationType"
 *        t-required
 *        t-label="Tipo de Notificação"
 *        t-help="Selecione o tipo de notificação"
 *        [t-options]="notificationTypeOptions"
 *        [(ngModel)]="notificationType">
 *      </thf-radio-group>
 *
 *      <thf-radio-group
 *        name="orientationType"
 *        t-required
 *        t-label="Orientação da Notificação"
 *        t-help="Selecione a orientação"
 *        [t-options]="orientationTypeOptions"
 *        [(ngModel)]="orientationType">
 *      </thf-radio-group>
 *
 *      <thf-checkbox-group
 *        name="checkboxAction"
 *        t-label="Ações"
 *        [t-options]="action"
 *        [(ngModel)]="actionValue">
 *      </thf-checkbox-group>
 *
 *    </form>
 *
 *    <thf-modal
 *      t-title="Mensagem!!"
 *      [t-primary-action]="notificationAction">
 *        Ação chamada!
 *    </thf-modal>
 *  </file>
 *  <file name='sample-thf-notification-labs.component.ts'>
 *    import { Component, ViewChild } from '\@angular/core';
 *
 *    import { ThfCheckboxGroupOption }
 *      from '\@totvs/thf-core/components/thf-field-base/thf-checkbox-group-base/thf-checkbox-group.interface';
 *    import { ThfModalAction } from '\@totvs/thf-core/components/thf-modal-base/thf-modal-action.interface';
 *    import { ThfModalComponent } from '\@totvs/thf-web/components/thf-modal/thf-modal.component';
 *    import { ThfNotification } from '\@totvs/thf-core/services/thf-notification-base/thf-notification.interface';
 *    import { ThfNotificationService } from '\@totvs/thf-web/services/thf-notification/thf-notification.service';
 *    import { ThfRadioGroupOption } from '\@totvs/thf-core/components/thf-field-base/thf-radio-group-base/thf-radio-group.interface';
 *    import { ThfToasterOrientation } from '\@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum';
 *    import { ThfToasterType } from '\@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-type.enum';
 *
 *    \@Component({
 *      selector: 'sample-thf-notification-labs',
 *      templateUrl: './sample-thf-notification-labs.component.html',
 *      providers: [ThfNotificationService]
 *    })
 *    export class SampleThfNotificationLabsComponent {
 *
 *      text: string = 'Exemplo de notificação!';
 *
 *      \@ViewChild(ThfModalComponent) thfModal: ThfModalComponent;
 *
 *      notificationType: number = ThfToasterType.Success;
 *      notificationTypeOptions: Array<ThfRadioGroupOption> = [
 *        { label: 'Sucesso', value: ThfToasterType.Success },
 *        { label: 'Erro', value: ThfToasterType.Error },
 *        { label: 'Atenção', value: ThfToasterType.Warning },
 *        { label: 'Informação', value: ThfToasterType.Information }
 *      ];
 *
 *      orientationType: number = ThfToasterOrientation.Top;
 *      orientationTypeOptions: Array<ThfRadioGroupOption> = [
 *        { label: 'Superior', value: ThfToasterOrientation.Top },
 *        { label: 'Inferior', value: ThfToasterOrientation.Bottom }
 *      ];
 *
 *      notificationAction: ThfModalAction = {
 *        label: 'ok',
 *        action: () => this.thfModal.close()
 *      };
 *
 *      action: Array<ThfCheckboxGroupOption>;
 *      actionValue: Array<any> = [];
 *
 *      constructor(private thfNotification: ThfNotificationService) {
 *        this.action = [{
 *          value: 'action',
 *          label: 'Adicionar ação na notificação'
 *        }];
 *      }
 *
 *      myFunction() {
 *        const thfNotification: ThfNotification = {
 *          message: this.text,
 *          orientation: this.orientationType,
 *          action: undefined,
 *          actionLabel: 'Abrir Modal'
 *        };
 *
 *        if (this.actionValue.length > 0) {
 *          thfNotification.action = () => {
 *            this.thfModal.open();
 *          };
 *        }
 *
 *        if (this.notificationType === ThfToasterType.Success) {
 *          this.thfNotification.success(thfNotification);
 *        } else if (this.notificationType === ThfToasterType.Error) {
 *          this.thfNotification.error(thfNotification);
 *        } else if (this.notificationType === ThfToasterType.Warning) {
 *          this.thfNotification.warning(thfNotification);
 *        } else if (this.notificationType === ThfToasterType.Information) {
 *          this.thfNotification.information(thfNotification);
 *        }
 *      }
 *    }
 *  </file>
 * </example>
 */
var ThfNotificationService = (function (_super) {
    __extends$29(ThfNotificationService, _super);
    /**
     * @param {?} thfComponentInjector
     */
    function ThfNotificationService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.createToaster = function (toaster) {
        var _this = this;
        var /** @type {?} */ componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === thfToasterOrientation_enum.ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, this.durationToaster);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.destroyToaster = function (toaster) {
        var /** @type {?} */ stack;
        if (toaster.instance.orientation === thfToasterOrientation_enum.ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        var /** @type {?} */ index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (var /** @type {?} */ count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    ThfNotificationService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfNotificationService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService, },
    ]; };
    return ThfNotificationService;
}(thfNotificationBase_service.ThfNotificationBaseService));

var __extends$31 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-http-interceptor-labs' title='Totvs Http Interceptor Labs'>
 *  <file name='sample-thf-http-interceptor-labs.component.ts'> </file>
 *  <file name='sample-thf-http-interceptor-labs.component.html'> </file>
 * </example>
 */
var ThfHttpInterceptorService = (function (_super) {
    __extends$31(ThfHttpInterceptorService, _super);
    /**
     * @param {?} notification
     * @param {?} dialog
     */
    function ThfHttpInterceptorService(notification, dialog) {
        return _super.call(this, notification, dialog) || this;
    }
    ThfHttpInterceptorService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfHttpInterceptorService.ctorParameters = function () { return [
        { type: ThfNotificationService, },
        { type: ThfDialogService, },
    ]; };
    return ThfHttpInterceptorService;
}(thfHttpInterceptorBase.ThfHttpInterceptorBaseService));

var ThfHttpInterceptorModule = (function () {
    function ThfHttpInterceptorModule() {
    }
    ThfHttpInterceptorModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        ThfHttpInterceptorService,
                        ThfDialogService,
                        ThfNotificationService
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfHttpInterceptorModule.ctorParameters = function () { return []; };
    return ThfHttpInterceptorModule;
}());

var ThfInterceptorsModule = (function () {
    function ThfInterceptorsModule() {
    }
    ThfInterceptorsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfHttpInterceptorModule
                    ],
                    exports: [
                        ThfHttpInterceptorModule,
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInterceptorsModule.ctorParameters = function () { return []; };
    return ThfInterceptorsModule;
}());

var ThfPipesModule = (function () {
    function ThfPipesModule() {
    }
    ThfPipesModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPipesModule.ctorParameters = function () { return []; };
    return ThfPipesModule;
}());

var ThfComponentInjectorModule = (function () {
    function ThfComponentInjectorModule() {
    }
    ThfComponentInjectorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        ThfComponentInjectorService
                    ],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfComponentInjectorModule.ctorParameters = function () { return []; };
    return ThfComponentInjectorModule;
}());

var ThfDialogModule = (function () {
    function ThfDialogModule() {
    }
    ThfDialogModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThfDialogComponent
                    ],
                    imports: [
                        ThfModalModule
                    ],
                    exports: [
                        ThfDialogComponent
                    ],
                    entryComponents: [
                        ThfDialogComponent
                    ],
                    providers: [
                        ThfDialogService
                    ],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDialogModule.ctorParameters = function () { return []; };
    return ThfDialogModule;
}());

var ThfNotificationModule = (function () {
    function ThfNotificationModule() {
    }
    ThfNotificationModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThfToasterComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [],
                    entryComponents: [
                        ThfToasterComponent
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfNotificationModule.ctorParameters = function () { return []; };
    return ThfNotificationModule;
}());

var __extends$32 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-i18n-pipe-labs' title='Totvs i18n Pipe Labs' >
 *  <file name='sample-thf-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-thf-i18n-pipe.component.html'> </file>
 *  <file name='sample-thf-i18n-pipe.component.ts'> </file>
 * </example>
 */
var ThfI18nPipe = (function (_super) {
    __extends$32(ThfI18nPipe, _super);
    function ThfI18nPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfI18nPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'thfI18n'
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfI18nPipe.ctorParameters = function () { return []; };
    return ThfI18nPipe;
}(thfI18nBase_pipe.ThfI18nBasePipe));

var ThfServicesModule = (function () {
    function ThfServicesModule() {
    }
    ThfServicesModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ThfI18nPipe
                    ],
                    imports: [
                        ThfComponentInjectorModule,
                        ThfDialogModule,
                        ThfNotificationModule
                    ],
                    exports: [
                        ThfComponentInjectorModule,
                        ThfDialogModule,
                        ThfNotificationModule,
                        ThfI18nPipe
                    ],
                    providers: [],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfServicesModule.ctorParameters = function () { return []; };
    return ThfServicesModule;
}());

var ThfModule = (function () {
    function ThfModule() {
    }
    ThfModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [],
                    imports: [
                        ThfComponentsModule,
                        ThfDirectivesModule,
                        ThfGuardsModule,
                        ThfInterceptorsModule,
                        ThfPipesModule,
                        ThfServicesModule
                    ],
                    exports: [
                        ThfComponentsModule,
                        ThfDirectivesModule,
                        ThfInterceptorsModule,
                        ThfGuardsModule,
                        ThfPipesModule,
                        ThfServicesModule
                    ],
                    providers: [ThfNotificationService],
                    bootstrap: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfModule.ctorParameters = function () { return []; };
    return ThfModule;
}());

exports.ThfModule = ThfModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
