var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ViewContainerRef } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { ThfToolbarBaseComponent } from '@totvs/thf-core/components/thf-toolbar-base';
/**
 *
 * \@description
 *
 * O título da página web assumirá o valor da propriedade `t-title`.
 *
 * \@example
 * <example name="thf-toolbar-labs" title="Totvs Toolbar Labs" >
 *  <file name='sample-thf-toolbar-labs.component.html'> </file>
 *  <file name="sample-thf-toolbar-labs.component.ts"> </file>
 * </example>
 */
var ThfToolbarComponent = (function (_super) {
    __extends(ThfToolbarComponent, _super);
    /**
     * @param {?} titleService
     * @param {?} viewRef
     */
    function ThfToolbarComponent(titleService, viewRef) {
        var _this = _super.call(this) || this;
        _this.titleService = titleService;
        _this.viewRef = viewRef;
        _this.notificationMenu = false;
        _this.userMenu = false;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.ngOnInit = function () {
        this.setTitle(this.title);
    };
    /**
     * @param {?} newTitle
     * @return {?}
     */
    ThfToolbarComponent.prototype.setTitle = function (newTitle) {
        this.titleService.setTitle(newTitle);
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showNotificationMenu = function () {
        this.notificationMenu = !this.notificationMenu;
        this.userMenu = false;
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showUserMenu = function () {
        this.userMenu = !this.userMenu;
        this.notificationMenu = false;
    };
    ThfToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-toolbar', template: "<div class=\"thf-toolbar\"> <div class=\"thf-toolbar-title\" (click)=\"userMenu = notificationMenu = false;\"> {{title}} </div> <div *ngIf=\"showNotification\" class=\"thf-toolbar-notification\" (click)=\"showNotificationMenu()\"> <span class=\"thf-icon thf-icon-notification\"></span> <div *ngIf=\"notificationNumber > 0\" class=\"thf-toolbar-notification-badge\">{{ notificationNumber }}</div> <div class=\"thf-toolbar-notification-content\" [style.display]=\"notificationMenu ? 'block' : 'none'\"> <div *ngFor=\"let notificationAction of notificationActions\" class=\"thf-notification-item\" (click)=\"parentRef[notificationAction.action](notificationAction)\"> {{ notificationAction.label }} </div> </div> </div> <div *ngIf=\"userSrc\" class=\"thf-toolbar-avatar thf-clickable\" (click)=\"showUserMenu()\"> <thf-avatar t-size=\"xs\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-toolbar-user-menu-content\" [style.display]=\"userMenu ? 'block' : 'none'\"> <thf-avatar t-size=\"md\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-notification-item\"><span class=\"thf-icon thf-icon-user\"></span>{{ userName }}</div> <hr> <div *ngFor=\"let userAction of userActions\" class=\"thf-notification-item\" (click)=\"parentRef[userAction.action](userAction)\"> {{ userAction.label }} </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToolbarComponent.ctorParameters = function () { return [
        { type: Title, },
        { type: ViewContainerRef, },
    ]; };
    return ThfToolbarComponent;
}(ThfToolbarBaseComponent));
export { ThfToolbarComponent };
function ThfToolbarComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfToolbarComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfToolbarComponent.ctorParameters;
    /** @type {?} */
    ThfToolbarComponent.prototype.notificationMenu;
    /** @type {?} */
    ThfToolbarComponent.prototype.userMenu;
    /** @type {?} */
    ThfToolbarComponent.prototype.parentRef;
    /** @type {?} */
    ThfToolbarComponent.prototype.titleService;
    /** @type {?} */
    ThfToolbarComponent.prototype.viewRef;
}
