(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'), require('@totvs/thf-core/components/thf-toolbar-base'), require('@totvs/thf-core/components/thf-avatar-base')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser', '@totvs/thf-core/components/thf-toolbar-base', '@totvs/thf-core/components/thf-avatar-base'], factory) :
	(factory((global['thf-toolbar'] = {}),global.core,global.common,global.platformBrowser,global.thfToolbarBase,global.thfAvatarBase));
}(this, (function (exports,core,common,platformBrowser,thfToolbarBase,thfAvatarBase) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 *
 * O título da página web assumirá o valor da propriedade `t-title`.
 *
 * \@example
 * <example name="thf-toolbar-labs" title="Totvs Toolbar Labs" >
 *  <file name='sample-thf-toolbar-labs.component.html'> </file>
 *  <file name="sample-thf-toolbar-labs.component.ts"> </file>
 * </example>
 */
var ThfToolbarComponent = (function (_super) {
    __extends(ThfToolbarComponent, _super);
    /**
     * @param {?} titleService
     * @param {?} viewRef
     */
    function ThfToolbarComponent(titleService, viewRef) {
        var _this = _super.call(this) || this;
        _this.titleService = titleService;
        _this.viewRef = viewRef;
        _this.notificationMenu = false;
        _this.userMenu = false;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.ngOnInit = function () {
        this.setTitle(this.title);
    };
    /**
     * @param {?} newTitle
     * @return {?}
     */
    ThfToolbarComponent.prototype.setTitle = function (newTitle) {
        this.titleService.setTitle(newTitle);
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showNotificationMenu = function () {
        this.notificationMenu = !this.notificationMenu;
        this.userMenu = false;
    };
    /**
     * @return {?}
     */
    ThfToolbarComponent.prototype.showUserMenu = function () {
        this.userMenu = !this.userMenu;
        this.notificationMenu = false;
    };
    ThfToolbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-toolbar', template: "<div class=\"thf-toolbar\"> <div class=\"thf-toolbar-title\" (click)=\"userMenu = notificationMenu = false;\"> {{title}} </div> <div *ngIf=\"showNotification\" class=\"thf-toolbar-notification\" (click)=\"showNotificationMenu()\"> <span class=\"thf-icon thf-icon-notification\"></span> <div *ngIf=\"notificationNumber > 0\" class=\"thf-toolbar-notification-badge\">{{ notificationNumber }}</div> <div class=\"thf-toolbar-notification-content\" [style.display]=\"notificationMenu ? 'block' : 'none'\"> <div *ngFor=\"let notificationAction of notificationActions\" class=\"thf-notification-item\" (click)=\"parentRef[notificationAction.action](notificationAction)\"> {{ notificationAction.label }} </div> </div> </div> <div *ngIf=\"userSrc\" class=\"thf-toolbar-avatar thf-clickable\" (click)=\"showUserMenu()\"> <thf-avatar t-size=\"xs\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-toolbar-user-menu-content\" [style.display]=\"userMenu ? 'block' : 'none'\"> <thf-avatar t-size=\"md\" [t-src]=\"userSrc\"></thf-avatar> <div class=\"thf-notification-item\"><span class=\"thf-icon thf-icon-user\"></span>{{ userName }}</div> <hr> <div *ngFor=\"let userAction of userActions\" class=\"thf-notification-item\" (click)=\"parentRef[userAction.action](userAction)\"> {{ userAction.label }} </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToolbarComponent.ctorParameters = function () { return [
        { type: platformBrowser.Title, },
        { type: core.ViewContainerRef, },
    ]; };
    return ThfToolbarComponent;
}(thfToolbarBase.ThfToolbarBaseComponent));

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name="thf-avatar-labs" title="Totvs Avatar Labs" >
 *  <file name='sample-thf-avatar-labs.component.html'> </file>
 *  <file name="sample-thf-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-avatar" title="Totvs Avatar com diferentes imagens" >
 *  <file name='sample-thf-avatar.component.html'> </file>
 *  <file name="sample-thf-avatar.component.ts"> </file>
 * </example>
 */
var ThfAvatarComponent = (function (_super) {
    __extends$1(ThfAvatarComponent, _super);
    function ThfAvatarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultSrc = './assets/images/totvs-avatar-default.svg';
        return _this;
    }
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.ngOnInit = function () {
        if (!this.src) {
            this.src = this.defaultSrc;
        }
    };
    /**
     * @return {?}
     */
    ThfAvatarComponent.prototype.onError = function () {
        this.src = this.defaultSrc;
    };
    ThfAvatarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-avatar', template: "<div class=\"thf-avatar thf-avatar-{{size}}\"> <img [src]=\"src\" alt=\"\" (error)=\"onError()\" class=\"thf-avatar-image\" > </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfAvatarComponent.ctorParameters = function () { return []; };
    return ThfAvatarComponent;
}(thfAvatarBase.ThfAvatarBaseComponent));

/**
 * \@description
 * Módulo do componente thf-avatar
 */
var ThfAvatarModule = (function () {
    function ThfAvatarModule() {
    }
    ThfAvatarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ThfAvatarComponent
                    ],
                    exports: [
                        ThfAvatarComponent
                    ],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfAvatarModule.ctorParameters = function () { return []; };
    return ThfAvatarModule;
}());

/**
 * \@description
 * Módulo do componente thf-toolbar
 */
var ThfToolbarModule = (function () {
    function ThfToolbarModule() {
    }
    ThfToolbarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        ThfAvatarModule
                    ],
                    declarations: [
                        ThfToolbarComponent
                    ],
                    exports: [ThfToolbarComponent],
                    providers: [],
                    schemas: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfToolbarModule.ctorParameters = function () { return []; };
    return ThfToolbarModule;
}());

exports.ThfToolbarModule = ThfToolbarModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
