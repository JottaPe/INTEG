var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ContentChildren, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { ThfTabsBaseComponent } from '@totvs/thf-core/components/thf-tabs-base';
import { ThfTabButtonComponent } from './thf-tab-button/thf-tab-button.component';
import { ThfTabComponent } from './thf-tab/thf-tab.component';
/**
 *
 * \@example
 *  <example name='thf-tabs'>
 *  <file name='sample-thf-tabs.component.html'>
 *
 *    <thf-tabs>
 *      <thf-tab t-label="Aba 1">
 *        <h1>Conteúdo da aba 1</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 2" (t-click)="metodo()">
 *        <h1>Conteúdo da aba 2</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 3" t-active>
 *        <h1>Conteúdo da aba 3</h1>
 *      </thf-tab>
 *    </thf-tabs>
 *
 *    <thf-tabs t-small>
 *      <thf-tab t-label="Aba 1" t-active>
 *        <h1>Conteúdo da aba 1</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 2" [t-hide]="hide">
 *        <h1>Conteúdo da aba 2</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 3" t-disabled>
 *        <h1>Conteúdo da aba 3</h1>
 *      </thf-tab>
 *      <thf-tab t-label="Aba 4">
 *        <h1>Conteúdo da aba 4</h1>
 *      </thf-tab>
 *    </thf-tabs>
 *
 *    <thf-button (click)="hide=!hide" [t-label]="'hide: '+hide"></thf-button>
 *
 *  </file>
 *  <file name='sample-thf-tabs.component.ts'>
 *   import { Component, AfterViewChecked } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-tabs',
 *     templateUrl: './sample-thf-tabs.component.html',
 *   })
 *   export class SampleThfTabsComponent {
 *
 *     hide: boolean = false;
 *
 *     metodo() {
 *       console.log('Disparado método ao clicar na aba');
 *     }
 *
 *   }
 *  </file>
 * </example>
 */
var ThfTabsComponent = (function (_super) {
    __extends(ThfTabsComponent, _super);
    /**
     * @param {?} resolver
     */
    function ThfTabsComponent(resolver) {
        var _this = _super.call(this) || this;
        _this.resolver = resolver;
        // Id do componente
        _this.listButtons = [];
        _this.created = false;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var /** @type {?} */ ComponentFactory = this.resolver.resolveComponentFactory(ThfTabButtonComponent);
        // Calcula a largura das tabs
        var /** @type {?} */ width = this.calculateWidth(this.countVisibledTabs());
        // Percorre tabs
        this.tabsChild.forEach(function (tab) {
            // Cria os botões
            var /** @type {?} */ compButton = _this.nav.createComponent(ComponentFactory);
            compButton.instance.label = tab.label;
            compButton.instance.id = tab.id;
            compButton.instance.active = tab.active;
            compButton.instance.hide = tab.hide;
            compButton.instance.disabled = tab.disabled;
            compButton.instance.width = width;
            compButton.instance.small = _this.small;
            compButton.instance.clickCallback = tab.click;
            // É necessário esta arrow function para não perder o contexto.
            // Caso contrário, a funcão não teria mais acesso ao "this" deste component
            compButton.instance.clickTab.subscribe(function (id) { return _this.selectedTab(id); });
            _this.listButtons.push(compButton.instance);
        });
        this.created = true;
    };
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        if (this.created) {
            // Váriaveis utilizadas para trocar aba ativa,
            // quando a aba ativa está desabilitada ou escondida
            var /** @type {?} */ changeTab_1 = false;
            var /** @type {?} */ lastEnabledTab_1 = null;
            var /** @type {?} */ lastEnabledButton_1 = null;
            // Calcula a largura das tabs
            var /** @type {?} */ width_1 = this.calculateWidth(this.countVisibledTabs());
            this.tabsChild.forEach(function (tab) {
                _this.listButtons.forEach(function (button) {
                    if (button.id === tab.id) {
                        // Atualiza a largura dos botões de acordo com os botões visíveis
                        button.width = width_1;
                        button.active = tab.active;
                        if (tab.disabled || tab.hide) {
                            // Verifica se uma desativada ou escondida está ativa
                            if (tab.active) {
                                tab.active = false;
                                button.active = false;
                                changeTab_1 = true;
                            }
                        }
                        else {
                            // Armazena a aba que não esteja escondida para trocar de aba automaticamente
                            // caso a aba ativa seja escondida ou desabilitada.
                            if (!changeTab_1) {
                                lastEnabledTab_1 = tab;
                                lastEnabledButton_1 = button;
                            }
                            else if (!lastEnabledTab_1) {
                                lastEnabledTab_1 = tab;
                                lastEnabledButton_1 = button;
                            }
                        }
                        // Atualiza as propriedades disabled e hide das abas
                        button.disabled = tab.disabled;
                        button.hide = tab.hide;
                    }
                });
            });
            // Habilita uma aba ativa
            if (changeTab_1 && lastEnabledTab_1) {
                lastEnabledTab_1.active = true;
                lastEnabledButton_1.active = true;
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ThfTabsComponent.prototype.selectedTab = function (id) {
        this.tabsChild.forEach(function (tab) {
            tab.active = (tab.id === id);
        });
        this.listButtons.forEach(function (button) {
            if (button.id === id) {
                button.active = true;
            }
            else {
                button.active = false;
            }
        });
    };
    /**
     * @return {?}
     */
    ThfTabsComponent.prototype.countVisibledTabs = function () {
        var /** @type {?} */ cont = 0;
        this.tabsChild.forEach(function (tab) {
            cont = (tab.hide) ? cont : cont + 1;
        });
        return cont;
    };
    /**
     * @param {?} visibledTabs
     * @return {?}
     */
    ThfTabsComponent.prototype.calculateWidth = function (visibledTabs) {
        var /** @type {?} */ width = parseFloat((100 / visibledTabs).toFixed(2));
        if (width * visibledTabs > 100) {
            width = parseFloat(String(width).substring(0, String(width).length - 1));
        }
        return width;
    };
    ThfTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tabs', template: "<div class=\"thf-tabs-parent\"> <div #nav></div> </div> <div class=\"thf-tabs-container\"> <ng-content></ng-content> </div> ", styles: [".thf-tabs-parent { width: 100%; display: table; } .thf-tabs-container { padding-top: 5px; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTabsComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
    ]; };
    ThfTabsComponent.propDecorators = {
        'tabsChild': [{ type: ContentChildren, args: [ThfTabComponent,] },],
        'nav': [{ type: ViewChild, args: ['nav', { read: ViewContainerRef },] },],
    };
    return ThfTabsComponent;
}(ThfTabsBaseComponent));
export { ThfTabsComponent };
function ThfTabsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfTabsComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfTabsComponent.ctorParameters;
    /** @type {?} */
    ThfTabsComponent.propDecorators;
    /** @type {?} */
    ThfTabsComponent.prototype.tabsChild;
    /** @type {?} */
    ThfTabsComponent.prototype.nav;
    /** @type {?} */
    ThfTabsComponent.prototype.listButtons;
    /** @type {?} */
    ThfTabsComponent.prototype.created;
    /** @type {?} */
    ThfTabsComponent.prototype.resolver;
}
