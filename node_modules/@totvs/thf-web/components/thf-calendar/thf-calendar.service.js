import { Injectable } from '@angular/core';
var ThfCalendarService = (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = function (date) {
        var /** @type {?} */ startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        var /** @type {?} */ weeks = [];
        var /** @type {?} */ week = [];
        var /** @type {?} */ i = 0;
        var /** @type {?} */ date = this.weekStartDate(new Date(year, month, 1));
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = function (year, month) {
        var /** @type {?} */ getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());
export { ThfCalendarService };
function ThfCalendarService_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfCalendarService.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfCalendarService.ctorParameters;
    /** @type {?} */
    ThfCalendarService.prototype.firstWeekDay;
}
