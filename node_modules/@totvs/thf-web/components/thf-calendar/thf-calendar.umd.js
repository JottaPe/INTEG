(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@totvs/thf-core/utils/util')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@totvs/thf-core/utils/util'], factory) :
	(factory((global['thf-calendar'] = {}),global.core,global.common,global.util));
}(this, (function (exports,core,common,util) { 'use strict';

var ThfCalendarLangService = (function () {
    function ThfCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'en';
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    ThfCalendarLangService.prototype.setLanguage = function (lang) {
        if (lang) {
            if (lang.length >= 2) {
                lang = lang.toLowerCase().slice(0, 2);
                this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordMonth = function () {
        return this.wordMonth[this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordYear = function () {
        return this.wordYear[this.lang];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonth = function (month) {
        return this.months[month][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayMonths = function () {
        var /** @type {?} */ arrMonths = Array();
        for (var /** @type {?} */ i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeedDays = function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayWeekDays = function () {
        var /** @type {?} */ arrWeekDays = Array();
        for (var /** @type {?} */ i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    ThfCalendarLangService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarLangService.ctorParameters = function () { return []; };
    return ThfCalendarLangService;
}());

var ThfCalendarService = (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = function (date) {
        var /** @type {?} */ startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        var /** @type {?} */ weeks = [];
        var /** @type {?} */ week = [];
        var /** @type {?} */ i = 0;
        var /** @type {?} */ date = this.weekStartDate(new Date(year, month, 1));
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = function (year, month) {
        var /** @type {?} */ getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var ThfCalendarComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} thfCalendarService
     * @param {?} thfCalendarLangService
     */
    function ThfCalendarComponent(elementRef, thfCalendarService, thfCalendarLangService) {
        this.elementRef = elementRef;
        this.dateChange = new core.EventEmitter();
        this.submit = new core.EventEmitter();
        this.today = new Date();
        this.isMobile = util.isMobile;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "date", {
        /**
         * @return {?}
         */
        get: function () {
            return this._date;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                this._date = val;
                this.updateDate(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateStart;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateStart = new Date(year, month, day, 0, 0, 0);
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateEnd;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateEnd = new Date(year, month, day, 23, 59, 59);
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
        this.init();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = function () {
        if (!this.date) {
            this.date = new Date();
        }
        this.selectDay();
        this.updateDate(this.date);
        if (this.isMobile()) {
            this.setMobileVisualization();
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = function () {
        var /** @type {?} */ thfCalendarOverlay = this.elementRef.nativeElement.querySelector('.thf-calendar-overlay');
        var /** @type {?} */ thfCalendar = this.elementRef.nativeElement.querySelector('.thf-calendar');
        thfCalendar.classList.add('thf-calendar-mobile');
        thfCalendarOverlay.classList.remove('thf-invisible');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentMonth = this.displayMonths[this.currentMonthNumber];
        this.currentYear = date.getFullYear();
        this.currentDay = date.getDate();
        this.currentDayOfWeek = this.displayWeedDays[date.getDay()];
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = function (year, month) {
        var /** @type {?} */ calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = function () {
        this.elDays.nativeElement.classList.remove('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.remove('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.remove('thf-invisible');
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (day) {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.dateInRange = function (date) {
        if (this._dateStart && !this._dateEnd) {
            return date >= this._dateStart ? true : false;
        }
        if (this._dateEnd && !this._dateStart) {
            return date <= this._dateEnd ? true : false;
        }
        if (this._dateStart && this._dateEnd) {
            return date >= this._dateStart && date <= this._dateEnd ? true : false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthBackgroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthForegroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearBackgroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearForegroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevYear = function () {
        this.updateDisplay(this.displayYear - 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextYear = function () {
        this.updateDisplay(this.displayYear + 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevDecade = function () {
        this.updateDisplay(this.displayYear - 10, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextDecade = function () {
        this.updateDisplay(this.displayYear + 10, this.displayMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleção de mês
        if (this.lastDisplay === 'month') {
            this.selectMonth();
        }
        else {
            this.selectDay();
        }
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = function (date) {
        if (this.dateInRange(date)) {
            this.date = date;
            this.dateChange.emit(date);
            this.submit.emit(this.date);
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = function (year) {
        this.displayDecade = Array();
        var /** @type {?} */ i;
        if (year % 10 === 0) {
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        }
        else {
            // Descobre o início da década
            while (year % 10 !== 0) {
                year--;
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = function () {
        return this.thfCalendarLangService.getWordYear();
    };
    ThfCalendarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar-overlay thf-invisible\"></div> <div class=\"thf-calendar\"> <div #days> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\" [ngClass]=\"getDayBackgroundColor(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div #months> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevYear()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextYear()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordMonth() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" (click)=\"onSelectMonth(displayYear, i)\" [ngClass]=\"getMonthBackgroundColor(i)\"> <span [ngClass]=\"getMonthForegroundColor(i)\"> {{ month }} </span> </div> </div> </div> </div> <div #years> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevDecade()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)=\"onNextDecade()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordYear() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" (click)=\"onSelectYear(year, displayMonthNumber)\" [ngClass]=\"getYearBackgroundColor(year)\"> <span [ngClass]=\"getYearForegroundColor(year)\"> {{ year }} </span> </div> </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: ThfCalendarService, },
        { type: ThfCalendarLangService, },
    ]; };
    ThfCalendarComponent.propDecorators = {
        'date': [{ type: core.Input, args: ['t-date',] },],
        'dateChange': [{ type: core.Output, args: ['t-dateChange',] },],
        'dateStart': [{ type: core.Input, args: ['t-start',] },],
        'dateEnd': [{ type: core.Input, args: ['t-end',] },],
        'locale': [{ type: core.Input, args: ['t-locale',] },],
        'submit': [{ type: core.Output, args: ['t-submit',] },],
        'elDays': [{ type: core.ViewChild, args: ['days', { read: core.ElementRef },] },],
        'elMonths': [{ type: core.ViewChild, args: ['months', { read: core.ElementRef },] },],
        'elYears': [{ type: core.ViewChild, args: ['years', { read: core.ElementRef },] },],
    };
    return ThfCalendarComponent;
}());

/**
 * \@description
 * Módulo do componente thf-calendar.
 */
var ThfCalendarModule = (function () {
    function ThfCalendarModule() {
    }
    ThfCalendarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfCalendarComponent],
                    exports: [ThfCalendarComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarModule.ctorParameters = function () { return []; };
    return ThfCalendarModule;
}());

exports.ThfCalendarModule = ThfCalendarModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
