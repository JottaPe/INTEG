import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile } from '@totvs/thf-core/utils/util';
import { ThfCalendarLangService } from './thf-calendar.lang.service';
import { ThfCalendarService } from './thf-calendar.service';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendÃ¡rio de uso interno
 */
var ThfCalendarComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} thfCalendarService
     * @param {?} thfCalendarLangService
     */
    function ThfCalendarComponent(elementRef, thfCalendarService, thfCalendarLangService) {
        this.elementRef = elementRef;
        this.dateChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.today = new Date();
        this.isMobile = isMobile;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "date", {
        /**
         * @return {?}
         */
        get: function () {
            return this._date;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                this._date = val;
                this.updateDate(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateStart;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateStart = new Date(year, month, day, 0, 0, 0);
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateEnd;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateEnd = new Date(year, month, day, 23, 59, 59);
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
        this.init();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = function () {
        if (!this.date) {
            this.date = new Date();
        }
        this.selectDay();
        this.updateDate(this.date);
        if (this.isMobile()) {
            this.setMobileVisualization();
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = function () {
        var /** @type {?} */ thfCalendarOverlay = this.elementRef.nativeElement.querySelector('.thf-calendar-overlay');
        var /** @type {?} */ thfCalendar = this.elementRef.nativeElement.querySelector('.thf-calendar');
        thfCalendar.classList.add('thf-calendar-mobile');
        thfCalendarOverlay.classList.remove('thf-invisible');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentMonth = this.displayMonths[this.currentMonthNumber];
        this.currentYear = date.getFullYear();
        this.currentDay = date.getDate();
        this.currentDayOfWeek = this.displayWeedDays[date.getDay()];
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = function (year, month) {
        var /** @type {?} */ calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = function () {
        this.elDays.nativeElement.classList.remove('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.remove('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.remove('thf-invisible');
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (day) {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.dateInRange = function (date) {
        if (this._dateStart && !this._dateEnd) {
            return date >= this._dateStart ? true : false;
        }
        if (this._dateEnd && !this._dateStart) {
            return date <= this._dateEnd ? true : false;
        }
        if (this._dateStart && this._dateEnd) {
            return date >= this._dateStart && date <= this._dateEnd ? true : false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthBackgroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthForegroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearBackgroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearForegroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevYear = function () {
        this.updateDisplay(this.displayYear - 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextYear = function () {
        this.updateDisplay(this.displayYear + 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevDecade = function () {
        this.updateDisplay(this.displayYear - 10, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextDecade = function () {
        this.updateDisplay(this.displayYear + 10, this.displayMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleÃ§Ã£o de mÃªs
        if (this.lastDisplay === 'month') {
            this.selectMonth();
        }
        else {
            this.selectDay();
        }
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = function (date) {
        if (this.dateInRange(date)) {
            this.date = date;
            this.dateChange.emit(date);
            this.submit.emit(this.date);
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = function (year) {
        this.displayDecade = Array();
        var /** @type {?} */ i;
        if (year % 10 === 0) {
            // Adiciona todos os anos Ã  dÃ©cada
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        }
        else {
            // Descobre o inÃ­cio da dÃ©cada
            while (year % 10 !== 0) {
                year--;
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
            // Adiciona todos os anos Ã  dÃ©cada
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = function () {
        return this.thfCalendarLangService.getWordYear();
    };
    ThfCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar-overlay thf-invisible\"></div> <div class=\"thf-calendar\"> <div #days> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\" [ngClass]=\"getDayBackgroundColor(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div #months> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevYear()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextYear()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordMonth() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" (click)=\"onSelectMonth(displayYear, i)\" [ngClass]=\"getMonthBackgroundColor(i)\"> <span [ngClass]=\"getMonthForegroundColor(i)\"> {{ month }} </span> </div> </div> </div> </div> <div #years> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevDecade()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)=\"onNextDecade()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordYear() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" (click)=\"onSelectYear(year, displayMonthNumber)\" [ngClass]=\"getYearBackgroundColor(year)\"> <span [ngClass]=\"getYearForegroundColor(year)\"> {{ year }} </span> </div> </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ThfCalendarService, },
        { type: ThfCalendarLangService, },
    ]; };
    ThfCalendarComponent.propDecorators = {
        'date': [{ type: Input, args: ['t-date',] },],
        'dateChange': [{ type: Output, args: ['t-dateChange',] },],
        'dateStart': [{ type: Input, args: ['t-start',] },],
        'dateEnd': [{ type: Input, args: ['t-end',] },],
        'locale': [{ type: Input, args: ['t-locale',] },],
        'submit': [{ type: Output, args: ['t-submit',] },],
        'elDays': [{ type: ViewChild, args: ['days', { read: ElementRef },] },],
        'elMonths': [{ type: ViewChild, args: ['months', { read: ElementRef },] },],
        'elYears': [{ type: ViewChild, args: ['years', { read: ElementRef },] },],
    };
    return ThfCalendarComponent;
}());
export { ThfCalendarComponent };
function ThfCalendarComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfCalendarComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfCalendarComponent.ctorParameters;
    /** @type {?} */
    ThfCalendarComponent.propDecorators;
    /** @type {?} */
    ThfCalendarComponent.prototype.thfCalendarService;
    /** @type {?} */
    ThfCalendarComponent.prototype.thfCalendarLangService;
    /** @type {?} */
    ThfCalendarComponent.prototype._date;
    /** @type {?} */
    ThfCalendarComponent.prototype.dateChange;
    /** @type {?} */
    ThfCalendarComponent.prototype._dateStart;
    /** @type {?} */
    ThfCalendarComponent.prototype._dateEnd;
    /** @type {?} */
    ThfCalendarComponent.prototype.locale;
    /** @type {?} */
    ThfCalendarComponent.prototype.submit;
    /** @type {?} */
    ThfCalendarComponent.prototype.elDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.elMonths;
    /** @type {?} */
    ThfCalendarComponent.prototype.elYears;
    /** @type {?} */
    ThfCalendarComponent.prototype.today;
    /** @type {?} */
    ThfCalendarComponent.prototype.isMobile;
    /** @type {?} */
    ThfCalendarComponent.prototype.currentMonth;
    /** @type {?} */
    ThfCalendarComponent.prototype.currentMonthNumber;
    /** @type {?} */
    ThfCalendarComponent.prototype.currentYear;
    /** @type {?} */
    ThfCalendarComponent.prototype.currentDay;
    /** @type {?} */
    ThfCalendarComponent.prototype.currentDayOfWeek;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayMonth;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayMonthNumber;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayYear;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayStartDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayFinalDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayMonths;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayWeedDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.lastDisplay;
    /** @type {?} */
    ThfCalendarComponent.prototype.elementRef;
}
