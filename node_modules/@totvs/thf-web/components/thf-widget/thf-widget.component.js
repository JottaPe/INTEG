var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Output, ViewContainerRef, ElementRef, ViewChild, EventEmitter } from '@angular/core';
import { ThfWidgetBaseComponent } from '@totvs/thf-core/components/thf-widget-base';
/**
 *
 * \@example
 * <example name='thf-widget-labs' title='Totvs Widget Labs'>
 *  <file name='sample-thf-widget-labs.component.html'> </file>
 *  <file name='sample-thf-widget-labs.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget-chart' title='Mostrando gráficos'>
 *  <file name='sample-thf-widget-chart.component.html'> </file>
 *  <file name='sample-thf-widget-chart.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget' title='Trocando a visualização'>
 *  <file name='sample-thf-widget.component.html'> </file>
 *  <file name='sample-thf-widget.component.ts'> </file>
 * </example>
 *
 * <example name='thf-widget-background' title='Utilizando imagem de background'>
 *  <file name='sample-thf-widget-background.component.html'> </file>
 *  <file name='sample-thf-widget-background.component.ts'> </file>
 * </example>
 */
var ThfWidgetComponent = (function (_super) {
    __extends(ThfWidgetComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfWidgetComponent(viewRef) {
        var _this = _super.call(this) || this;
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        _this.setting = new EventEmitter;
        // Obtém a referência ao componente pai
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.ngOnInit = function () {
        if (this.background) {
            // Seta uma imagem de background e um tamanho mínimo para que o Widget apareça
            this.elBackground.nativeElement.style.backgroundImage = "url('" + this.background + "')";
            this.elBackground.nativeElement.style.minHeight = '20px';
        }
        if (this.height) {
            var /** @type {?} */ heightBody = this.height - 32; // 32 de padding
            // Calcula tamanho restante para o Body, subtraindo title e footer se existirem
            if (this.title) {
                heightBody = heightBody - 40;
            }
            if (this.primaryLabel) {
                heightBody = heightBody - 40;
            }
            // Seta o corpo do widget com o tamanho calculado
            this.elBody.nativeElement.style.height = heightBody + "px";
        }
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.runPrimaryAction = function () {
        this.primaryAction.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.runSecundaryAction = function () {
        this.secundaryAction.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.settingOutput = function () {
        this.setting.emit();
    };
    /**
     * @return {?}
     */
    ThfWidgetComponent.prototype.openHelp = function () {
        window.open(this.help, '_blank');
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfWidgetComponent.prototype.isTypeof = function (object, type) {
        return typeof object === type;
    };
    ThfWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-widget', template: "<div class=\"thf-widget thf-widget-{{ size }}\" #elemBackground> <div *ngIf=\"!isTypeof(title, 'undefined')\" class=\"thf-widget-header-title\"> {{title}} <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\"> <span id=\"settingAction\" *ngIf=\"setting.observers[0]\" class=\"thf-clickable thf-icon thf-icon-settings\" (click)=\"settingOutput()\"></span> <span id=\"helpLink\" *ngIf=\"help\" class=\"thf-clickable glyphicon glyphicon-question-sign\" (click)=\"openHelp()\"></span> </div> </div> <div class=\"thf-widget-body\" #elemBody> <ng-content></ng-content> </div> <div *ngIf=\"!isTypeof(primaryLabel, 'undefined')\" class=\"thf-widget-footer\"> <div class=\"thf-widget-xl\" *ngIf=\"isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction()\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction()\">{{ primaryLabel }}</a> </div> <div class=\"thf-widget-md\" *ngIf=\"!isTypeof(secundaryLabel, 'undefined')\"> <a class=\"thf-widget-action\" id='secundaryAct' (click)=\"runSecundaryAction()\">{{ secundaryLabel }}</a> </div> </div> </div>"
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfWidgetComponent.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    ThfWidgetComponent.propDecorators = {
        'setting': [{ type: Output, args: ['t-setting',] },],
        'elBackground': [{ type: ViewChild, args: ['elemBackground', { read: ElementRef },] },],
        'elBody': [{ type: ViewChild, args: ['elemBody', { read: ElementRef },] },],
    };
    return ThfWidgetComponent;
}(ThfWidgetBaseComponent));
export { ThfWidgetComponent };
function ThfWidgetComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfWidgetComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfWidgetComponent.ctorParameters;
    /** @type {?} */
    ThfWidgetComponent.propDecorators;
    /**
     * Função chamada ao clicar no ícone de configuração
     * @type {?}
     */
    ThfWidgetComponent.prototype.setting;
    /** @type {?} */
    ThfWidgetComponent.prototype.elBackground;
    /** @type {?} */
    ThfWidgetComponent.prototype.elBody;
    /** @type {?} */
    ThfWidgetComponent.prototype.parentRef;
}
