(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@progress/kendo-angular-charts'), require('@angular/common'), require('@angular/core'), require('@totvs/thf-core/components/thf-chart-base'), require('@totvs/thf-core/components/thf-chart-base/thf-chart-colors.constant'), require('hammerjs')) :
	typeof define === 'function' && define.amd ? define(['exports', '@progress/kendo-angular-charts', '@angular/common', '@angular/core', '@totvs/thf-core/components/thf-chart-base', '@totvs/thf-core/components/thf-chart-base/thf-chart-colors.constant', 'hammerjs'], factory) :
	(factory((global['thf-chart'] = {}),global.kendoAngularCharts,global.common,global.core,global.thfChartBase,global.thfChartColors_constant));
}(this, (function (exports,kendoAngularCharts,common,core,thfChartBase,thfChartColors_constant) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@description
 *
 * Para o correto funcionamento do THF Chart deve ser importado o módulo ```BrowserAnimationsModule``` no módulo principal da sua aplicação.
 *
 * > Módulo da sua aplicação:
 *
 *
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * No arquivo```angular-cli.json``` da sua aplicação você deve importar o arquivo ```all.css```, que pertence ao
 * pacote ```\@progress/kendo-theme-default```.
 *
 *
 * > Arquivo .angular-cli.json:
 *
 *
 * ```
 * ...
 *
 * "styles": [
 *   "../node_modules/\@progress/kendo-theme-default/dist/all.css"
 * ]
 *
 * ...
 * ```
 * \@example
 * <example name="thf-chart" title="Totvs Chart Labs">
 *  <file name='sample-thf-chart.component.html'> </file>
 *  <file name='sample-thf-chart.component.ts'> </file>
 * </example>
 */
var ThfChartComponent = (function (_super) {
    __extends(ThfChartComponent, _super);
    function ThfChartComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.label = {
            color: '#fff',
            background: '#0c9abe',
            border: {
                color: '#0c9abe'
            }
        };
        return _this;
    }
    /**
     * @return {?}
     */
    ThfChartComponent.prototype.getSeriesColor = function () {
        if (this.series) {
            var /** @type {?} */ chart = this.typeChart;
            var /** @type {?} */ index = this.series.length - 1;
            if (chart === 'donut' || chart === 'funnel' || chart === 'pie') {
                // Caso for donut, funnel ou pie utiliza a propriedade data para recuperar o index.
                var /** @type {?} */ dataSeries = this.series[index].data;
                var /** @type {?} */ dataSerieIndex = dataSeries.length - 1;
                return thfChartColors_constant.ThfChartColors[dataSerieIndex];
            }
            // Caso houver 12 ou mais series define o index como 11.
            index = index >= 12 ? 11 : index;
            return thfChartColors_constant.ThfChartColors[index];
        }
        return thfChartColors_constant.ThfChartColors[11];
    };
    ThfChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-chart',
                    encapsulation: core.ViewEncapsulation.None, template: "<kendo-chart [seriesColors]=\"getSeriesColor()\" [style.height]=\"height\" [categoryAxis]=\"{'categories': categories}\" (seriesClick)=\"onSeriesClick($event)\" (seriesHover)=\"onSeriesHover($event)\"> <kendo-chart-title [text]=\"title\"> </kendo-chart-title> <kendo-chart-legend position=\"bottom\" orientation=\"horizontal\"> </kendo-chart-legend> <kendo-chart-tooltip> </kendo-chart-tooltip> <kendo-chart-value-axis> <kendo-chart-value-axis-item [max]=\"maxValue\" [min]=\"minValue\"> </kendo-chart-value-axis-item> </kendo-chart-value-axis> <kendo-chart-series> <kendo-chart-series-item *ngFor=\"let serie of series\" [name]=\"serie.name\" [type]=\"typeChart\" [data]=\"serie.data\"> <kendo-chart-series-item-labels [visible]=\"labelVisible\" [color]=\"label.color\" [background]=\"label.background\" [border]=\"label.border\"> </kendo-chart-series-item-labels> </kendo-chart-series-item> </kendo-chart-series> </kendo-chart> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfChartComponent.ctorParameters = function () { return []; };
    return ThfChartComponent;
}(thfChartBase.ThfChartBaseComponent));

/**
 * \@description
 *
 * Módulo do componente thf-chart.
 */
var ThfChartModule = (function () {
    function ThfChartModule() {
    }
    ThfChartModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        kendoAngularCharts.ChartModule,
                        common.CommonModule
                    ],
                    declarations: [ThfChartComponent],
                    exports: [ThfChartComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfChartModule.ctorParameters = function () { return []; };
    return ThfChartModule;
}());

exports.ThfChartModule = ThfChartModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
