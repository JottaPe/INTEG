var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ViewContainerRef, Renderer } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction } from '@totvs/thf-core/utils';
import { ThfPageDefaultBaseComponent } from '@totvs/thf-core/components/thf-page-base';
/**
 *
 * \@example
 * <example name='thf-page-default-labs' title='Sample Labs Totvs Page Default' >
 *  <file name='sample-thf-page-default-labs.component.html'>
 *  <thf-page-default [t-title]="title" [t-actions]="actions">
 *
 *    <thf-input t-label="Título do thf-page" name="title" [(ngModel)]="title" ngDefaultControl>
 *    </thf-input>
 *
 *    <form  #f="ngForm">
 *      <h4>Adicionar novos botões</h4>
 *      <br>
 *
 *      <thf-input t-label="Título do botão de ação" name="title" [(ngModel)]="button.label" t-required>
 *      </thf-input>
 *
 *      <thf-select name="iconButton" [(ngModel)]="button.icon" t-label="Selecione o tipo de ícone do botão"
 *        [t-options]="iconList" t-required>
 *      </thf-select>
 *
 *      <thf-button t-label='Adicionar botão' (t-click)="newButton()" [t-disabled]='!button.label || !button.icon'>
 *      </thf-button>
 *
 *    </form>
 *  </thf-page-default>
 *  </file>
 *  <file name='sample-thf-page-default-labs.component.ts'>
 *  import { Component } from '\@angular/core';
 *  import { FormGroup, FormControl, FormBuilder } from '\@angular/forms';
 *
 *  import { ThfNotificationService } from '\@totvs/thf-web/services/thf-notification/thf-notification.service';
 *  import { ThfToasterOrientation } from '\@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum';
 *
 *  \@Component({
 *    selector: 'sample-thf-page-default-labs',
 *    templateUrl: './sample-thf-page-default-labs.component.html'
 *  })
 *  export class SampleThfPageDefaultLabsComponent {
 *    title = 'THF Page Default Labs';
 *    button = {
 *      label: undefined,
 *      action: undefined,
 *      icon: undefined
 *    };
 *
 *    iconList = [
 *      { value: 'thf-icon-copy', label: 'Copiar' },
 *      { value: 'thf-icon-delete', label: 'Deletar' },
 *      { value: 'thf-icon-logo-totvs', label: 'Totvs' },
 *    ];
 *
 *    actions: Array<{}> = [
 *      { label: 'Compartilhar', action: this.share, icon: 'thf-icon-share' }
 *    ];
 *
 *    constructor(private thfNotification: ThfNotificationService) {}
 *
 *    newButton() {
 *      switch (this.button.icon) {
 *        case 'thf-icon-copy':
 *          this.button.action = this.copy;
 *          break;
 *        case 'thf-icon-delete':
 *          this.button.action = this.delete;
 *          break;
 *        case 'thf-icon-logo-totvs':
 *          this.button.action = this.totvs;
 *      }
 *
 *      this.actions.push(Object.assign({}, this.button));
 *    }
 *
 *    copy () {
 *      const message = 'Item copiado!';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    delete() {
 *      const message = 'Item #3 deletado';
 *      const type = 'warning';
 *      this.showMessage(message, type);
 *    }
 *
 *    totvs() {
 *      const message = 'Somos #Totvers';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    share() {
 *      const message = 'Compartilhado com sucesso!';
 *      const type = 'success';
 *      this.showMessage(message, type);
 *    }
 *
 *    showMessage(message, type) {
 *      this.thfNotification[type]({
 *        message: message,
 *        orientation: ThfToasterOrientation.Bottom,
 *      });
 *    }
 *
 *  }
 *  </file>
 * </example>
 */
var ThfPageDefaultComponent = (function (_super) {
    __extends(ThfPageDefaultComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageDefaultComponent(viewRef, renderer, router) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    ThfPageDefaultComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-default', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-default-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageDefaultComponent.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: Renderer, },
        { type: Router, },
    ]; };
    return ThfPageDefaultComponent;
}(ThfPageDefaultBaseComponent));
export { ThfPageDefaultComponent };
function ThfPageDefaultComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfPageDefaultComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfPageDefaultComponent.ctorParameters;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.limitPrimaryActions;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.dropdownActions;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.isMobile;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.maxWidthMobile;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.parentRef;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.viewRef;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.renderer;
    /** @type {?} */
    ThfPageDefaultComponent.prototype.router;
}
