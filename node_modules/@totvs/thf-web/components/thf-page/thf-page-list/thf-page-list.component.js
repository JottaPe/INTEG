var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ViewContainerRef, Renderer } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction } from '@totvs/thf-core/utils';
import { ThfPageListBaseComponent } from '@totvs/thf-core/components/thf-page-base';
/**
 *
 * \@example
 * <example name='thf-page-list-labs' title='Totvs Page List Labs'>
 *  <file name='sample-thf-page-list-labs.component.html'> </file>
 *  <file name='sample-thf-page-list-labs.component.ts'> </file>
 * </example>
 */
var ThfPageListComponent = (function (_super) {
    __extends(ThfPageListComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageListComponent(viewRef, renderer, router) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.callFunction = callFunction;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageListComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageListComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    ThfPageListComponent.prototype.callActionFilter = function (field) {
        this.callFunction(this.filter[field], this.parentRef);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfPageListComponent.prototype.onkeypress = function (key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    ThfPageListComponent.prototype.changeModel = function (newModel) {
        this.parentRef[this.filter.ngModel] = newModel;
    };
    ThfPageListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-list', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-header-row\"> <div class=\"thf-page-list-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> <!-- FILTER --> <div class=\"thf-page-list-filter-content\" *ngIf=\"filter\"> <div class=\"thf-page-list-filter-wrapper\"> <div class=\"thf-page-list-filter\"> <span class=\"thf-icon thf-icon-search thf-page-list-icon-search\" (click)=\"callActionFilter('action')\"> </span> <input type=\"text\" class=\"thf-input\" [ngModel]=\"parentRef[filter.ngModel]\" (ngModelChange)=\"changeModel($event)\" name=\"model\" [placeholder]=\"filter.placeholder\" (keypress)=\"onkeypress($event.keyCode)\"> </div> <div class=\"thf-page-list-filter-search\" *ngIf=\"filter.advancedAction\"> <a class=\"thf-page-list-filter-search-link\" (click)=\"callActionFilter('advancedAction')\"> Busca avançada </a> </div> </div> </div> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageListComponent.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: Renderer, },
        { type: Router, },
    ]; };
    return ThfPageListComponent;
}(ThfPageListBaseComponent));
export { ThfPageListComponent };
function ThfPageListComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfPageListComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfPageListComponent.ctorParameters;
    /** @type {?} */
    ThfPageListComponent.prototype.limitPrimaryActions;
    /** @type {?} */
    ThfPageListComponent.prototype.dropdownActions;
    /** @type {?} */
    ThfPageListComponent.prototype.isMobile;
    /** @type {?} */
    ThfPageListComponent.prototype.maxWidthMobile;
    /** @type {?} */
    ThfPageListComponent.prototype.parentRef;
    /** @type {?} */
    ThfPageListComponent.prototype.callFunction;
    /** @type {?} */
    ThfPageListComponent.prototype.viewRef;
    /** @type {?} */
    ThfPageListComponent.prototype.renderer;
    /** @type {?} */
    ThfPageListComponent.prototype.router;
}
