(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@angular/core'), require('@angular/router'), require('@angular/common/http'), require('@totvs/thf-core/components/thf-button-base'), require('@totvs/thf-core/utils/util'), require('@totvs/thf-core/components/thf-field-base'), require('@totvs/thf-core/utils'), require('@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file'), require('@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum'), require('@totvs/thf-core/components/thf-page-base'), require('@totvs/thf-core/components/thf-page-base/thf-page-base.component')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/forms', '@angular/core', '@angular/router', '@angular/common/http', '@totvs/thf-core/components/thf-button-base', '@totvs/thf-core/utils/util', '@totvs/thf-core/components/thf-field-base', '@totvs/thf-core/utils', '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file', '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum', '@totvs/thf-core/components/thf-page-base', '@totvs/thf-core/components/thf-page-base/thf-page-base.component'], factory) :
	(factory((global['thf-page'] = {}),global.common,global.forms,global.core,global.router,global.http,global.thfButtonBase,global.util,global.thfFieldBase,global.utils,global.thfUploadFile,global.thfUploadStatus_enum,global.thfPageBase,global.thfPageBase_component));
}(this, (function (exports,common,forms,core,router,http,thfButtonBase,util,thfFieldBase,utils,thfUploadFile,thfUploadStatus_enum,thfPageBase,thfPageBase_component) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-button-labs' title='Totvs Button Labs'>
 *  <file name='sample-thf-button-labs.component.html'> </file>
 *  <file name='sample-thf-button-labs.component.ts'> </file>
 * </example>
 *
 * <example name='thf-button-click' title='Eventos de click e botão desabilitado'>
 *  <file name='sample-thf-button-click.component.html'> </file>
 *  <file name='sample-thf-button-click.component.ts'> </file>
 *  <file name='sample-thf-button-click.component.css'> </file>
 * </example>
 *
 * <example name='thf-button' title='Tipos e tamanhos do thf-button' >
 *  <file name='sample-thf-button.component.html'> </file>
 * <file name='sample-thf-button.component.ts'> </file>
 * </example>
 */
var ThfButtonComponent = (function (_super) {
    __extends(ThfButtonComponent, _super);
    function ThfButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-button', template: "<button class=\"thf-button\" type=\"button\" id=\"{{ id }}\" [disabled]=\"disabled\" [ngClass]=\"{ 'thf-button--primary' : primary, 'thf-button--sm' : small }\" (click)=\"onClick()\"> <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span> {{ label }} </button> ",
                    providers: []
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonComponent.ctorParameters = function () { return []; };
    return ThfButtonComponent;
}(thfButtonBase.ThfButtonBaseComponent));

/**
 * \@description
 * Módulo do componente thf-button.
 */
var ThfButtonModule = (function () {
    function ThfButtonModule() {
    }
    ThfButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfButtonComponent],
                    exports: [ThfButtonComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfButtonModule.ctorParameters = function () { return []; };
    return ThfButtonModule;
}());

var ThfCalendarLangService = (function () {
    function ThfCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'en';
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    ThfCalendarLangService.prototype.setLanguage = function (lang) {
        if (lang) {
            if (lang.length >= 2) {
                lang = lang.toLowerCase().slice(0, 2);
                this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordMonth = function () {
        return this.wordMonth[this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWordYear = function () {
        return this.wordYear[this.lang];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarLangService.prototype.getMonth = function (month) {
        return this.months[month][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayMonths = function () {
        var /** @type {?} */ arrMonths = Array();
        for (var /** @type {?} */ i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarLangService.prototype.getWeedDays = function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    /**
     * @return {?}
     */
    ThfCalendarLangService.prototype.getArrayWeekDays = function () {
        var /** @type {?} */ arrWeekDays = Array();
        for (var /** @type {?} */ i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    ThfCalendarLangService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarLangService.ctorParameters = function () { return []; };
    return ThfCalendarLangService;
}());

var ThfCalendarService = (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = function (date) {
        var /** @type {?} */ startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        var /** @type {?} */ weeks = [];
        var /** @type {?} */ week = [];
        var /** @type {?} */ i = 0;
        var /** @type {?} */ date = this.weekStartDate(new Date(year, month, 1));
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = function (year, month) {
        var /** @type {?} */ getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var ThfCalendarComponent = (function () {
    /**
     * @param {?} elementRef
     * @param {?} thfCalendarService
     * @param {?} thfCalendarLangService
     */
    function ThfCalendarComponent(elementRef, thfCalendarService, thfCalendarLangService) {
        this.elementRef = elementRef;
        this.dateChange = new core.EventEmitter();
        this.submit = new core.EventEmitter();
        this.today = new Date();
        this.isMobile = util.isMobile;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "date", {
        /**
         * @return {?}
         */
        get: function () {
            return this._date;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                this._date = val;
                this.updateDate(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateStart;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateStart = new Date(year, month, day, 0, 0, 0);
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dateEnd;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            if (val) {
                var /** @type {?} */ year = val.getFullYear();
                var /** @type {?} */ month = val.getMonth();
                var /** @type {?} */ day = val.getDate();
                this._dateEnd = new Date(year, month, day, 23, 59, 59);
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.ngOnInit = function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
        this.init();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = function () {
        if (!this.date) {
            this.date = new Date();
        }
        this.selectDay();
        this.updateDate(this.date);
        if (this.isMobile()) {
            this.setMobileVisualization();
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = function () {
        var /** @type {?} */ thfCalendarOverlay = this.elementRef.nativeElement.querySelector('.thf-calendar-overlay');
        var /** @type {?} */ thfCalendar = this.elementRef.nativeElement.querySelector('.thf-calendar');
        thfCalendar.classList.add('thf-calendar-mobile');
        thfCalendarOverlay.classList.remove('thf-invisible');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentMonth = this.displayMonths[this.currentMonthNumber];
        this.currentYear = date.getFullYear();
        this.currentDay = date.getDate();
        this.currentDayOfWeek = this.displayWeedDays[date.getDay()];
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = function (year, month) {
        var /** @type {?} */ calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = function () {
        this.elDays.nativeElement.classList.remove('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.remove('thf-invisible');
        this.elYears.nativeElement.classList.add('thf-invisible');
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = function () {
        this.elDays.nativeElement.classList.add('thf-invisible');
        this.elMonths.nativeElement.classList.add('thf-invisible');
        this.elYears.nativeElement.classList.remove('thf-invisible');
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (day) {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} day
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = function (day) {
        if (this.equalsDate(day, this.date)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(day, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (this.dateInRange(day)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.dateInRange = function (date) {
        if (this._dateStart && !this._dateEnd) {
            return date >= this._dateStart ? true : false;
        }
        if (this._dateEnd && !this._dateStart) {
            return date <= this._dateEnd ? true : false;
        }
        if (this._dateStart && this._dateEnd) {
            return date >= this._dateStart && date <= this._dateEnd ? true : false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthBackgroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.getMonthForegroundColor = function (month) {
        return (month === this.displayMonthNumber) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearBackgroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getYearForegroundColor = function (year) {
        return (year === this.currentYear) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevYear = function () {
        this.updateDisplay(this.displayYear - 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextYear = function () {
        this.updateDisplay(this.displayYear + 1, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevDecade = function () {
        this.updateDisplay(this.displayYear - 10, this.displayMonthNumber);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextDecade = function () {
        this.updateDisplay(this.displayYear + 10, this.displayMonthNumber);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleção de mês
        if (this.lastDisplay === 'month') {
            this.selectMonth();
        }
        else {
            this.selectDay();
        }
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = function (date) {
        if (this.dateInRange(date)) {
            this.date = date;
            this.dateChange.emit(date);
            this.submit.emit(this.date);
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = function (year) {
        this.displayDecade = Array();
        var /** @type {?} */ i;
        if (year % 10 === 0) {
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        }
        else {
            // Descobre o início da década
            while (year % 10 !== 0) {
                year--;
            }
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
            // Adiciona todos os anos à década
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = function () {
        return this.thfCalendarLangService.getWordYear();
    };
    ThfCalendarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-calendar', template: "<div class=\"thf-calendar-overlay thf-invisible\"></div> <div class=\"thf-calendar\"> <div #days> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectMonth()\">{{ displayMonth }}</span> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\"> {{ day.toLowerCase() }} </div> </div> <div class=\"thf-calendar-content-list-day\"> <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\" [ngClass]=\"getDayBackgroundColor(day)\"> <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\"> {{ day.getDate() }} </span> </div> </div> </div> </div> <div #months> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevYear()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span> </div> <span (click)=\"onNextYear()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordMonth() }} </div> </div> <div class=\"thf-calendar-content-list-month\"> <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\" (click)=\"onSelectMonth(displayYear, i)\" [ngClass]=\"getMonthBackgroundColor(i)\"> <span [ngClass]=\"getMonthForegroundColor(i)\"> {{ month }} </span> </div> </div> </div> </div> <div #years> <div class=\"thf-calendar-nav\"> <span (click)=\"onPrevDecade()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span> <div class=\"thf-calendar-nav-title\"> {{ displayStartDecade }} - {{ displayFinalDecade }} </div> <span (click)=\"onNextDecade()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span> </div> <div class=\"thf-calendar-content\"> <div class=\"thf-calendar-labels\"> <div class=\"thf-calendar-label\"> {{ getWordYear() }} </div> </div> <div class=\"thf-calendar-content-list-year\"> <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\" (click)=\"onSelectYear(year, displayMonthNumber)\" [ngClass]=\"getYearBackgroundColor(year)\"> <span [ngClass]=\"getYearForegroundColor(year)\"> {{ year }} </span> </div> </div> </div> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: ThfCalendarService, },
        { type: ThfCalendarLangService, },
    ]; };
    ThfCalendarComponent.propDecorators = {
        'date': [{ type: core.Input, args: ['t-date',] },],
        'dateChange': [{ type: core.Output, args: ['t-dateChange',] },],
        'dateStart': [{ type: core.Input, args: ['t-start',] },],
        'dateEnd': [{ type: core.Input, args: ['t-end',] },],
        'locale': [{ type: core.Input, args: ['t-locale',] },],
        'submit': [{ type: core.Output, args: ['t-submit',] },],
        'elDays': [{ type: core.ViewChild, args: ['days', { read: core.ElementRef },] },],
        'elMonths': [{ type: core.ViewChild, args: ['months', { read: core.ElementRef },] },],
        'elYears': [{ type: core.ViewChild, args: ['years', { read: core.ElementRef },] },],
    };
    return ThfCalendarComponent;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-checkbox-group'>
 * <file name='sample-thf-checkbox-group.component.html'>
 *  <form #f="ngForm">
 *    <thf-checkbox-group
 *      name="checkboxDiasUteis"
 *      t-label="THF-CHECKBOX"
 *      t-help="thf-checkbox"
 *      t-required="true"
 *      [t-options]="diasSemana"
 *      (t-change)="change($event)"
 *      [(ngModel)]="modelDiasSemana">
 *    </thf-checkbox-group>
 *  </form>
 *  <br>
 *  <thf-button
 *    t-label="Checar dias úteis"
 *    (t-click)="modelDiasSemana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta']">
 *  </thf-button>
 *  <thf-button
 *    t-label="Checar dias corridos"
 *    (t-click)="modelDiasSemana = ['domingo','segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado']">
 *  </thf-button>
 *  <br>
 *  <pre>{{ modelDiasSemana | json }}</pre>
 * </file>
 * <file name='sample-thf-checkbox-group.component.ts'>
 *  import { Component, ViewChild } from '\@angular/core';
 *  import { ThfModule } from '\@totvs/thf-web';
 *  import { ThfCheckboxGroupOption } from '\@totvs/thf-core/components/thf-field-base/thf-checkbox-group-base/thf-checkbox-group.interface';
 *
 *  \@Component({
 *    selector: 'sample-thf-checkbox-group',
 *    templateUrl: './sample-thf-checkbox-group.component.html'
 *  })
 *
 *  export class SampleThfCheckboxGroupComponent {
 *    diasSemana: Array<ThfCheckboxGroupOption>;
 *    modelDiasSemana: Array<any>;
 *
 *    constructor() {
 *      this.diasSemana = [
 *        {
 *          value: 'domingo',
 *          label: 'Domingo'
 *        },
 *        {
 *          value: 'segunda',
 *          label: 'Segunda-feira'
 *        },
 *        {
 *          value: 'terca',
 *          label: 'Terça-feira',
 *        },
 *        {
 *          value: 'quarta',
 *          label: 'Quarta-feira',
 *          disabled: true
 *        },
 *        {
 *          value: 'quinta',
 *          label: 'Quinta-feira',
 *        },
 *        {
 *          value: 'sexta',
 *          label: 'Sexta-feira',
 *        },
 *        {
 *          value: 'sabado',
 *          label: 'Sábado'
 *        }
 *      ];
 *      this.modelDiasSemana = ['terca', 'quinta', 'sexta'];
 *    }
 *
 *    change(value) {
 *      console.log('Chamado evento de change', value);
 *    }
 *  }
 * </file>
 * </example>
 */
var ThfCheckboxGroupComponent = (function (_super) {
    __extends$1(ThfCheckboxGroupComponent, _super);
    function ThfCheckboxGroupComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfCheckboxGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-checkbox-group', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-checkbox-container\" #inp> <div class=\"thf-input-checkbox-inline\" *ngFor=\"let option of options\"> <input class=\"thf-input-checkbox\" type=\"checkbox\" [attr.name]=\"name + option.value\" [attr.id]=\"name + option.value\" [required]=\"required\" [disabled]=\"option.disabled === true\" [value]=\"option.value\" (click)=\"eventClick(name, option.value)\"> <label for=\"{{name + option.value}}\">{{option.label}}</label> </div> </div> </thf-field-container> ", styles: [".thf-input-checkbox-inline { display: inline-block; } .thf-input-checkbox { width: 20px; height: 20px; border-radius: 2px; box-shadow: inset 0 1px 8px 0 rgba(0, 0, 0, 0.1); border: solid 1px rgba(255, 255, 255, 0.6); } .thf-input-checkbox:checked { width: 20px; height: 20px; border-radius: 2px; } input[type=checkbox] { visibility: hidden; position: absolute; } input[type=checkbox] + label:before { width: 20px; height: 20px; margin-top: -2px; margin-right: 8px; display: inline-block; vertical-align: middle; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf; content: ' '; } input[type=checkbox]:checked + label:before { background-color: #0c9abe; box-shadow: none; color: white; font-family: 'TotvsIcon' !important; line-height: 18px; content: ' '; padding-left: 1px; } input[type=checkbox]:disabled + label:before { background-color: #edefef; border: solid 1px #b7bebf; } input[type=checkbox]:checked:disabled + label:before { color: #b7bebf; } input[type=checkbox] + label:before { border-radius: 2px; } label { height: 16px; font-family: NunitoSans; font-size: 16px; line-height: 1.5; text-align: left; color: #1e2526; margin: 0 6px 6px 6px; cursor: pointer; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCheckboxGroupComponent.ctorParameters = function () { return []; };
    ThfCheckboxGroupComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfCheckboxGroupComponent;
}(thfFieldBase.ThfCheckboxGroupBaseComponent));

var ThfCleanComponent = (function () {
    function ThfCleanComponent() {
        this.position = 1;
    }
    ThfCleanComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-clean', template: "<span class=\"thf-icon thf-icon-close thf-span-clean\" [ngClass]=\"{'thf-icon': true, 'thf-icon-close': true, 'thf-span-clean': true, 'thf-span-clean-pos1': position==1, 'thf-span-clean-pos2': position!=1}\"> </span> ", styles: [".thf-span-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; top: 19px; text-decoration: none; cursor: pointer; } .thf-span-clean-pos1 { right: 35px; } .thf-span-clean-pos2 { right: 70px; } .ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfCleanComponent.ctorParameters = function () { return []; };
    ThfCleanComponent.propDecorators = {
        'position': [{ type: core.Input },],
    };
    return ThfCleanComponent;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-datepicker' title='Totvs Datepicker'>
 *  <file name='sample-thf-datepicker.component.html'> </file>
 *  <file name='sample-thf-datepicker.component.ts'> </file>
 * </example>
 */
var ThfDatepickerComponent = (function (_super) {
    __extends$2(ThfDatepickerComponent, _super);
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?=} ngControl
     */
    function ThfDatepickerComponent(renderer, el, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.validators = [];
        _this.date = new Date();
        _this.hour = 'T00:00:00+00:00';
        _this.el = el;
        _this.clickListener = renderer.listenGlobal('document', 'click', function (event) { return _this.wasClickedOnPicker(event); });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngAfterViewInit = function () {
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
        if (this.clean) {
            this.inputEl.nativeElement.style.paddingRight = '30px';
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngOnDestroy = function () {
        this.clickListener();
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.togglePicker = function () {
        var /** @type {?} */ datepickerEl = this.dialogPicker.nativeElement;
        if (this.disabled) {
            return;
        }
        if (datepickerEl.classList.contains('thf-datepicker-invisible')) {
            var /** @type {?} */ scrollInit = document.body.scrollWidth;
            // Primeiro joga o Datepicker na posição inicial
            // Em seguida, verifica se vai estourar o tamanho da tela
            datepickerEl.style.marginLeft = '0px';
            datepickerEl.classList.remove('thf-datepicker-invisible');
            this.picker.init();
            // Se estourar o tamanho da tela, então alinha o Datepicker à direita do componente
            /* istanbul ignore if */
            if (document.body.scrollWidth !== scrollInit) {
                // Ignorado teste devido a necessidade de testar em uma tela menor
                datepickerEl.style.marginLeft = (this.inputEl.nativeElement.offsetWidth - 288) + 'px';
            }
        }
        else {
            datepickerEl.classList.add('thf-datepicker-invisible');
            this.inputEl.nativeElement.disabled = false;
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.dateSelected = function () {
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.callOnChange(utils.convertDateToISOExtended(this.date, this.hour));
        this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.wasClickedOnPicker = function (event) {
        /* istanbul ignore else */
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target)) {
            this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeyup = function ($event) {
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeypress = function ($event) {
        this.objMask.keypress($event);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeydown = function ($event) {
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasInvalidClass = function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.cleanInput = function () {
        this.inputEl.nativeElement.value = '';
        this.callOnChange('');
        this.date = undefined;
        if (this.required) {
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnBlur = function ($event) {
        if (!utils.isMobile()) {
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnChange = function ($event) {
        if (utils.isMobile()) {
            this.controlModel(this.inputEl.nativeElement.value);
            this.callOnChange(this.inputEl.nativeElement.value);
        }
        this.onchange.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnClick = function ($event) {
        var _this = this;
        if (utils.isMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(function () { return _this.togglePicker(); }, 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.formatToDate = function (value) {
        var /** @type {?} */ dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.writeValue = function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                var /** @type {?} */ dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else {
                this.hour = value.substring(10, 25);
                var /** @type {?} */ day = parseInt(value.substring(8, 10), 10);
                var /** @type {?} */ month = parseInt(value.substring(5, 7), 10) - 1;
                var /** @type {?} */ year = parseInt(value.substring(0, 4), 10);
                var /** @type {?} */ dateTemp = new Date(year, month, day);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasOverlayClass = function (element) {
        return element.classList.contains('thf-calendar-overlay');
    };
    ThfDatepickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-datepicker', template: "<div class=\"thf-input-datepicker\"> <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp type=\"text\" class=\"thf-input-elem\" (blur)=\"eventOnBlur($event)\" (change)=\"eventOnChange($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" position=\"2\" *ngIf=\"clean && !disabled\"></thf-clean> <span #iconDatepicker (click)=\"togglePicker()\" class=\"thf-icon thf-icon-calendar thf-span-datepicker\"></span> </div> <div class=\"thf-datepicker thf-datepicker-invisible\" #dialogPicker> <thf-calendar #picker [t-locale]=\"locale\" [t-end]=\"end\" [t-start]=\"start\" [(t-date)]=\"date\" (t-submit)=\"dateSelected()\"> </thf-calendar> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> </div> ", styles: [".thf-input-datepicker { max-width: 100%; } .thf-clean-arrow-mobile { z-index: 4; position: relative; width: 20px; float: right; height: 20px; background-color: white; bottom: 33px; right: 2px; } .thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-datepicker.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-datepicker.ng-invalid.ng-dirty .thf-input-elem { outline: none; border: solid 1px #c64840 !important; } thf-datepicker.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: absolute; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } .thf-datepicker { position: absolute; padding-top: 8px; z-index: 1000; } .thf-datepicker-invisible { display: none; } .thf-span-datepicker { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 18px; text-decoration: none; z-index: 100; cursor: pointer; } thf-datepicker.ng-invalid.ng-dirty .thf-span-datepicker { color: #c64840 !important; } "],
                    encapsulation: core.ViewEncapsulation.None
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDatepickerComponent.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    ThfDatepickerComponent.propDecorators = {
        'picker': [{ type: core.ViewChild, args: ['picker',] },],
        'dialogPicker': [{ type: core.ViewChild, args: ['dialogPicker', { read: core.ElementRef },] },],
        'iconDatepicker': [{ type: core.ViewChild, args: ['iconDatepicker', { read: core.ElementRef },] },],
        'inputEl': [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef },] },],
        'cleanEl': [{ type: core.ViewChild, args: ['clean', { read: core.ElementRef },] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'onKeyup': [{ type: core.HostListener, args: ['keyup', ['$event'],] },],
        'onKeypress': [{ type: core.HostListener, args: ['keypress', ['$event'],] },],
        'onKeydown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfDatepickerComponent;
}(thfFieldBase.ThfDatepickerBaseComponent));

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 * thf-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * \@example
 *  <example name='thf-email'>
 *  <file name='sample-thf-email.component.html'>
 *  <form #f="ngForm">
 *    <thf-email
 *    t-label="E-mail"
 *    t-help="Informe seu e-mail completo"
 *    t-placeholder="Informe seu e-mail completo"
 *    name="email"
 *    [(ngModel)]="email"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-email>
 *  </form>
 *  </file>
 *  <file name='sample-thf-email.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-email',
 *     templateUrl: './sample-thf-email.component.html'
 *   })
 *   export class SampleThfEmailComponent {
 *
 *     email = 'fulano\@totvs.com.br';
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfEmailComponent = (function (_super) {
    __extends$3(ThfEmailComponent, _super);
    function ThfEmailComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indica a quantidade máxima de caracteres que o campo aceita
         */
        _this.maxlength = 254;
        _this.type = 'email';
        _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
        _this.mask = '';
        return _this;
    }
    Object.defineProperty(ThfEmailComponent.prototype, "setMaxlength", {
        /**
         * @param {?} maxlength
         * @return {?}
         */
        set: function (maxlength) {
            if (!isNaN(parseInt(maxlength, 10))) {
                this.maxlength = parseInt(maxlength, 10);
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfEmailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-email', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfEmailComponent.ctorParameters = function () { return []; };
    ThfEmailComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMaxlength': [{ type: core.Input, args: ['t-maxlength',] },],
    };
    return ThfEmailComponent;
}(thfFieldBase.ThfInputBaseComponent));

/**
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
var ThfFieldContainerComponent = (function () {
    function ThfFieldContainerComponent() {
        this.optional = {
            pt: '(Opcional)',
            en: '(Optional)',
            es: '(Opcional)'
        };
    }
    /**
     * @return {?}
     */
    ThfFieldContainerComponent.prototype.getOptional = function () {
        var /** @type {?} */ lang = (navigator.language) ? navigator.language.toLowerCase().slice(0, 2) : 'pt';
        return (this.optional[lang]) ? this.optional[lang] : '';
    };
    /**
     * @return {?}
     */
    ThfFieldContainerComponent.prototype.ngOnInit = function () {
    };
    ThfFieldContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-field-container', template: " <div style=\"display:block\"> <span class=\"thf-label\">{{label}}</span> <span *ngIf=\"opcional\" class=\"thf-opcional\">{{getOptional()}}</span> <br> <span *ngIf=\"help!==''\" class=\"thf-label-help\">{{help}}</span> <ng-content></ng-content> </div> ", styles: [".thf-label { font-size: 14px; line-height: 2; text-align: left; color: #4a5c60; font-family: 'NunitoSans-Bold'; } .thf-opcional { font-size: 12px; line-height: 2; color: #4a5c60; font-family: NunitoSans; float: right !important; text-align: bottom; } .thf-label-help { font-size: 12px; line-height: 1.67; text-align: left; color: #4a5c60; font-family: NunitoSans; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfFieldContainerComponent.ctorParameters = function () { return []; };
    ThfFieldContainerComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'opcional': [{ type: core.Input, args: ['t-opcional',] },],
    };
    return ThfFieldContainerComponent;
}());

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-input-labs' title='Totvs Input Labs' >
 *  <file name='sample-thf-input-labs.component.html'> </file>
 *  <file name='sample-thf-input-labs.component.ts'> </file>
 * </example>
 */
var ThfInputComponent = (function (_super) {
    __extends$4(ThfInputComponent, _super);
    function ThfInputComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-input', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInputComponent.ctorParameters = function () { return []; };
    ThfInputComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfInputComponent;
}(thfFieldBase.ThfInputBaseComponent));

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 *
 * \@description
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *  <example name='thf-number'>
 *  <file name='sample-thf-number.component.html'>
 *  <form #f="ngForm">
 *    <thf-number
 *    t-label="Idade"
 *    t-help="Você precisa ser maior de idade"
 *    t-placeholder="Informe sua idade"
 *    name="idade"
 *    [(ngModel)]="idade"
 *    t-min="18"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-number>
 *  </form>
 *  </file>
 *  <file name='sample-thf-number.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-number',
 *     templateUrl: './sample-thf-number.component.html'
 *   })
 *   export class SampleThfNumberComponent {
 *
 *     idade = 40;
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfNumberComponent = (function (_super) {
    __extends$5(ThfNumberComponent, _super);
    function ThfNumberComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'number';
        /**
         * Intervalo
         */
        _this.step = '';
        return _this;
    }
    Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
        /**
         * @param {?} min
         * @return {?}
         */
        set: function (min) {
            if (!isNaN(parseInt(min, 10))) {
                this.min = parseInt(min, 10);
                // Atualiza Validador do campo
                this.validators['min'] = this.getValidatorMin();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
        /**
         * @param {?} max
         * @return {?}
         */
        set: function (max) {
            if (!isNaN(parseInt(max, 10))) {
                this.max = parseInt(max, 10);
                // Atualiza Validador do campo
                this.validators['max'] = this.getValidatorMax();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.ngOnInit = function () {
        this.validators['min'] = this.getValidatorMin();
        this.validators['max'] = this.getValidatorMax();
        this._onInit();
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMin = function () {
        return (this.min) ? forms.Validators.min(this.min) : null;
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMax = function () {
        return (this.max) ? forms.Validators.max(this.max) : null;
    };
    ThfNumberComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-number', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" [attr.name]=\"name\" [attr.min]=\"min\" [attr.max]=\"max\" [attr.step]=\"step\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfNumberComponent.ctorParameters = function () { return []; };
    ThfNumberComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMin': [{ type: core.Input, args: ['t-min',] },],
        'setMax': [{ type: core.Input, args: ['t-max',] },],
        'step': [{ type: core.Input, args: ['t-step',] },],
    };
    return ThfNumberComponent;
}(thfFieldBase.ThfInputBaseComponent));

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *  <example name='thf-radio-group'>
 *  <file name='sample-thf-radio-group.component.html'>
 *  <form #f="ngForm">
 *    <thf-radio-group
 *      name="genderName"
 *      t-required
 *      t-label="Gênero"
 *      [t-options]="genderOptions"
 *      (t-change)="changeGender($event)"
 *      [(ngModel)]="gender">
 *    </thf-radio-group>
 *
 *    <thf-radio-group
 *      name="interestName"
 *      t-required
 *      t-label="Área de interesse"
 *      t-help="Apenas um interesse poderá ser selecionado"
 *      [t-options]="interestOptions"
 *      [(ngModel)]="interest">
 *    </thf-radio-group>
 *
 *    <thf-button
 *      t-label='Enviar'
 *      [t-disabled]='!f.form.valid'>
 *    </thf-button>
 *  </form>
 *  </file>
 *  <file name='sample-thf-radio-group.component.ts'>
 * import { Component } from '\@angular/core';
 * import { ThfRadioGroupOption } from '\@totvs/thf-core/components/thf-field-base/thf-radio-group-base/thf-radio-group.interface';
 *
 * \@Component({
 *   selector: 'sample-thf-radio-group',
 *   templateUrl: './sample-thf-radio-group.component.html'
 * })
 * export class SampleThfRadioGroupComponent {
 *
 *   gender = '';
 *
 *   genderOptions: Array<ThfRadioGroupOption> = [
 *     { label: 'Masculino', value: 'male' },
 *     { label: 'Feminino', value: 'female' }
 *   ];
 *
 *   interest = 'arts';
 *
 *   interestOptions: Array<ThfRadioGroupOption> = [
 *     { label: 'Livros', value: 'books' },
 *     { label: 'Filmes', value: 'movies' },
 *     { label: 'Músicas', value: 'music' },
 *     { label: 'Artes', value: 'arts' },
 *     { label: 'Esportes', value: 'sports', disabled: true }
 *   ];
 *
 *   changeGender(value) {
 *     console.log('O gênero foi alterado: ', value);
 *   }
 *
 *   constructor() { }
 * }
 *
 *  </file>
 * </example>
 */
var ThfRadioGroupComponent = (function (_super) {
    __extends$6(ThfRadioGroupComponent, _super);
    function ThfRadioGroupComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfRadioGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-radio-group', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-input-radio-container\" #inp> <div *ngFor=\"let option of options\" class=\"thf-input-radio-outline\"> <input class=\"thf-input-radio\" type=\"radio\" (keyup)=\"keyup()\" [attr.name]=\"name\" [required]=\"required\" [disabled]=\"option.disabled === true || disabled\" [readonly]=\"readonly\" [value]=\"option.value\" [checked]=\"selectCheckedValue === option.value\"> <label [for]=\"name\" class=\"thf-input-radio-label\" (click)=\"eventClick(option.value, option.disabled === true || disabled)\">{{option.label}} </label> </div> </div> </thf-field-container> ", styles: [".thf-input-radio { -webkit-appearance: none; -moz-appearance: none; position: absolute; width: 0px; height: 0px; margin: 0; outline: none; border: 1px solid transparent; background-color: transparent; } .thf-input-radio-label { height: 16px; font-family: NunitoSans; font-size: 16px; line-height: 1.5; text-align: left; color: #1e2526; margin: 0 6px 6px 6px; cursor: pointer; } .thf-input-radio + .thf-input-radio-label:before { width: 18px; height: 18px; margin-top: -2px; margin-right: 8px; display: inline-block; vertical-align: middle; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf; border-radius: 50%; content: ' '; } .thf-input-radio:checked + .thf-input-radio-label:before { background-color: #0c9abe; border: 1px solid #0c9abe; box-shadow: none; color: white; font-family: 'TotvsIcon' !important; line-height: 18px; content: '\e937'; font-weight: bold; padding-left: 1px; width: 17px; } .thf-input-radio:focus + .thf-input-radio-label:before { border: solid 1px #0c9abe !important; } .thf-input-radio:disabled + .thf-input-radio-label:before { background-color: #edefef; border: solid 1px #b7bebf; } .thf-input-radio:checked:disabled + .thf-input-radio-label:before { color: #b7bebf; width: 17px; } .thf-input-radio-container { padding-top: 10px; display: block; } .thf-input-radio-outline { padding-bottom: 20px; } "],
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfRadioGroupComponent.ctorParameters = function () { return []; };
    ThfRadioGroupComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
    };
    return ThfRadioGroupComponent;
}(thfFieldBase.ThfRadioGroupBaseComponent));

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select" title="Totvs Select dinâmicos">
 *   <file name="sample-thf-select.component.html"> </file>
 *   <file name="sample-thf-select.component.ts"> </file>
 * </example>
 */
var ThfSelectComponent = (function (_super) {
    __extends$7(ThfSelectComponent, _super);
    /**
     * @param {?} element
     * @param {?} changeDetector
     * @param {?} renderer
     * @param {?=} ngControl
     */
    function ThfSelectComponent(element, changeDetector, renderer, ngControl) {
        var _this = _super.call(this, element, changeDetector, ngControl) || this;
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.isNative = false;
        renderer.listenGlobal('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        return _this;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = function ($event) {
        // Seleciona os itens com as teclas "up" e "down"
        if (!this.open && ($event.keyCode === 40 || $event.keyCode === 38)) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if ($event.keyCode === 13 || $event.keyCode === 32) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && $event.keyCode === 9) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngAfterViewInit = function () {
        this.isNative = utils.checkIsNativeIOS();
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = function () {
        this.selectElement.nativeElement.focus();
        this.selectIcon = this.open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.options && this.options.length) {
            this.selector('.thf-select-container').classList.toggle('thf-select-show');
        }
        this.open = !this.open;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = function (value) {
        var _this = this;
        if (value && this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                var /** @type {?} */ index = this.options.indexOf(optionFound);
                this.scrollTo(index);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = (optionFound.label);
            }
            else if (utils.validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.callModelChange(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = function (option) {
        this.selectedValue = option.value;
        this.selectElement.nativeElement.value = option.value;
        this.callModelChange(option.value);
        this.displayValue = option.label;
        this.onChange();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.callModelChange = function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollTo = function (index) {
        var /** @type {?} */ ul = this.element.nativeElement.querySelector('ul.thf-select-content');
        var /** @type {?} */ heightLiByIndex = index * 44; // 44 tamanho de cada li no UL;
        if (this.oldValue > heightLiByIndex) {
            this.oldValue = heightLiByIndex;
            ul.scrollTop -= 44;
            return;
        }
        this.oldValue = heightLiByIndex;
        ul.scrollTop += 44;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    ThfSelectComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-select', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <select #select [attr.name]=\"name\" [required]=\"required\" [disabled]=\"disabled\" class=\"thf-select\" (change)=\"onSelectChange($event.target.value)\"> <option *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> {{option?.label}} </option> </select> <div class=\"thf-select-container\"> <div #selectButton class=\"thf-select-button\" [ngClass]=\"{'thf-select-button-disabled' : disabled}\" (click)=\"toggleButton()\"> <span>{{ displayValue || placeholder }}</span> <span #icon class=\"thf-select-icon thf-icon {{selectIcon}}\"></span> </div> <ul class=\"thf-select-content\" [ngClass]=\"{'thf-invisible': isNative}\"> <li *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\" [class.thf-select-item-selected]=\"selectedValue == option.value\"> <a class=\"thf-select-item\"> {{option?.label}}</a> </li> </ul> </div> <div class=\"thf-field-error\"> <!-- Adicionado para corrigir o layout, existe outro item para acertar as mensagens de erro --> <div *ngIf=\"false\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> ",
                    encapsulation: core.ViewEncapsulation.None,
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ChangeDetectorRef, },
        { type: core.Renderer, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    ThfSelectComponent.propDecorators = {
        'selectElement': [{ type: core.ViewChild, args: ['select', { read: core.ElementRef },] },],
        'iconElement': [{ type: core.ViewChild, args: ['icon', { read: core.ElementRef },] },],
        'selectButtonElement': [{ type: core.ViewChild, args: ['selectButton', { read: core.ElementRef },] },],
        'onKeydown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfSelectComponent;
}(thfFieldBase.ThfSelectBaseComponent));

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-switch-labs" title="Totvs Switch Labs">
 *   <file name="sample-thf-switch-labs.component.html"> </file>
 *   <file name="sample-thf-switch-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-switch" title="Totvs Switch e seus estados">
 *   <file name="sample-thf-switch.component.html"> </file>
 *   <file name="sample-thf-switch.component.ts"> </file>
 * </example>
 */
var ThfSwitchComponent = (function (_super) {
    __extends$8(ThfSwitchComponent, _super);
    function ThfSwitchComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getLabelPosition = function () {
        switch (this.labelPosition) {
            case thfFieldBase.ThfSwitchLabelPosition.Left: return 'left';
            case thfFieldBase.ThfSwitchLabelPosition.Right: return 'right';
            default: return 'right';
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getSwitchPosition = function () {
        switch (this.labelPosition) {
            case thfFieldBase.ThfSwitchLabelPosition.Left: return 'right';
            case thfFieldBase.ThfSwitchLabelPosition.Right: return 'left';
            default: return 'left';
        }
    };
    ThfSwitchComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-switch', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div [attr.name]=\"name\" class=\"thf-switch\"> <div class=\"thf-switch-container thf-clickable\" [class.thf-switch-container-right]=\"getSwitchPosition() === 'right'\" [class.thf-switch-container-on]=\"switchValue === true && !disabled\" [class.thf-switch-container-off]=\"switchValue === false && !disabled\" [class.thf-switch-container-disabled]=\"disabled\" (click)=\"eventClick()\"> <div class=\"thf-switch-button\" [class.thf-switch-button-on]=\"switchValue === true\" [class.thf-switch-button-off]=\"switchValue === false\" [class.thf-switch-button-disabled]=\"disabled\"> <span class=\"thf-icon thf-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span> </div> </div> <span class=\"thf-switch-label thf-clickable thf-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\"> {{ switchValue === true ? labelOn : labelOff }} </span> </div> </thf-field-container> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSwitchComponent.ctorParameters = function () { return []; };
    return ThfSwitchComponent;
}(thfFieldBase.ThfSwitchBaseComponent));

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ThfUploadService = (function (_super) {
    __extends$10(ThfUploadService, _super);
    function ThfUploadService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfUploadService.decorators = [
        { type: core.Injectable },
    ];
    /**
     * @nocollapse
     */
    ThfUploadService.ctorParameters = function () { return []; };
    return ThfUploadService;
}(thfFieldBase.ThfUploadBaseService));

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *   <file name="sample-thf-upload-labs.component.html"> </file>
 *   <file name="sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 */
var ThfUploadComponent = (function (_super) {
    __extends$9(ThfUploadComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} uploadService
     * @param {?=} ngControl
     */
    function ThfUploadComponent(elementRef, uploadService, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.elementRef = elementRef;
        _this.uploadService = uploadService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.onClick = function () {
        var /** @type {?} */ input = this.elementRef.nativeElement.querySelector('input');
        input.click();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfUploadComponent.prototype.onFileChange = function (event) {
        var /** @type {?} */ files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel(this.currentFiles);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateModel = function (files) {
        if (files && files.length === 0) {
            return this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
        }
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadFiles = function (files) {
        var _this = this;
        var /** @type {?} */ filesFiltered = files.filter(function (file) {
            return file.status !== thfUploadStatus_enum.ThfUploadStatus.Uploaded;
        });
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, porcent) {
            // UPLOADING
            _this.uploadingHandler(file, porcent);
        }, function (file, eventResponse) {
            // SUCCESS
            _this.successHandler(file);
            _this.onSuccess.emit(eventResponse);
        }, function (file, eventError) {
            // Error
            _this.errorHandler(file);
            _this.onError.emit(eventError);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUpload = function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUploadHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    };
    /**
     * @param {?} file
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadingHandler = function (file, porcent) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, porcent, true);
        this.setUploadStatus(file, 'thf-upload-progress', porcent);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.successHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.errorHandler = function (file) {
        file.status = thfUploadStatus_enum.ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    };
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.isStatusFile = function (status, file) {
        return file.status === thfUploadStatus_enum.ThfUploadStatus[status];
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.hasAnyFileUploading = function (files) {
        if (files && files.length) {
            return files.some(function (file) { return file.status === thfUploadStatus_enum.ThfUploadStatus.Uploading; });
        }
        return false;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.getThfIcon = function (file) {
        switch (file.status) {
            case thfUploadStatus_enum.ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case thfUploadStatus_enum.ThfUploadStatus.Error:
                return 'thf-icon-close';
            case thfUploadStatus_enum.ThfUploadStatus.None:
                return 'thf-icon-info';
            case thfUploadStatus_enum.ThfUploadStatus.Uploading:
            default:
                return '';
        }
    };
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.setUploadStatus = function (file, className, porcent) {
        var /** @type {?} */ uid = file.uid;
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (porcent > 5 && file.status !== thfUploadStatus_enum.ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    };
    /**
     * @param {?} uid
     * @param {?} porcent
     * @param {?} isShow
     * @return {?}
     */
    ThfUploadComponent.prototype.setProgressStatus = function (uid, porcent, isShow) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ divProgress = divStatus.querySelector('.thf-upload-progress-status');
        var /** @type {?} */ isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', "display: " + isDisplay + ";");
        divProgress.setAttribute('style', "width: " + porcent + "%;");
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFile = function (file) {
        var /** @type {?} */ index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    ThfUploadComponent.prototype.getFileSize = function (size) {
        var /** @type {?} */ kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadComponent.prototype.writeValue = function (model) {
        if (model) {
            this.currentFiles = this.parseFiles(model);
        }
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.addFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.parseFiles = function (files) {
        var /** @type {?} */ thfUploadFiles = this.currentFiles || [];
        var /** @type {?} */ filesLength = files.length;
        for (var /** @type {?} */ i = 0; i < filesLength; i++) {
            var /** @type {?} */ file = new thfUploadFile.ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                if (this.isMultiple) {
                    thfUploadFiles.push(file);
                }
                else {
                    thfUploadFiles.splice(0, 1, file);
                }
            }
        }
        return thfUploadFiles;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.checkRestrictions = function (file) {
        var /** @type {?} */ restrictions = this.fileRestrictions;
        if (restrictions) {
            var /** @type {?} */ allowedExtensions = restrictions.allowedExtensions;
            var /** @type {?} */ minFileSize = restrictions.minFileSize || 0;
            var /** @type {?} */ maxFileSize = restrictions.maxFileSize || 31457280; // 30MB
            var /** @type {?} */ isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            var /** @type {?} */ isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @param {?} extension
     * @param {?} allowedExtensions
     * @return {?}
     */
    ThfUploadComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
        return allowedExtensions.some(function (ext) {
            return ext.toLowerCase() === extension;
        });
    };
    ThfUploadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-upload', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-upload\"> <div (click)=\"onClick()\"> <input type=\"file\" [name]=\"name\" [id]=\"id\" (change)=\"onFileChange($event)\" [accept]=\"fileRestrictions?.allowedExtensions\" [multiple]=\"isMultiple\" class=\"thf-upload-input\" [disabled]=\"hasAnyFileUploading(currentFiles) || !url || disabled\"> <div for=\"file\" class=\"thf-upload-button\" [ngClass]=\"{'thf-upload-button-disabled': hasAnyFileUploading(currentFiles) || !url || disabled}\"> Selecionar arquivo </div> </div> <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\"> <div class=\"thf-upload-progress-status\"></div> <div class=\"thf-upload-filename-foreground\"> <div class=\"thf-upload-filename\"> <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div (click)=\"removeFile(file)\" *ngIf=\"isStatusFile('None', file)\"> <span class=\"thf-upload-action\"> Excluir </span> </div> <div (click)=\"stopUpload(file)\" *ngIf=\"isStatusFile('Uploading', file)\"> <span class=\"thf-upload-action\"> Cancelar </span> </div> <div (click)=\"uploadFiles([file])\" *ngIf=\"isStatusFile('Error', file)\"> <span class=\"thf-upload-action\"> Tentar Novamente </span> </div> </div> </div> <thf-button *ngIf=\"!autoUpload && currentFiles?.length > 0\" [t-disabled]=\"hasAnyFileUploading(currentFiles)\" t-primary=\"true\" t-label=\"Iniciar envio\" (t-click)=\"uploadFiles(currentFiles)\"> </thf-button> </div> </thf-field-container> ",
                    providers: [ThfUploadService]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfUploadComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: ThfUploadService, },
        { type: forms.NgControl, decorators: [{ type: core.Optional },] },
    ]; };
    return ThfUploadComponent;
}(thfFieldBase.ThfUploadBaseComponent));

var __extends$11 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@description
 * thf-url é um input específico para receber URL, com o pattern já configurado.
 *
 * \@example
 *  <example name='thf-url'>
 *  <file name='sample-thf-url.component.html'>
 *  <form #f="ngForm">
 *    <thf-url
 *    t-label="Página"
 *    t-help="Informe o site da sua empresa"
 *    t-placeholder="Site"
 *    name="pagina"
 *    [(ngModel)]="pagina"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-url>
 *  </form>
 *  </file>
 *  <file name='sample-thf-url.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *     selector: 'sample-thf-url',
 *     templateUrl: './sample-thf-url.component.html'
 *   })
 *   export class SampleThfUrlComponent {
 *
 *     pagina = 'http://www.totvs.com.br';
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfUrlComponent = (function (_super) {
    __extends$11(ThfUrlComponent, _super);
    function ThfUrlComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indica a quantidade máxima de caracteres que o campo aceita
         */
        _this.maxlength = 254;
        _this.type = 'url';
        _this.pattern = '^((https|http):\\/\\/)?' +
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' +
            '((\\d{1,3}\\.){3}\\d{1,3}))' +
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' +
            '(\\?[;&a-z\\d%_.~+=-]*)?' +
            '(\\#[-a-z\\d_]*)?$';
        _this.mask = '';
        return _this;
    }
    Object.defineProperty(ThfUrlComponent.prototype, "setMaxlength", {
        /**
         * @param {?} maxlength
         * @return {?}
         */
        set: function (maxlength) {
            if (!isNaN(parseInt(maxlength, 10))) {
                this.maxlength = parseInt(maxlength, 10);
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfUrlComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-url', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfUrlComponent.ctorParameters = function () { return []; };
    ThfUrlComponent.propDecorators = {
        'label': [{ type: core.Input, args: ['t-label',] },],
        'help': [{ type: core.Input, args: ['t-help',] },],
        'setMaxlength': [{ type: core.Input, args: ['t-maxlength',] },],
    };
    return ThfUrlComponent;
}(thfFieldBase.ThfInputBaseComponent));

/**
 * \@description
 *
 * Módulo dos componentes thf-datepicker, thf-email, thf-input, thf-number, thf-radio-group, thf-upload e thf-url
 */
var ThfFieldModule = (function () {
    function ThfFieldModule() {
    }
    ThfFieldModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        http.HttpClientModule,
                        ThfButtonModule
                    ],
                    exports: [
                        ThfCheckboxGroupComponent,
                        ThfDatepickerComponent,
                        ThfEmailComponent,
                        ThfInputComponent,
                        ThfNumberComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSwitchComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    declarations: [
                        ThfCalendarComponent,
                        ThfCheckboxGroupComponent,
                        ThfCleanComponent,
                        ThfDatepickerComponent,
                        ThfEmailComponent,
                        ThfFieldContainerComponent,
                        ThfInputComponent,
                        ThfNumberComponent,
                        ThfRadioGroupComponent,
                        ThfSelectComponent,
                        ThfSwitchComponent,
                        ThfUploadComponent,
                        ThfUrlComponent
                    ],
                    providers: [
                        ThfCalendarService,
                        ThfCalendarLangService
                    ],
                    entryComponents: [
                        ThfCalendarComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfFieldModule.ctorParameters = function () { return []; };
    return ThfFieldModule;
}());

/**
 * \@description
 * O componente **thf-dropdown** pode ser utilizado como um agrupador de ações.
 *
 * \@example
 * <example name='thf-dropdown'>
 *  <file name='sample-thf-dropdown.component.html'>
 *    <thf-dropdown
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *    <thf-dropdown
 *      [t-disabled]="disabled"
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *     <thf-dropdown
 *      [t-label]="label">
 *     </thf-dropdown>
 *
 * </file>
 *
 *  <file name='sample-thf-dropdown.component.ts'>
 *    import { Component } from '\@angular/core';
 *    import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-dropdown',
 *      templateUrl: './sample-thf-dropdown.component.html'
 *   })
 *   export class SampleThfDropdownComponent {
 *
 *       public disabled = true;
 *       public label  = 'Outras ações';
 *       public actions: Array<{}> = [
 *         {label: 'Adicionar', action: this.add, icon: 'thf-icon-plus'},
 *         {label: 'Clonar', action: this.clone, icon: 'thf-icon-copy', disabled: true},
 *         {label: 'Totvs', url: 'http://www.google.com', icon: 'thf-icon-document'}
 *       ];
 *
 *      public add(): void {
 *          console.log('Adicionar');
 *      }
 *
 *      public clone(): void {
 *          console.log('Clonar');
 *      }
 *   }
 *  </file>
 * </example>
 */
var ThfDropdownComponent = (function () {
    /**
     * @param {?} _element
     * @param {?} _view
     * @param {?} _router
     */
    function ThfDropdownComponent(_element, _view, _router) {
        this._element = _element;
        this._view = _view;
        this._router = _router;
        this._open = false;
        this.icon = 'thf-icon-arrow-down';
        this._parentRef = _view['_view']['component'];
        this._addListenerCloseDropdown();
    }
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype.toggleButton = function () {
        this.icon = this._open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.actions && this.actions.length) {
            this._selector('.dropdown').classList.toggle('t-show');
        }
        this._open = !this._open;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfDropdownComponent.prototype.onClick = function (item) {
        if (item.url) {
            var /** @type {?} */ url = item.url, /** @type {?} */ regexUrl = /(http(s?))\:\/\//gi;
            if (regexUrl.test(url)) {
                window.open(url, '_blank');
            }
            else {
                this._router.navigate([url]);
            }
        }
        else if (item.action) {
            this._callAction(item.action);
        }
    };
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype._addListenerCloseDropdown = function () {
        var /** @type {?} */ _this = this;
        window.onclick = function (event) {
            var /** @type {?} */ value = event.target && event.target.getAttribute('class');
            if (value !== 'button-dropdown' && _this._open) {
                _this.toggleButton();
            }
        };
    };
    /**
     * @param {?} _function
     * @return {?}
     */
    ThfDropdownComponent.prototype._callAction = function (_function) {
        this._callActionOfContext(_function, this._parentRef);
    };
    /**
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    ThfDropdownComponent.prototype._callActionOfContext = function (_function, _context) {
        if (this._isTypeof(_function, 'function')) {
            _function.call(_context);
        }
        else {
            _context[_function]();
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfDropdownComponent.prototype._selector = function (query) {
        return this._element.nativeElement.querySelector(query);
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfDropdownComponent.prototype._isTypeof = function (object, type) {
        return typeof object === type;
    };
    ThfDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-dropdown', template: "<div class=\"dropdown\"> <div class=\"button-dropdown\" [ngClass]=\"{'disabled' : disabled}\" (click)=\"toggleButton()\"> {{label}} <div class=\"hidden-xs icon-dropdown thf-icon {{icon}}\" (click)=\"toggleButton()\"></div> </div> <ul class=\"dropdown-content\"> <li *ngFor=\"let action of actions\"> <a (click)=\"onClick(action)\" [ngClass]=\"{'disabled' : action.disabled}\"> {{action?.label}} </a> </li> </ul> </div> ", styles: [".dropdown { position: relative; display: inline-block; width: inherit; } .dropdown.t-show > .button-dropdown { border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-bottom: none; } .dropdown.t-show > .dropdown-content { display: block !important; } div.button-dropdown { cursor: pointer; line-height: 24px; font-size: 16px; height: 44px; border-radius: 3px; padding: 9px 38px 9px 16px; background-color: #ffffff; border: solid 1px #0c9abe; color: #0c9abe; } div.button-dropdown > span { padding-top: 3px; } div.button-dropdown.disabled { background-color: #ffffff; border: solid 1px #4a5c60; opacity: 0.4; } div.button-dropdown:hover { color: #0a7b98; border: solid 1px #0a7b98; } ul.dropdown-content { display: none; position: absolute; background-color: #ffffff; border: solid 1px #0c9abe; border-top: none; z-index: 1; width: 100%; max-height: 175px; overflow-y: auto; list-style-type: none; padding: 0; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; } ul.dropdown-content > li > a { color: #0c9abe; padding: 10px 16px; text-decoration: none; display: block; cursor: pointer; word-wrap: break-word; line-height: 1.5; } ul.dropdown-content > li > a:hover { color: #0a7b98; } ul.dropdown-content > li > a:active { color: #075c72; } .disabled { pointer-events: none; color: #b7bebf !important; } .icon-dropdown { font-size: 24px; right: 10px; top: 10px; position: absolute; } ::-webkit-scrollbar { width: 7px; } ::-webkit-scrollbar-track { display: none; } ::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #0c9abe; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
        { type: router.Router, },
    ]; };
    ThfDropdownComponent.propDecorators = {
        'disabled': [{ type: core.Input, args: ['t-disabled',] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
    };
    return ThfDropdownComponent;
}());

/**
 * \@description
 * Módulo do componente thf-dropdown.
 */
var ThfDropdownModule = (function () {
    function ThfDropdownModule() {
    }
    ThfDropdownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDropdownComponent],
                    exports: [ThfDropdownComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownModule.ctorParameters = function () { return []; };
    return ThfDropdownModule;
}());

var __extends$12 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-default-labs' title='Sample Labs Totvs Page Default' >
 *  <file name='sample-thf-page-default-labs.component.html'>
 *  <thf-page-default [t-title]="title" [t-actions]="actions">
 *
 *    <thf-input t-label="Título do thf-page" name="title" [(ngModel)]="title" ngDefaultControl>
 *    </thf-input>
 *
 *    <form  #f="ngForm">
 *      <h4>Adicionar novos botões</h4>
 *      <br>
 *
 *      <thf-input t-label="Título do botão de ação" name="title" [(ngModel)]="button.label" t-required>
 *      </thf-input>
 *
 *      <thf-select name="iconButton" [(ngModel)]="button.icon" t-label="Selecione o tipo de ícone do botão"
 *        [t-options]="iconList" t-required>
 *      </thf-select>
 *
 *      <thf-button t-label='Adicionar botão' (t-click)="newButton()" [t-disabled]='!button.label || !button.icon'>
 *      </thf-button>
 *
 *    </form>
 *  </thf-page-default>
 *  </file>
 *  <file name='sample-thf-page-default-labs.component.ts'>
 *  import { Component } from '\@angular/core';
 *  import { FormGroup, FormControl, FormBuilder } from '\@angular/forms';
 *
 *  import { ThfNotificationService } from '\@totvs/thf-web/services/thf-notification/thf-notification.service';
 *  import { ThfToasterOrientation } from '\@totvs/thf-core/services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum';
 *
 *  \@Component({
 *    selector: 'sample-thf-page-default-labs',
 *    templateUrl: './sample-thf-page-default-labs.component.html'
 *  })
 *  export class SampleThfPageDefaultLabsComponent {
 *    title = 'THF Page Default Labs';
 *    button = {
 *      label: undefined,
 *      action: undefined,
 *      icon: undefined
 *    };
 *
 *    iconList = [
 *      { value: 'thf-icon-copy', label: 'Copiar' },
 *      { value: 'thf-icon-delete', label: 'Deletar' },
 *      { value: 'thf-icon-logo-totvs', label: 'Totvs' },
 *    ];
 *
 *    actions: Array<{}> = [
 *      { label: 'Compartilhar', action: this.share, icon: 'thf-icon-share' }
 *    ];
 *
 *    constructor(private thfNotification: ThfNotificationService) {}
 *
 *    newButton() {
 *      switch (this.button.icon) {
 *        case 'thf-icon-copy':
 *          this.button.action = this.copy;
 *          break;
 *        case 'thf-icon-delete':
 *          this.button.action = this.delete;
 *          break;
 *        case 'thf-icon-logo-totvs':
 *          this.button.action = this.totvs;
 *      }
 *
 *      this.actions.push(Object.assign({}, this.button));
 *    }
 *
 *    copy () {
 *      const message = 'Item copiado!';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    delete() {
 *      const message = 'Item #3 deletado';
 *      const type = 'warning';
 *      this.showMessage(message, type);
 *    }
 *
 *    totvs() {
 *      const message = 'Somos #Totvers';
 *      const type = 'information';
 *      this.showMessage(message, type);
 *    }
 *
 *    share() {
 *      const message = 'Compartilhado com sucesso!';
 *      const type = 'success';
 *      this.showMessage(message, type);
 *    }
 *
 *    showMessage(message, type) {
 *      this.thfNotification[type]({
 *        message: message,
 *        orientation: ThfToasterOrientation.Bottom,
 *      });
 *    }
 *
 *  }
 *  </file>
 * </example>
 */
var ThfPageDefaultComponent = (function (_super) {
    __extends$12(ThfPageDefaultComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageDefaultComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            utils.callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageDefaultComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    ThfPageDefaultComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-default', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-default-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageDefaultComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.Renderer, },
        { type: router.Router, },
    ]; };
    return ThfPageDefaultComponent;
}(thfPageBase.ThfPageDefaultBaseComponent));

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 *
 */
var ThfPageContentComponent = (function (_super) {
    __extends$13(ThfPageContentComponent, _super);
    /**
     * @param {?} renderer
     */
    function ThfPageContentComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.height = '90%';
        _this.marginTop = '';
        _this.overflowY = 'none';
        renderer.listenGlobal('window', 'resize', function (event) {
            _this.setHeightContent(_this.pageHeaderElement, _this.bottomActions, _this.toolbarElement);
        });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.pageHeaderElement = (document.querySelector('div.thf-page-header'));
            _this.bottomActions = (document.querySelector('div.thf-page-bottom-container'));
            _this.toolbarElement = (document.querySelector('div.thf-toolbar'));
            _this.setHeightContent(_this.pageHeaderElement, _this.bottomActions, _this.toolbarElement);
        });
    };
    /**
     * @param {?} thfPageHeader
     * @param {?} bottomActions
     * @param {?} toolbarElement
     * @return {?}
     */
    ThfPageContentComponent.prototype.setHeightContent = function (thfPageHeader, bottomActions, toolbarElement) {
        var /** @type {?} */ toolbarElementHeight = toolbarElement ? 33 : 0;
        var /** @type {?} */ pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetHeight : 0;
        var /** @type {?} */ bottomActionsHeight = bottomActions ? bottomActions.offsetHeight : 0;
        var /** @type {?} */ bodyHeight = document.body.clientHeight;
        var /** @type {?} */ newHeight = bodyHeight - (pageHeaderHeight + bottomActionsHeight + toolbarElementHeight);
        this.overflowY = bottomActions ? 'auto' : 'none';
        this.height = newHeight + "px";
        this.marginTop = pageHeaderHeight + toolbarElementHeight + "px";
    };
    ThfPageContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-content', template: "<div class=\"thf-page-content\" [style.height]=\"height\" [style.margin-top]=\"marginTop\" [style.overflow-y]=\"overflowY\"> <ng-content></ng-content> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageContentComponent.ctorParameters = function () { return [
        { type: core.Renderer, },
    ]; };
    return ThfPageContentComponent;
}(thfPageBase.ThfPageContentBaseComponent));

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 *
 */
var ThfPageComponent = (function (_super) {
    __extends$14(ThfPageComponent, _super);
    function ThfPageComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page', template: "<div class=\"thf-page\"> <ng-content> </ng-content> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageComponent.ctorParameters = function () { return []; };
    return ThfPageComponent;
}(thfPageBase_component.ThfPageBaseComponent));

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-edit-labs' title='Totvs Page Edit Labs'>
 *  <file name='sample-thf-page-edit-labs.component.html'> </file>
 *  <file name='sample-thf-page-edit-labs.component.ts'> </file>
 * </example>
 */
var ThfPageEditComponent = (function (_super) {
    __extends$15(ThfPageEditComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfPageEditComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.hasAction = thfPageBase.hasAction;
        _this.callAction = thfPageBase.callAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageEditComponent.prototype.hasAnyAction = function () {
        return thfPageBase.hasAction('cancel', this.parentContext) || thfPageBase.hasAction('saveNew', this.parentContext) || thfPageBase.hasAction('save', this.parentContext);
    };
    ThfPageEditComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-edit', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-bottom-container\"> <div class=\"thf-page-bottom-actions\"> <thf-button t-label=\"Cancelar\" *ngIf=\"hasAction('cancel', parentContext)\" (t-click)=\"callAction('cancel', parentContext)\"> </thf-button> <thf-button t-label=\"Salvar e Novo\" *ngIf=\"hasAction('saveNew', parentContext)\" [t-disabled]=\"disableSubmit\" (t-click)=\"callAction('saveNew', parentContext)\"> </thf-button> <thf-button t-label=\"Salvar\" t-primary=\"true\" *ngIf=\"hasAction('save', parentContext)\" [t-disabled]=\"disableSubmit\" (t-click)=\"callAction('save', parentContext)\"> </thf-button> </div> </div> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageEditComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    return ThfPageEditComponent;
}(thfPageBase.ThfPageEditBaseComponent));

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-detail-labs' title='Totvs Page Detail Labs'>
 *  <file name='sample-thf-page-detail-labs.component.html'> </file>
 *  <file name='sample-thf-page-detail-labs.component.ts'> </file>
 * </example>
 */
var ThfPageDetailComponent = (function (_super) {
    __extends$16(ThfPageDetailComponent, _super);
    /**
     * @param {?} viewRef
     */
    function ThfPageDetailComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.callActionFn = thfPageBase.callAction;
        _this.hasActionFn = thfPageBase.hasAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageDetailComponent.prototype.hasAnyAction = function () {
        return this.hasActionFn('back', this.parentContext) ||
            this.hasActionFn('edit', this.parentContext) ||
            this.hasActionFn('remove', this.parentContext);
    };
    ThfPageDetailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-detail', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> <!-- OPERATIONS --> <div *ngIf=\"hasAnyAction()\" class=\"thf-page-bottom-container\"> <div class=\"thf-page-bottom-actions\"> <thf-button *ngIf=\"hasActionFn('back', parentContext)\" t-label=\"Voltar\" t-primary=\"true\" t-icon=\"thf-icon-arrow-left\" (t-click)=\"callActionFn('back', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('edit', parentContext)\" t-label=\"Editar\" t-icon=\"thf-icon-edit\" (t-click)=\"callActionFn('edit', parentContext)\"> </thf-button> <thf-button *ngIf=\"hasActionFn('remove', parentContext)\" t-label=\"Remover\" t-icon=\"thf-icon-delete\" (t-click)=\"callActionFn('remove', parentContext)\"> </thf-button> </div> </div> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageDetailComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    return ThfPageDetailComponent;
}(thfPageBase.ThfPageDetailBaseComponent));

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@docsPrivate
 */
var ThfPageHeaderComponent = (function (_super) {
    __extends$17(ThfPageHeaderComponent, _super);
    function ThfPageHeaderComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-header', template: "<div class=\"thf-page-header\"> <!-- Título --> <div class=\"thf-page-header-title\" *ngIf=\"title\"> {{title}} </div> <!-- Operações --> <div class=\"thf-page-header-row\"> <ng-content></ng-content> </div> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageHeaderComponent.ctorParameters = function () { return []; };
    return ThfPageHeaderComponent;
}(thfPageBase.ThfPageHeaderBaseComponent));

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 * \@example
 * <example name='thf-page-list-labs' title='Totvs Page List Labs'>
 *  <file name='sample-thf-page-list-labs.component.html'> </file>
 *  <file name='sample-thf-page-list-labs.component.ts'> </file>
 * </example>
 */
var ThfPageListComponent = (function (_super) {
    __extends$18(ThfPageListComponent, _super);
    /**
     * @param {?} viewRef
     * @param {?} renderer
     * @param {?} router
     */
    function ThfPageListComponent(viewRef, renderer, router$$1) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.renderer = renderer;
        _this.router = router$$1;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.callFunction = utils.callFunction;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listenGlobal('window', 'resize', function (event) {
            _this.onResize(event);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageListComponent.prototype.ngOnChanges = function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfPageListComponent.prototype.callAction = function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            utils.callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfPageListComponent.prototype.onResize = function (event) {
        var /** @type {?} */ width = ((event.target)).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setIsMobile = function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    ThfPageListComponent.prototype.setDropdownActions = function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    ThfPageListComponent.prototype.callActionFilter = function (field) {
        this.callFunction(this.filter[field], this.parentRef);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfPageListComponent.prototype.onkeypress = function (key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    ThfPageListComponent.prototype.changeModel = function (newModel) {
        this.parentRef[this.filter.ngModel] = newModel;
    };
    ThfPageListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-page-list', template: "<thf-page> <!-- HEADER --> <thf-page-header [t-title]=\"title\"> <!-- OPERATIONS --> <div class=\"thf-page-header-row\"> <div class=\"thf-page-list-actions\"> <thf-button *ngIf=\"actions[0]\" t-primary=\"true\" [t-label]=\"actions[0].label\" (t-click)=\"callAction(actions[0])\" [t-disabled]=\"actions[0].disabled\" [t-icon]=\"actions[0].icon\"> </thf-button> <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\" [t-label]=\"actions[1].label\" [t-disabled]=\"actions[1].disabled\" (t-click)=\"callAction(actions[1])\" [t-icon]=\"actions[1].icon\"> </thf-button> <thf-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\" [t-label]=\"actions[2].label\" (t-click)=\"callAction(actions[2])\" [t-disabled]=\"actions[2].disabled\" [t-icon]=\"actions[2].icon\"> </thf-button> <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\" t-label=\"Outras ações\" [t-actions]=\"dropdownActions\"> </thf-dropdown> </div> <!-- FILTER --> <div class=\"thf-page-list-filter-content\" *ngIf=\"filter\"> <div class=\"thf-page-list-filter-wrapper\"> <div class=\"thf-page-list-filter\"> <span class=\"thf-icon thf-icon-search thf-page-list-icon-search\" (click)=\"callActionFilter('action')\"> </span> <input type=\"text\" class=\"thf-input\" [ngModel]=\"parentRef[filter.ngModel]\" (ngModelChange)=\"changeModel($event)\" name=\"model\" [placeholder]=\"filter.placeholder\" (keypress)=\"onkeypress($event.keyCode)\"> </div> <div class=\"thf-page-list-filter-search\" *ngIf=\"filter.advancedAction\"> <a class=\"thf-page-list-filter-search-link\" (click)=\"callActionFilter('advancedAction')\"> Busca avançada </a> </div> </div> </div> </div> </thf-page-header> <!-- CONTENT --> <thf-page-content> <ng-content> </ng-content> </thf-page-content> </thf-page> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageListComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.Renderer, },
        { type: router.Router, },
    ]; };
    return ThfPageListComponent;
}(thfPageBase.ThfPageListBaseComponent));

/**
 * \@description
 * Módulo dos componentes thf-page-default, thf-page-edit, thf-page-list e thf-page-detail
 */
var ThfPageModule = (function () {
    function ThfPageModule() {
    }
    ThfPageModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        router.RouterModule,
                        ThfButtonModule,
                        ThfFieldModule,
                        ThfDropdownModule
                    ],
                    declarations: [
                        ThfPageContentComponent,
                        ThfPageComponent,
                        ThfPageDefaultComponent,
                        ThfPageDetailComponent,
                        ThfPageEditComponent,
                        ThfPageHeaderComponent,
                        ThfPageListComponent
                    ],
                    exports: [
                        ThfPageDetailComponent,
                        ThfPageDefaultComponent,
                        ThfPageEditComponent,
                        ThfPageListComponent
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfPageModule.ctorParameters = function () { return []; };
    return ThfPageModule;
}());

exports.ThfPageModule = ThfPageModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
