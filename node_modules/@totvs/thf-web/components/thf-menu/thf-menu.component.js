var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, ViewContainerRef } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { Location } from '@angular/common';
import { ThfMenuBaseComponent } from '@totvs/thf-core/components/thf-menu-base';
/**
 *
 * \@description
 *
 * Aparece completo em telas com largura que maior que 1200px, caso contrário o menu é escondido e chamado
 * por meio de um botão.
 *
 * Para o menu funcionar corretamente é necessário importar o ```RouterModule```  e ```Routes``` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     ThfModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 * <example name='thf-menu-labs' title='Totvs Menu Labs'>
 * <file name='sample-thf-menu-labs.component.html'> </file>
 * <file name='sample-thf-menu-labs.component.ts'> </file>
 * </example>
 */
var ThfMenuComponent = (function (_super) {
    __extends(ThfMenuComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} viewRef
     * @param {?} location
     * @param {?} router
     */
    function ThfMenuComponent(elementRef, viewRef, location, router) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.viewRef = viewRef;
        _this.location = location;
        _this.router = router;
        _this.parentRef = viewRef['_view']['component'];
        _this.router.events.subscribe(function (val) {
            if (val instanceof NavigationEnd) {
                _this.checkActiveMenuByUrl(_this.location.path());
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.validateMenus();
        setTimeout(function () {
            _this.checkActiveMenuByUrl(_this.location.path());
        });
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.validateMenus = function () {
        this.menus.forEach(function (menu) {
            if (menu.label.trim() === '') {
                throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
            }
            if (menu.subItems) {
                menu.subItems.forEach(function (subMenu) {
                    if (subMenu.label.trim() === '') {
                        throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
                    }
                });
            }
        });
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItem = function (menu) {
        this.menuMobileOpened = false;
        if (this.isExternalLink(menu.link)) {
            this.openExternalLink(menu.link);
        }
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu.link && !this.isExternalLink(menu.link)) {
            this.menuItemActive = menu;
            this.menuItemOpened = undefined;
        }
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickMenuItemGrouped = function (menu) {
        this.menuItemOpened = (this.menuItemOpened === menu) ? undefined : menu;
    };
    /**
     * @param {?} subMenu
     * @return {?}
     */
    ThfMenuComponent.prototype.clickSubMenuItem = function (subMenu) {
        this.menuMobileOpened = false;
        if (this.isExternalLink(subMenu.link)) {
            this.openExternalLink(subMenu.link);
        }
        if (subMenu.action) {
            this.executeMenuAction(subMenu);
        }
        if (subMenu.link && !this.isExternalLink(subMenu.link)) {
            this.menuItemActive = subMenu;
        }
    };
    /**
     * @return {?}
     */
    ThfMenuComponent.prototype.toggleMenuMobile = function () {
        this.menuMobileOpened = !this.menuMobileOpened;
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.isMenuItemSelected = function (menu) {
        return this.menuItemActive === menu &&
            this.menuItemActive !== this.menuItemOpened ||
            (menu !== this.menuItemOpened && menu.subItems && menu.subItems.includes(this.menuItemActive));
        // Submenu ativo fechado
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.checkActiveMenuByUrl = function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.setActiveMenuByUrl(urlPath);
        }
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.checkUrl = function (menu) {
        var /** @type {?} */ urlMenu = '';
        // Retira todos os pontos no começo da URL.
        if (menu.link) {
            urlMenu = menu.link.replace(/^(\.)+/g, '');
        }
        // Verifica se foi utilizado uma rota que não comece com barra.
        if (!urlMenu.startsWith('/')) {
            urlMenu = '/'.concat(urlMenu);
        }
        return urlMenu;
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    ThfMenuComponent.prototype.setActiveMenuByUrl = function (urlPath) {
        var _this = this;
        this.menus.some(function (menu) {
            if (_this.checkUrl(menu) === urlPath) {
                setTimeout(function () {
                    _this.menuItemActive = menu;
                    _this.linkActive = _this.menuItemActive.link;
                    _this.menuItemOpened = undefined;
                });
                return true;
            }
            else if (menu.subItems) {
                var /** @type {?} */ subItemSelected_1 = menu.subItems.find(function (subItem) { return _this.checkUrl(subItem) === urlPath; });
                if (subItemSelected_1) {
                    setTimeout(function () {
                        _this.menuItemActive = subItemSelected_1;
                        _this.menuItemOpened = menu;
                        _this.linkActive = _this.menuItemActive.link;
                        return true;
                    });
                }
            }
        });
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuComponent.prototype.executeMenuAction = function (menu) {
        if (typeof (menu.action) === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuComponent.prototype.openExternalLink = function (url) {
        window.open(url, '_blank');
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ThfMenuComponent.prototype.isExternalLink = function (url) {
        if (url) {
            return url.startsWith('http');
        }
    };
    ThfMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-menu', template: "<div *ngIf=\"menuMobileOpened\" class=\"thf-menu-overlay\" (click)=\"toggleMenuMobile()\"></div> <div class=\"thf-menu-mobile thf-clickable\" (click)=\"toggleMenuMobile()\"> <span class=\"thf-icon thf-icon-menu\"></span> </div> <div class=\"thf-menu\" [ngClass]=\"{ 'thf-menu-animation' : menuMobileOpened }\"> <a href=\"/\" class=\"thf-menu-logo-container\"> <div class=\"thf-menu-logo\"></div> </a> <nav class=\"thf-menu-container\"> <!-- Inner e outer para esconder scroll --> <div class=\"thf-menu-outer\"> <div class=\"thf-menu-inner\"> <div *ngFor=\"let menu of menus\" class=\"thf-menu-item-wrapper\"> <!-- item de menu não selecionado sem agrupamento --> <a *ngIf=\"!menu.subItems && !this.isExternalLink(menu.link) && menu.link\" class=\"thf-menu-item-link\" (click)=\"clickMenuItem(menu)\" [routerLink]=\"menu.link\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === menu}\"> {{ menu.label }} </div> </a> <a *ngIf=\"!menu.subItems && (this.isExternalLink(menu.link) || !menu.link)\" class=\"thf-menu-item-link\" (click)=\"$event.preventDefault();clickMenuItem(menu);\" [href]=\"menu.link ? menu.link : 'javascript:;'\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === menu}\"> {{ menu.label }} </div> </a> <!-- item de menu com sub itens --> <div *ngIf=\"menu.subItems\"> <div (click)=\"clickMenuItemGrouped(menu)\" class=\"thf-menu-item thf-clickable\" [ngClass]=\"{ 'thf-menu-item-selected': isMenuItemSelected(menu), 'thf-menu-item-grouper-up': menu === menuItemOpened }\"> <!-- menu agrupado fechado --> <div *ngIf=\"menu !== menuItemOpened\" class=\"thf-menu-grouper-icon-down\"> <span class=\"thf-icon thf-icon-arrow-down\"></span> </div> <!-- menu agrupado aberto --> <div *ngIf=\"menu === menuItemOpened\" class=\"thf-menu-grouper-icon-up\"> <span class=\"thf-icon thf-icon-arrow-up\"></span> </div> {{ menu.label }} </div> <!-- sub itens menu agrupado --> <div [ngClass]=\"{ 'thf-menu-sub-items-visible': menu === menuItemOpened }\" class=\"thf-menu-sub-items\"> <div *ngFor=\"let subMenu of menu.subItems\"> <a *ngIf=\"!this.isExternalLink(subMenu.link) && subMenu.link\" class=\"thf-menu-item-link\" [routerLink]=\"subMenu.link\" (click)=\"clickSubMenuItem(subMenu)\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === subMenu}\"> {{ subMenu.label }} </div> </a> <a *ngIf=\"(this.isExternalLink(subMenu.link) || !subMenu.link)\" class=\"thf-menu-item-link\" [href]=\"subMenu.link ? subMenu.link : 'javascript:;'\" (click)=\"$event.preventDefault(); clickSubMenuItem(subMenu);\"> <div [ngClass]=\"{'thf-menu-item': true, 'thf-menu-item-selected': menuItemActive === subMenu}\"> {{ subMenu.label }} </div> </a> </div> </div> </div> </div> </div> </div> </nav> </div> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfMenuComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ViewContainerRef, },
        { type: Location, },
        { type: Router, },
    ]; };
    return ThfMenuComponent;
}(ThfMenuBaseComponent));
export { ThfMenuComponent };
function ThfMenuComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfMenuComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfMenuComponent.ctorParameters;
    /** @type {?} */
    ThfMenuComponent.prototype.menuItemActive;
    /** @type {?} */
    ThfMenuComponent.prototype.linkActive;
    /** @type {?} */
    ThfMenuComponent.prototype.menuItemOpened;
    /** @type {?} */
    ThfMenuComponent.prototype.menuMobileOpened;
    /** @type {?} */
    ThfMenuComponent.prototype.parentRef;
    /** @type {?} */
    ThfMenuComponent.prototype.elementRef;
    /** @type {?} */
    ThfMenuComponent.prototype.viewRef;
    /** @type {?} */
    ThfMenuComponent.prototype.location;
    /** @type {?} */
    ThfMenuComponent.prototype.router;
}
