(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/router')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', '@angular/router'], factory) :
	(factory((global['thf-dropdown'] = {}),global.common,global.core,global.router));
}(this, (function (exports,common,core,router) { 'use strict';

/**
 * \@description
 * O componente **thf-dropdown** pode ser utilizado como um agrupador de ações.
 *
 * \@example
 * <example name='thf-dropdown'>
 *  <file name='sample-thf-dropdown.component.html'>
 *    <thf-dropdown
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *    <thf-dropdown
 *      [t-disabled]="disabled"
 *      [t-label]="label"
 *      [t-actions]="actions">
 *    </thf-dropdown>
 *
 *     <thf-dropdown
 *      [t-label]="label">
 *     </thf-dropdown>
 *
 * </file>
 *
 *  <file name='sample-thf-dropdown.component.ts'>
 *    import { Component } from '\@angular/core';
 *    import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-dropdown',
 *      templateUrl: './sample-thf-dropdown.component.html'
 *   })
 *   export class SampleThfDropdownComponent {
 *
 *       public disabled = true;
 *       public label  = 'Outras ações';
 *       public actions: Array<{}> = [
 *         {label: 'Adicionar', action: this.add, icon: 'thf-icon-plus'},
 *         {label: 'Clonar', action: this.clone, icon: 'thf-icon-copy', disabled: true},
 *         {label: 'Totvs', url: 'http://www.google.com', icon: 'thf-icon-document'}
 *       ];
 *
 *      public add(): void {
 *          console.log('Adicionar');
 *      }
 *
 *      public clone(): void {
 *          console.log('Clonar');
 *      }
 *   }
 *  </file>
 * </example>
 */
var ThfDropdownComponent = (function () {
    /**
     * @param {?} _element
     * @param {?} _view
     * @param {?} _router
     */
    function ThfDropdownComponent(_element, _view, _router) {
        this._element = _element;
        this._view = _view;
        this._router = _router;
        this._open = false;
        this.icon = 'thf-icon-arrow-down';
        this._parentRef = _view['_view']['component'];
        this._addListenerCloseDropdown();
    }
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype.toggleButton = function () {
        this.icon = this._open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.actions && this.actions.length) {
            this._selector('.dropdown').classList.toggle('t-show');
        }
        this._open = !this._open;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfDropdownComponent.prototype.onClick = function (item) {
        if (item.url) {
            var /** @type {?} */ url = item.url, /** @type {?} */ regexUrl = /(http(s?))\:\/\//gi;
            if (regexUrl.test(url)) {
                window.open(url, '_blank');
            }
            else {
                this._router.navigate([url]);
            }
        }
        else if (item.action) {
            this._callAction(item.action);
        }
    };
    /**
     * @return {?}
     */
    ThfDropdownComponent.prototype._addListenerCloseDropdown = function () {
        var /** @type {?} */ _this = this;
        window.onclick = function (event) {
            var /** @type {?} */ value = event.target && event.target.getAttribute('class');
            if (value !== 'button-dropdown' && _this._open) {
                _this.toggleButton();
            }
        };
    };
    /**
     * @param {?} _function
     * @return {?}
     */
    ThfDropdownComponent.prototype._callAction = function (_function) {
        this._callActionOfContext(_function, this._parentRef);
    };
    /**
     * @param {?} _function
     * @param {?} _context
     * @return {?}
     */
    ThfDropdownComponent.prototype._callActionOfContext = function (_function, _context) {
        if (this._isTypeof(_function, 'function')) {
            _function.call(_context);
        }
        else {
            _context[_function]();
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfDropdownComponent.prototype._selector = function (query) {
        return this._element.nativeElement.querySelector(query);
    };
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    ThfDropdownComponent.prototype._isTypeof = function (object, type) {
        return typeof object === type;
    };
    ThfDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'thf-dropdown', template: "<div class=\"dropdown\"> <div class=\"button-dropdown\" [ngClass]=\"{'disabled' : disabled}\" (click)=\"toggleButton()\"> {{label}} <div class=\"hidden-xs icon-dropdown thf-icon {{icon}}\" (click)=\"toggleButton()\"></div> </div> <ul class=\"dropdown-content\"> <li *ngFor=\"let action of actions\"> <a (click)=\"onClick(action)\" [ngClass]=\"{'disabled' : action.disabled}\"> {{action?.label}} </a> </li> </ul> </div> ", styles: [".dropdown { position: relative; display: inline-block; width: inherit; } .dropdown.t-show > .button-dropdown { border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-bottom: none; } .dropdown.t-show > .dropdown-content { display: block !important; } div.button-dropdown { cursor: pointer; line-height: 24px; font-size: 16px; height: 44px; border-radius: 3px; padding: 9px 38px 9px 16px; background-color: #ffffff; border: solid 1px #0c9abe; color: #0c9abe; } div.button-dropdown > span { padding-top: 3px; } div.button-dropdown.disabled { background-color: #ffffff; border: solid 1px #4a5c60; opacity: 0.4; } div.button-dropdown:hover { color: #0a7b98; border: solid 1px #0a7b98; } ul.dropdown-content { display: none; position: absolute; background-color: #ffffff; border: solid 1px #0c9abe; border-top: none; z-index: 1; width: 100%; max-height: 175px; overflow-y: auto; list-style-type: none; padding: 0; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; } ul.dropdown-content > li > a { color: #0c9abe; padding: 10px 16px; text-decoration: none; display: block; cursor: pointer; word-wrap: break-word; line-height: 1.5; } ul.dropdown-content > li > a:hover { color: #0a7b98; } ul.dropdown-content > li > a:active { color: #075c72; } .disabled { pointer-events: none; color: #b7bebf !important; } .icon-dropdown { font-size: 24px; right: 10px; top: 10px; position: absolute; } ::-webkit-scrollbar { width: 7px; } ::-webkit-scrollbar-track { display: none; } ::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #0c9abe; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
        { type: router.Router, },
    ]; };
    ThfDropdownComponent.propDecorators = {
        'disabled': [{ type: core.Input, args: ['t-disabled',] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
    };
    return ThfDropdownComponent;
}());

/**
 * \@description
 * Módulo do componente thf-dropdown.
 */
var ThfDropdownModule = (function () {
    function ThfDropdownModule() {
    }
    ThfDropdownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [ThfDropdownComponent],
                    exports: [ThfDropdownComponent]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDropdownModule.ctorParameters = function () { return []; };
    return ThfDropdownModule;
}());

exports.ThfDropdownModule = ThfDropdownModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
