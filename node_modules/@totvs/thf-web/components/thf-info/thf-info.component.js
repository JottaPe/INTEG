import { Component, Input } from '@angular/core';
/**
 * \@description
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
 *
 * \@example
 * <example name='thf-info'>
 * <file name='sample-thf-info.component.html'>
 *    <thf-info t-label="Label" t-value="Valor"></thf-info>
 * </file>
 *
 * <file name="sample-thf-info.component.ts">
 *  import { Component, OnInit } from '\@angular/core';
 *  import { ThfModule } from '\@totvs/thf-web';
 *
 *  \@Component({
 *   selector: 'sample-thf-info',
 *   templateUrl: './sample-thf-info.component.html',
 *  })
 *  export class SampleThfInfoComponent {
 *  }
 * </file>
 * </example>
 */
var ThfInfoComponent = (function () {
    function ThfInfoComponent() {
    }
    ThfInfoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-info', template: "<div><span class=\"thf-info label\">{{label}}</span></div> <div><span class=\"thf-info value\">{{value}}</span></div> ", styles: [".thf-info.label { font-family: 'NunitoSans-Bold'; font-size: 14px; text-align: left; color: #4a5c60; height: 12px; padding: 0px; } .thf-info.value { font-family: 'NunitoSans'; font-size: 16px; text-align: left; color: #1e2526; height: 13px; padding: 0px; margin-top: 11px; display: block; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfInfoComponent.ctorParameters = function () { return []; };
    ThfInfoComponent.propDecorators = {
        'label': [{ type: Input, args: ['t-label',] },],
        'value': [{ type: Input, args: ['t-value',] },],
    };
    return ThfInfoComponent;
}());
export { ThfInfoComponent };
function ThfInfoComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfInfoComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfInfoComponent.ctorParameters;
    /** @type {?} */
    ThfInfoComponent.propDecorators;
    /**
     * Valor da label a ser exibido.
     * @type {?}
     */
    ThfInfoComponent.prototype.label;
    /**
     * Valor a ser exibido abaixo da label.
     * @type {?}
     */
    ThfInfoComponent.prototype.value;
}
