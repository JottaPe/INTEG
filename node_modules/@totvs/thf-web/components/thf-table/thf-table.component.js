import { Component, Input, ElementRef, ViewContainerRef } from '@angular/core';
import { Output, EventEmitter, Renderer } from '@angular/core';
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes dados que podem ser datas e números com
 * formatos personalizados ou também textos.
 *
 * É possivel criar uma tabela com ordenação de dados, coluna de seleção de linhas, coluna com menu com ações e
 * também carregamento por demanda, com o botão "Carregar mais resultados".
 *
 * \@example
 *
 *  <example name="thf-table-labs" title="Totvs Table Labs">
 *    <file name="sample-thf-table-labs.component.ts"> </file>
 *    <file name="sample-thf-table-labs.component.html"> </file>
 *    <file name="sample-airfare.service.ts"> </file>
 *  </example>
 */
var ThfTableComponent = (function () {
    /**
     * @param {?} myElement
     * @param {?} renderer
     * @param {?} viewRef
     */
    function ThfTableComponent(myElement, renderer, viewRef) {
        this.viewRef = viewRef;
        /**
         * Lista de ações exibidas no menu que aparece ao clicar na columa de ações de cada linha.
         * Essa propriedade deve receber um array de objetos que implementam a interface ThfColumnAction, caso o
         * array esteja vazio a coluna será escondida.
         */
        this.actions = [];
        /**
         * Habilita ou desabilita o botão "Carregar mais resultados"
         */
        this.showMoreDisabled = false;
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso não seja definida uma ação, o botão
         * não é visível.
         */
        this.showMore = new EventEmitter;
        this.selectAll = false;
        this.parentRef = viewRef['_view']['component'];
        this.myElement = myElement;
    }
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.selectAllRows = function () {
        var _this = this;
        this.selectAll = !this.selectAll;
        // Seleciona os itens
        this.items.forEach(function (item) {
            item.$selected = _this.selectAll;
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.selectRow = function (row) {
        // Toggle item selecionado
        row.$selected = !row.$selected;
        // verifica se todos os itens estão selecionados
        this.selectAll = this.items.filter(function (item) { return item.$selected; }).length === this.items.length;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfTableComponent.prototype.toggleRowAction = function (row) {
        var /** @type {?} */ toggleShowAction = row.$showAction;
        // hide all row actions
        this.items.forEach(function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        // toggle dropdown
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.sortColumn = function (column) {
        if (this.sort) {
            var /** @type {?} */ element = this.myElement.nativeElement.querySelector('#sort-' + column.column);
            if (element.classList.contains('thf-table-header-icon-unselected') || element.classList.contains('thf-table-header-icon-ascending')) {
                element.className = 'thf-table-header-icon-descending';
                this.sortArray(column, true);
            }
            else {
                element.className = 'thf-table-header-icon-ascending';
                this.sortArray(column, false);
            }
            this.clearSortingElement(column);
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ThfTableComponent.prototype.clearSortingElement = function (column) {
        for (var /** @type {?} */ index = 0; index < this.columns.length; index++) {
            var /** @type {?} */ element = this.columns[index];
            if (element.column !== column.column) {
                this.myElement.nativeElement.querySelector('#sort-' + element.column).className = 'thf-table-header-icon-unselected';
            }
        }
    };
    /**
     * @param {?} input
     * @return {?}
     */
    ThfTableComponent.prototype.parseDate = function (input) {
        var /** @type {?} */ parts;
        if (input.indexOf('-') >= 0) {
            parts = input.split('-');
            return new Date(parts[0], parts[1] - 1, parts[2]);
        }
        else if (input.indexOf('/') >= 0) {
            parts = input.split('/');
            return new Date(parts[2], parts[1] - 1, parts[0]);
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} leftSide
     * @param {?} rightSide
     * @param {?} asc
     * @return {?}
     */
    ThfTableComponent.prototype.sortValidate = function (leftSide, rightSide, asc) {
        if (asc) {
            if (leftSide < rightSide) {
                return -1;
            }
            else if (leftSide > rightSide) {
                return 1;
            }
        }
        else {
            if (leftSide < rightSide) {
                return 1;
            }
            else if (leftSide > rightSide) {
                return -1;
            }
        }
        return 0;
    };
    /**
     * @param {?} column
     * @param {?} asc
     * @return {?}
     */
    ThfTableComponent.prototype.sortArray = function (column, asc) {
        var _this = this;
        this.items.sort(function (leftSide, rightSide) {
            if (column.type === 'date') {
                var /** @type {?} */ leftSideMil = _this.parseDate(leftSide[column.column]).getTime();
                var /** @type {?} */ rightSideMil = _this.parseDate(rightSide[column.column]).getTime();
                return _this.sortValidate(leftSideMil, rightSideMil, asc);
            }
            if (asc) {
                if (leftSide[column.column] < rightSide[column.column]) {
                    return -1;
                }
                else if (leftSide[column.column] > rightSide[column.column]) {
                    return 1;
                }
            }
            else {
                if (leftSide[column.column] < rightSide[column.column]) {
                    return 1;
                }
                else if (leftSide[column.column] > rightSide[column.column]) {
                    return -1;
                }
            }
            return 0;
        });
    };
    /**
     * @return {?}
     */
    ThfTableComponent.prototype.onShowMore = function () {
        this.showMore.emit(null);
    };
    ThfTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table', template: "<table class=\"thf-table\"> <thead> <tr class=\"thf-table-header\"> <th *ngIf=\"checkbox\" class=\"thf-table-header-ellipsis thf-table-column-checkbox\"> <input type=\"checkbox\" class=\"thf-table-checkbox\" [ngClass]=\"{ 'thf-table-checkbox-checked': selectAll }\"> <label class=\"thf-table-checkbox-label\" (click)=\"selectAllRows()\"></label> </th> <th *ngFor=\"let column of columns\" class=\"thf-table-header-ellipsis\" [style.width]=\"column.width\" [ngClass]=\"{ 'thf-clickable': sort, 'thf-table-column-right': column.type == 'currency' || column.type == 'number' }\" (click)=\"sortColumn(column)\"> <span id=\"sort-{{column.column}}\" *ngIf=\"sort\"  class='thf-table-header-icon-unselected'></span> <span class=\"thf-table-header-ellipsis thf-table-header-block\">{{ column.label }}</span> </th> <th *ngIf=\"actions.length > 0\" class=\"thf-table-header-action\"></th> </tr> </thead> <tbody> <tr *ngFor=\"let row of items, let rowIndex = index;\" class=\"thf-table-row\"> <td *ngIf=\"checkbox\" class=\"thf-table-column thf-table-column-checkbox\" [ngClass]=\"{ 'thf-table-row-active': row.$selected && checkbox }\"> <input type=\"checkbox\" class=\"thf-table-checkbox\" [ngClass]=\"{ 'thf-table-checkbox-checked': row.$selected }\"> <label class=\"thf-table-checkbox-label\" (click)=\"selectRow(row)\"></label> </td> <td *ngFor=\"let column of columns, let columnIndex = index;\" [ngClass]=\"{ 'thf-table-row-active': row.$selected && checkbox , 'thf-table-column-right': column.type == 'currency' || column.type == 'number', 'thf-table-main-column': columnIndex == 0 , 'thf-table-column': columnIndex > 0 }\"> <div [ngSwitch]=\"column.type\"> <span *ngSwitchCase=\"'currency'\">{{ row[column.column] | currency:column.format:true:'1.2-2' }}</span> <span *ngSwitchCase=\"'date'\">{{ row[column.column] | date: (column.format ? column.format : 'dd/MM/yyyy') }}</span> <span *ngSwitchDefault>{{ row[column.column] }}</span> </div> </td> <td *ngIf=\"actions.length > 0\" class=\"thf-table-column-actions\" [ngClass]=\"{'thf-table-row-active': row.$selected && checkbox }\"> <span class=\"thf-icon thf-icon-more thf-clickable \" (click)=\"toggleRowAction(row)\"></span> <div [style.display]=\"row.$showAction ? 'block': 'none'\" class=\"thf-table-actions\"> <div *ngFor=\"let action of actions\" class=\"thf-table-action\" (click)=\"parentRef[action.function](row); toggleRowAction(row)\"> {{ action.label }} </div> </div> </td> </tr> </tbody> <tfoot *ngIf=\"showMore.observers.length > 0\"> <tr> <td class=\"thf-table-footer\" [colSpan]=\"(columns.length) + (actions.length > 0 ? 1 : 0) + ( checkbox ? 1 : 0)\"> <thf-button t-label=\"Carregar mais resultados\" t-id=\"btnShowMoreId\" (t-click)=\"onShowMore()\" [t-disabled]=\"showMoreDisabled\"> </thf-button> </td> </tr> </tfoot> </table> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfTableComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
        { type: ViewContainerRef, },
    ]; };
    ThfTableComponent.propDecorators = {
        'items': [{ type: Input, args: ['t-items',] },],
        'columns': [{ type: Input, args: ['t-columns',] },],
        'checkbox': [{ type: Input, args: ['t-checkbox',] },],
        'actions': [{ type: Input, args: ['t-actions',] },],
        'sort': [{ type: Input, args: ['t-sort',] },],
        'showMoreDisabled': [{ type: Input, args: ['t-show-more-disabled',] },],
        'showMore': [{ type: Output, args: ['t-show-more',] },],
    };
    return ThfTableComponent;
}());
export { ThfTableComponent };
function ThfTableComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfTableComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfTableComponent.ctorParameters;
    /** @type {?} */
    ThfTableComponent.propDecorators;
    /**
     * Lista de objetos que representam as linhas da tabela.
     * @type {?}
     */
    ThfTableComponent.prototype.items;
    /**
     * Lista das colunas de cabeçalho da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfTableColumn.
     * @type {?}
     */
    ThfTableComponent.prototype.columns;
    /**
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica $selected para identificar a linha está selecionada.
     * - Exemplo: ```item.$selected``` ou ```item['$selected']```.
     * @type {?}
     */
    ThfTableComponent.prototype.checkbox;
    /**
     * Lista de ações exibidas no menu que aparece ao clicar na columa de ações de cada linha.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfColumnAction, caso o
     * array esteja vazio a coluna será escondida.
     * @type {?}
     */
    ThfTableComponent.prototype.actions;
    /**
     * Habilita em todas colunas a opção de ordenação de dados.
     * @type {?}
     */
    ThfTableComponent.prototype.sort;
    /**
     * Habilita ou desabilita o botão "Carregar mais resultados"
     * @type {?}
     */
    ThfTableComponent.prototype.showMoreDisabled;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso não seja definida uma ação, o botão
     * não é visível.
     * @type {?}
     */
    ThfTableComponent.prototype.showMore;
    /** @type {?} */
    ThfTableComponent.prototype.selectAll;
    /** @type {?} */
    ThfTableComponent.prototype.clickListener;
    /** @type {?} */
    ThfTableComponent.prototype.parentRef;
    /** @type {?} */
    ThfTableComponent.prototype.myElement;
    /** @type {?} */
    ThfTableComponent.prototype.viewRef;
}
