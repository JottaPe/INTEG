var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostListener, Optional, Renderer, ViewChild, ViewEncapsulation } from '@angular/core';
import { NgControl } from '@angular/forms';
import { checkIsNativeIOS, validValue } from '@totvs/thf-core/utils';
import { ThfSelectBaseComponent } from '@totvs/thf-core/components/thf-field-base';
/**
 *
 * \@example
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select" title="Totvs Select dinâmicos">
 *   <file name="sample-thf-select.component.html"> </file>
 *   <file name="sample-thf-select.component.ts"> </file>
 * </example>
 */
var ThfSelectComponent = (function (_super) {
    __extends(ThfSelectComponent, _super);
    /**
     * @param {?} element
     * @param {?} changeDetector
     * @param {?} renderer
     * @param {?=} ngControl
     */
    function ThfSelectComponent(element, changeDetector, renderer, ngControl) {
        var _this = _super.call(this, element, changeDetector, ngControl) || this;
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.isNative = false;
        renderer.listenGlobal('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        return _this;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = function ($event) {
        // Seleciona os itens com as teclas "up" e "down"
        if (!this.open && ($event.keyCode === 40 || $event.keyCode === 38)) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if ($event.keyCode === 13 || $event.keyCode === 32) {
            $event.preventDefault();
            this.toggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && $event.keyCode === 9) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngAfterViewInit = function () {
        this.isNative = checkIsNativeIOS();
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = function () {
        this.selectElement.nativeElement.focus();
        this.selectIcon = this.open ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
        if (this.options && this.options.length) {
            this.selector('.thf-select-container').classList.toggle('thf-select-show');
        }
        this.open = !this.open;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = function (value) {
        var _this = this;
        if (value && this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                var /** @type {?} */ index = this.options.indexOf(optionFound);
                this.scrollTo(index);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (this.options && this.options.length) {
            var /** @type {?} */ optionFound = this.options.find(function (option) {
                return _this.isEqual(option.value, value);
            });
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = (optionFound.label);
            }
            else if (validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.callModelChange(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
        }
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = function (option) {
        this.selectedValue = option.value;
        this.selectElement.nativeElement.value = option.value;
        this.callModelChange(option.value);
        this.displayValue = option.label;
        this.onChange();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.callModelChange = function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollTo = function (index) {
        var /** @type {?} */ ul = this.element.nativeElement.querySelector('ul.thf-select-content');
        var /** @type {?} */ heightLiByIndex = index * 44; // 44 tamanho de cada li no UL;
        if (this.oldValue > heightLiByIndex) {
            this.oldValue = heightLiByIndex;
            ul.scrollTop -= 44;
            return;
        }
        this.oldValue = heightLiByIndex;
        ul.scrollTop += 44;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    ThfSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-select', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <select #select [attr.name]=\"name\" [required]=\"required\" [disabled]=\"disabled\" class=\"thf-select\" (change)=\"onSelectChange($event.target.value)\"> <option *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\"> {{option?.label}} </option> </select> <div class=\"thf-select-container\"> <div #selectButton class=\"thf-select-button\" [ngClass]=\"{'thf-select-button-disabled' : disabled}\" (click)=\"toggleButton()\"> <span>{{ displayValue || placeholder }}</span> <span #icon class=\"thf-select-icon thf-icon {{selectIcon}}\"></span> </div> <ul class=\"thf-select-content\" [ngClass]=\"{'thf-invisible': isNative}\"> <li *ngFor=\"let option of options\" [value]=\"option.value\" (click)=\"onOptionClick(option)\" [class.thf-select-item-selected]=\"selectedValue == option.value\"> <a class=\"thf-select-item\"> {{option?.label}}</a> </li> </ul> </div> <div class=\"thf-field-error\"> <!-- Adicionado para corrigir o layout, existe outro item para acertar as mensagens de erro --> <div *ngIf=\"false\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> ",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: Renderer, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfSelectComponent.propDecorators = {
        'selectElement': [{ type: ViewChild, args: ['select', { read: ElementRef },] },],
        'iconElement': [{ type: ViewChild, args: ['icon', { read: ElementRef },] },],
        'selectButtonElement': [{ type: ViewChild, args: ['selectButton', { read: ElementRef },] },],
        'onKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfSelectComponent;
}(ThfSelectBaseComponent));
export { ThfSelectComponent };
function ThfSelectComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfSelectComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfSelectComponent.ctorParameters;
    /** @type {?} */
    ThfSelectComponent.propDecorators;
    /** @type {?} */
    ThfSelectComponent.prototype.selectElement;
    /** @type {?} */
    ThfSelectComponent.prototype.iconElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectButtonElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectedValue;
    /** @type {?} */
    ThfSelectComponent.prototype.open;
    /** @type {?} */
    ThfSelectComponent.prototype.selectIcon;
    /** @type {?} */
    ThfSelectComponent.prototype.oldValue;
    /** @type {?} */
    ThfSelectComponent.prototype.displayValue;
    /** @type {?} */
    ThfSelectComponent.prototype.isNative;
}
