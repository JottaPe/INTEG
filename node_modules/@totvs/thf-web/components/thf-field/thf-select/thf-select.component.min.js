var __extends=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){e(t,o);function n(){this.constructor=t}t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();import{ChangeDetectionStrategy,ChangeDetectorRef,Component,ElementRef,HostListener,Optional,Renderer,ViewChild,ViewEncapsulation}from"@angular/core";import{NgControl}from"@angular/forms";import{checkIsNativeIOS,validValue}from"@totvs/thf-core/utils";import{ThfSelectBaseComponent}from"@totvs/thf-core/components/thf-field-base";var ThfSelectComponent=function(e){__extends(t,e);function t(t,o,n,l){var i=e.call(this,t,o,l)||this;return i.open=!1,i.selectIcon="thf-icon-arrow-down",i.isNative=!1,n.listenGlobal("document","click",function(e){i.wasClickedOnToggle(e)}),i}return t.prototype.onKeydown=function(e){this.open||40!==e.keyCode&&38!==e.keyCode||(e.preventDefault(),this.toggleButton()),13!==e.keyCode&&32!==e.keyCode||(e.preventDefault(),this.toggleButton()),this.open&&9===e.keyCode&&(e.preventDefault(),this.toggleButton())},t.prototype.ngAfterViewInit=function(){this.isNative=checkIsNativeIOS()},t.prototype.toggleButton=function(){this.selectElement.nativeElement.focus(),this.selectIcon=this.open?"thf-icon-arrow-down":"thf-icon-arrow-up",this.options&&this.options.length&&this.selector(".thf-select-container").classList.toggle("thf-select-show"),this.open=!this.open},t.prototype.onSelectChange=function(e){var t=this;if(e&&this.options&&this.options.length){var o=this.options.find(function(o){return t.isEqual(o.value,e)});if(o){var n=this.options.indexOf(o);this.scrollTo(n),this.updateModel(o)}}},t.prototype.onOptionClick=function(e){this.toggleButton(),this.updateModel(e)},t.prototype.writeValue=function(e){var t=this;if(this.options&&this.options.length){var o=this.options.find(function(o){return t.isEqual(o.value,e)});o?(this.selectElement.nativeElement.value=o.value,this.selectedValue=o.value,this.displayValue=o.label):validValue(this.selectedValue)&&(this.selectElement.nativeElement.value=void 0,this.callModelChange(void 0),this.selectedValue=void 0,this.displayValue=void 0)}},t.prototype.updateModel=function(e){this.selectedValue=e.value,this.selectElement.nativeElement.value=e.value,this.callModelChange(e.value),this.displayValue=e.label,this.onChange()},t.prototype.callModelChange=function(e){return this.onModelChange?this.onModelChange(e):this.ngModelChange.emit(e)},t.prototype.scrollTo=function(e){var t=this.element.nativeElement.querySelector("ul.thf-select-content"),o=44*e;if(this.oldValue>o)return this.oldValue=o,void(t.scrollTop-=44);this.oldValue=o,t.scrollTop+=44},t.prototype.selector=function(e){return this.element.nativeElement.querySelector(e)},t.prototype.hideDropDown=function(){this.selectIcon="thf-icon-arrow-down",this.selector(".thf-select-container").classList.remove("thf-select-show"),this.open=!1},t.prototype.wasClickedOnToggle=function(e){this.selectButtonElement.nativeElement.contains(e.target)||this.iconElement.nativeElement.contains(e.target)||this.hideDropDown()},t.prototype.isEqual=function(e,t){return(e||0===e)&&t?e.toString()===t.toString():((null===e&&null!==t||void 0===e&&void 0!==t)&&(e=""+e),e===t)},t.decorators=[{type:Component,args:[{selector:"thf-select",template:'<thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <select #select [attr.name]="name" [required]="required" [disabled]="disabled" class="thf-select" (change)="onSelectChange($event.target.value)"> <option *ngFor="let option of options" [value]="option.value" (click)="onOptionClick(option)"> {{option?.label}} </option> </select> <div class="thf-select-container"> <div #selectButton class="thf-select-button" [ngClass]="{\'thf-select-button-disabled\' : disabled}" (click)="toggleButton()"> <span>{{ displayValue || placeholder }}</span> <span #icon class="thf-select-icon thf-icon {{selectIcon}}"></span> </div> <ul class="thf-select-content" [ngClass]="{\'thf-invisible\': isNative}"> <li *ngFor="let option of options" [value]="option.value" (click)="onOptionClick(option)" [class.thf-select-item-selected]="selectedValue == option.value"> <a class="thf-select-item"> {{option?.label}}</a> </li> </ul> </div> <div class="thf-field-error"> \x3c!-- Adicionado para corrigir o layout, existe outro item para acertar as mensagens de erro --\x3e <div *ngIf="false" class="thf-field-error"> <span class="thf-icon thf-icon-close"></span> {{ errorPattern }} </div> </div> </thf-field-container> ',encapsulation:ViewEncapsulation.None,changeDetection:ChangeDetectionStrategy.OnPush}]}],t.ctorParameters=function(){return[{type:ElementRef},{type:ChangeDetectorRef},{type:Renderer},{type:NgControl,decorators:[{type:Optional}]}]},t.propDecorators={selectElement:[{type:ViewChild,args:["select",{read:ElementRef}]}],iconElement:[{type:ViewChild,args:["icon",{read:ElementRef}]}],selectButtonElement:[{type:ViewChild,args:["selectButton",{read:ElementRef}]}],onKeydown:[{type:HostListener,args:["keydown",["$event"]]}]},t}(ThfSelectBaseComponent);export{ThfSelectComponent};function ThfSelectComponent_tsickle_Closure_declarations(){ThfSelectComponent.decorators,ThfSelectComponent.ctorParameters,ThfSelectComponent.propDecorators,ThfSelectComponent.prototype.selectElement,ThfSelectComponent.prototype.iconElement,ThfSelectComponent.prototype.selectButtonElement,ThfSelectComponent.prototype.selectedValue,ThfSelectComponent.prototype.open,ThfSelectComponent.prototype.selectIcon,ThfSelectComponent.prototype.oldValue,ThfSelectComponent.prototype.displayValue,ThfSelectComponent.prototype.isNative}