var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component } from '@angular/core';
import { ThfSwitchBaseComponent, ThfSwitchLabelPosition } from '@totvs/thf-core/components/thf-field-base';
/**
 *
 * \@example
 *
 * <example name="thf-switch-labs" title="Totvs Switch Labs">
 *   <file name="sample-thf-switch-labs.component.html"> </file>
 *   <file name="sample-thf-switch-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-switch" title="Totvs Switch e seus estados">
 *   <file name="sample-thf-switch.component.html"> </file>
 *   <file name="sample-thf-switch.component.ts"> </file>
 * </example>
 */
var ThfSwitchComponent = (function (_super) {
    __extends(ThfSwitchComponent, _super);
    function ThfSwitchComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getLabelPosition = function () {
        switch (this.labelPosition) {
            case ThfSwitchLabelPosition.Left: return 'left';
            case ThfSwitchLabelPosition.Right: return 'right';
            default: return 'right';
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchComponent.prototype.getSwitchPosition = function () {
        switch (this.labelPosition) {
            case ThfSwitchLabelPosition.Left: return 'right';
            case ThfSwitchLabelPosition.Right: return 'left';
            default: return 'left';
        }
    };
    ThfSwitchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-switch', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div [attr.name]=\"name\" class=\"thf-switch\"> <div class=\"thf-switch-container thf-clickable\" [class.thf-switch-container-right]=\"getSwitchPosition() === 'right'\" [class.thf-switch-container-on]=\"switchValue === true && !disabled\" [class.thf-switch-container-off]=\"switchValue === false && !disabled\" [class.thf-switch-container-disabled]=\"disabled\" (click)=\"eventClick()\"> <div class=\"thf-switch-button\" [class.thf-switch-button-on]=\"switchValue === true\" [class.thf-switch-button-off]=\"switchValue === false\" [class.thf-switch-button-disabled]=\"disabled\"> <span class=\"thf-icon thf-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span> </div> </div> <span class=\"thf-switch-label thf-clickable thf-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\"> {{ switchValue === true ? labelOn : labelOff }} </span> </div> </thf-field-container> "
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfSwitchComponent.ctorParameters = function () { return []; };
    return ThfSwitchComponent;
}(ThfSwitchBaseComponent));
export { ThfSwitchComponent };
function ThfSwitchComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfSwitchComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfSwitchComponent.ctorParameters;
}
