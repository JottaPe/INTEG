var __extends=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){t(e,n);function o(){this.constructor=e}e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();import{Component,Input}from"@angular/core";import{Validators}from"@angular/forms";import{ThfInputBaseComponent}from"@totvs/thf-core/components/thf-field-base";var ThfNumberComponent=function(t){__extends(e,t);function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.type="number",e.step="",e}return Object.defineProperty(e.prototype,"setMin",{set:function(t){isNaN(parseInt(t,10))||(this.min=parseInt(t,10),this.validators.min=this.getValidatorMin(),this.updateValidators())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"setMax",{set:function(t){isNaN(parseInt(t,10))||(this.max=parseInt(t,10),this.validators.max=this.getValidatorMax(),this.updateValidators())},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.validators.min=this.getValidatorMin(),this.validators.max=this.getValidatorMax(),this._onInit()},e.prototype.getValidatorMin=function(){return this.min?Validators.min(this.min):null},e.prototype.getValidatorMax=function(){return this.max?Validators.max(this.max):null},e.decorators=[{type:Component,args:[{selector:"thf-number",template:' <thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <div class="thf-field-flex-container" > <input #inp [type]="type" class="thf-input-elem" (input)="eventOnInput($event)" (focus)="eventOnFocus($event)" (blur)="eventOnBlur($event)" [attr.name]="name" [attr.min]="min" [attr.max]="max" [attr.step]="step" [placeholder]="placeholder" [required]="required" [disabled]="disabled" [readonly]="readonly"> <thf-clean #clean (click)="cleanInput()" *ngIf="clean!==\'\' && !disabled"></thf-clean> </div> <div class="thf-field-error"> <div *ngIf="errorPattern!==\'\' && hasInvalidClass()" class="thf-field-error"> <span class="thf-icon thf-icon-close"></span> {{errorPattern}} </div> </div> </thf-field-container> ',styles:[".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]}]}],e.ctorParameters=function(){return[]},e.propDecorators={label:[{type:Input,args:["t-label"]}],help:[{type:Input,args:["t-help"]}],setMin:[{type:Input,args:["t-min"]}],setMax:[{type:Input,args:["t-max"]}],step:[{type:Input,args:["t-step"]}]},e}(ThfInputBaseComponent);export{ThfNumberComponent};function ThfNumberComponent_tsickle_Closure_declarations(){ThfNumberComponent.decorators,ThfNumberComponent.ctorParameters,ThfNumberComponent.propDecorators,ThfNumberComponent.prototype.type,ThfNumberComponent.prototype.label,ThfNumberComponent.prototype.help,ThfNumberComponent.prototype.min,ThfNumberComponent.prototype.max,ThfNumberComponent.prototype.step}