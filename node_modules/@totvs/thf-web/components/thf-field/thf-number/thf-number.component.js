var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Input } from '@angular/core';
import { Validators } from '@angular/forms';
import { ThfInputBaseComponent } from '@totvs/thf-core/components/thf-field-base';
/**
 *
 *
 * \@description
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *  <example name='thf-number'>
 *  <file name='sample-thf-number.component.html'>
 *  <form #f="ngForm">
 *    <thf-number
 *    t-label="Idade"
 *    t-help="Você precisa ser maior de idade"
 *    t-placeholder="Informe sua idade"
 *    name="idade"
 *    [(ngModel)]="idade"
 *    t-min="18"
 *    t-required
 *    t-focus
 *    t-clean>
 *    </thf-number>
 *  </form>
 *  </file>
 *  <file name='sample-thf-number.component.ts'>
 *   import { Component } from '\@angular/core';
 *   import { ThfModule } from '\@totvs/thf-web';
 *
 *   \@Component({
 *      selector: 'sample-thf-number',
 *     templateUrl: './sample-thf-number.component.html'
 *   })
 *   export class SampleThfNumberComponent {
 *
 *     idade = 40;
 *
 *     constructor() { }
 *   }
 *  </file>
 * </example>
 */
var ThfNumberComponent = (function (_super) {
    __extends(ThfNumberComponent, _super);
    function ThfNumberComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'number';
        /**
         * Intervalo
         */
        _this.step = '';
        return _this;
    }
    Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
        /**
         * @param {?} min
         * @return {?}
         */
        set: function (min) {
            if (!isNaN(parseInt(min, 10))) {
                this.min = parseInt(min, 10);
                // Atualiza Validador do campo
                this.validators['min'] = this.getValidatorMin();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
        /**
         * @param {?} max
         * @return {?}
         */
        set: function (max) {
            if (!isNaN(parseInt(max, 10))) {
                this.max = parseInt(max, 10);
                // Atualiza Validador do campo
                this.validators['max'] = this.getValidatorMax();
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.ngOnInit = function () {
        this.validators['min'] = this.getValidatorMin();
        this.validators['max'] = this.getValidatorMax();
        this._onInit();
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMin = function () {
        return (this.min) ? Validators.min(this.min) : null;
    };
    /**
     * @return {?}
     */
    ThfNumberComponent.prototype.getValidatorMax = function () {
        return (this.max) ? Validators.max(this.max) : null;
    };
    ThfNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-number', template: " <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp [type]=\"type\" class=\"thf-input-elem\" (input)=\"eventOnInput($event)\" (focus)=\"eventOnFocus($event)\" (blur)=\"eventOnBlur($event)\" [attr.name]=\"name\" [attr.min]=\"min\" [attr.max]=\"max\" [attr.step]=\"step\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" *ngIf=\"clean!=='' && !disabled\"></thf-clean> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{errorPattern}} </div> </div> </thf-field-container> ", styles: [".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfNumberComponent.ctorParameters = function () { return []; };
    ThfNumberComponent.propDecorators = {
        'label': [{ type: Input, args: ['t-label',] },],
        'help': [{ type: Input, args: ['t-help',] },],
        'setMin': [{ type: Input, args: ['t-min',] },],
        'setMax': [{ type: Input, args: ['t-max',] },],
        'step': [{ type: Input, args: ['t-step',] },],
    };
    return ThfNumberComponent;
}(ThfInputBaseComponent));
export { ThfNumberComponent };
function ThfNumberComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfNumberComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfNumberComponent.ctorParameters;
    /** @type {?} */
    ThfNumberComponent.propDecorators;
    /** @type {?} */
    ThfNumberComponent.prototype.type;
    /**
     * Label do campo
     * @type {?}
     */
    ThfNumberComponent.prototype.label;
    /**
     * Texto de apoio para o campo
     * @type {?}
     */
    ThfNumberComponent.prototype.help;
    /**
     * Valor mínimo
     * @type {?}
     */
    ThfNumberComponent.prototype.min;
    /**
     * Valor máximo
     * @type {?}
     */
    ThfNumberComponent.prototype.max;
    /**
     * Intervalo
     * @type {?}
     */
    ThfNumberComponent.prototype.step;
}
