var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, HostListener, Input, Optional, Renderer, ViewChild, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { convertDateToISOExtended, isMobile } from '@totvs/thf-core/utils';
import { ThfDatepickerBaseComponent } from '@totvs/thf-core/components/thf-field-base';
/**
 *
 * \@example
 * <example name='thf-datepicker' title='Totvs Datepicker'>
 *  <file name='sample-thf-datepicker.component.html'> </file>
 *  <file name='sample-thf-datepicker.component.ts'> </file>
 * </example>
 */
var ThfDatepickerComponent = (function (_super) {
    __extends(ThfDatepickerComponent, _super);
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?=} ngControl
     */
    function ThfDatepickerComponent(renderer, el, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.validators = [];
        _this.date = new Date();
        _this.hour = 'T00:00:00+00:00';
        _this.el = el;
        _this.clickListener = renderer.listenGlobal('document', 'click', function (event) { return _this.wasClickedOnPicker(event); });
        return _this;
    }
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngAfterViewInit = function () {
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
        if (this.clean) {
            this.inputEl.nativeElement.style.paddingRight = '30px';
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngOnDestroy = function () {
        this.clickListener();
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.togglePicker = function () {
        var /** @type {?} */ datepickerEl = this.dialogPicker.nativeElement;
        if (this.disabled) {
            return;
        }
        if (datepickerEl.classList.contains('thf-datepicker-invisible')) {
            var /** @type {?} */ scrollInit = document.body.scrollWidth;
            // Primeiro joga o Datepicker na posição inicial
            // Em seguida, verifica se vai estourar o tamanho da tela
            datepickerEl.style.marginLeft = '0px';
            datepickerEl.classList.remove('thf-datepicker-invisible');
            this.picker.init();
            // Se estourar o tamanho da tela, então alinha o Datepicker à direita do componente
            /* istanbul ignore if */
            if (document.body.scrollWidth !== scrollInit) {
                // Ignorado teste devido a necessidade de testar em uma tela menor
                datepickerEl.style.marginLeft = (this.inputEl.nativeElement.offsetWidth - 288) + 'px';
            }
        }
        else {
            datepickerEl.classList.add('thf-datepicker-invisible');
            this.inputEl.nativeElement.disabled = false;
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.dateSelected = function () {
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.wasClickedOnPicker = function (event) {
        /* istanbul ignore else */
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target)) {
            this.dialogPicker.nativeElement.classList.add('thf-datepicker-invisible');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeyup = function ($event) {
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeypress = function ($event) {
        this.objMask.keypress($event);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeydown = function ($event) {
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasInvalidClass = function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.cleanInput = function () {
        this.inputEl.nativeElement.value = '';
        this.callOnChange('');
        this.date = undefined;
        if (this.required) {
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnBlur = function ($event) {
        if (!isMobile()) {
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnChange = function ($event) {
        if (isMobile()) {
            this.controlModel(this.inputEl.nativeElement.value);
            this.callOnChange(this.inputEl.nativeElement.value);
        }
        this.onchange.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnClick = function ($event) {
        var _this = this;
        if (isMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(function () { return _this.togglePicker(); }, 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.formatToDate = function (value) {
        var /** @type {?} */ dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.writeValue = function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                var /** @type {?} */ dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else {
                this.hour = value.substring(10, 25);
                var /** @type {?} */ day = parseInt(value.substring(8, 10), 10);
                var /** @type {?} */ month = parseInt(value.substring(5, 7), 10) - 1;
                var /** @type {?} */ year = parseInt(value.substring(0, 4), 10);
                var /** @type {?} */ dateTemp = new Date(year, month, day);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            this.controlModel(this.date);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasOverlayClass = function (element) {
        return element.classList.contains('thf-calendar-overlay');
    };
    ThfDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-datepicker', template: "<div class=\"thf-input-datepicker\"> <thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-field-flex-container\" > <input #inp type=\"text\" class=\"thf-input-elem\" (blur)=\"eventOnBlur($event)\" (change)=\"eventOnChange($event)\" (click)=\"eventOnClick($event)\" [attr.name]=\"name\" [placeholder]=\"placeholder\" [required]=\"required\" [disabled]=\"disabled\" [readonly]=\"readonly\"> <thf-clean #clean (click)=\"cleanInput()\" position=\"2\" *ngIf=\"clean && !disabled\"></thf-clean> <span #iconDatepicker (click)=\"togglePicker()\" class=\"thf-icon thf-icon-calendar thf-span-datepicker\"></span> </div> <div class=\"thf-datepicker thf-datepicker-invisible\" #dialogPicker> <thf-calendar #picker [t-locale]=\"locale\" [t-end]=\"end\" [t-start]=\"start\" [(t-date)]=\"date\" (t-submit)=\"dateSelected()\"> </thf-calendar> </div> <div class=\"thf-field-error\"> <div *ngIf=\"errorPattern!=='' && hasInvalidClass()\" class=\"thf-field-error\"> <span class=\"thf-icon thf-icon-close\"></span> {{ errorPattern }} </div> </div> </thf-field-container> </div> ", styles: [".thf-input-datepicker { max-width: 100%; } .thf-clean-arrow-mobile { z-index: 4; position: relative; width: 20px; float: right; height: 20px; background-color: white; bottom: 33px; right: 2px; } .thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-datepicker.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-datepicker.ng-invalid.ng-dirty .thf-input-elem { outline: none; border: solid 1px #c64840 !important; } thf-datepicker.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: absolute; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } .thf-datepicker { position: absolute; padding-top: 8px; z-index: 1000; } .thf-datepicker-invisible { display: none; } .thf-span-datepicker { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 18px; text-decoration: none; z-index: 100; cursor: pointer; } thf-datepicker.ng-invalid.ng-dirty .thf-span-datepicker { color: #c64840 !important; } "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfDatepickerComponent.ctorParameters = function () { return [
        { type: Renderer, },
        { type: ElementRef, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfDatepickerComponent.propDecorators = {
        'picker': [{ type: ViewChild, args: ['picker',] },],
        'dialogPicker': [{ type: ViewChild, args: ['dialogPicker', { read: ElementRef },] },],
        'iconDatepicker': [{ type: ViewChild, args: ['iconDatepicker', { read: ElementRef },] },],
        'inputEl': [{ type: ViewChild, args: ['inp', { read: ElementRef },] },],
        'cleanEl': [{ type: ViewChild, args: ['clean', { read: ElementRef },] },],
        'label': [{ type: Input, args: ['t-label',] },],
        'help': [{ type: Input, args: ['t-help',] },],
        'onKeyup': [{ type: HostListener, args: ['keyup', ['$event'],] },],
        'onKeypress': [{ type: HostListener, args: ['keypress', ['$event'],] },],
        'onKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return ThfDatepickerComponent;
}(ThfDatepickerBaseComponent));
export { ThfDatepickerComponent };
function ThfDatepickerComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfDatepickerComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfDatepickerComponent.ctorParameters;
    /** @type {?} */
    ThfDatepickerComponent.propDecorators;
    /** @type {?} */
    ThfDatepickerComponent.prototype.picker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.dialogPicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.iconDatepicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.inputEl;
    /** @type {?} */
    ThfDatepickerComponent.prototype.cleanEl;
    /**
     * Label do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.help;
    /** @type {?} */
    ThfDatepickerComponent.prototype.validators;
    /** @type {?} */
    ThfDatepickerComponent.prototype.date;
    /** @type {?} */
    ThfDatepickerComponent.prototype.hour;
    /** @type {?} */
    ThfDatepickerComponent.prototype.el;
    /** @type {?} */
    ThfDatepickerComponent.prototype.clickListener;
}
