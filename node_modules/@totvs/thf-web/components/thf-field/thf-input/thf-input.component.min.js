var __extends=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])};return function(n,e){t(n,e);function o(){this.constructor=n}n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}();import{Component,Input,ViewEncapsulation,ChangeDetectionStrategy}from"@angular/core";import{ThfInputBaseComponent}from"@totvs/thf-core/components/thf-field-base";var ThfInputComponent=function(t){__extends(n,t);function n(){return null!==t&&t.apply(this,arguments)||this}return n.decorators=[{type:Component,args:[{selector:"thf-input",template:' <thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <div class="thf-field-flex-container" > <input #inp [type]="type" class="thf-input-elem" (input)="eventOnInput($event)" (focus)="eventOnFocus($event)" (blur)="eventOnBlur($event)" (click)="eventOnClick($event)" [attr.name]="name" [placeholder]="placeholder" [required]="required" [disabled]="disabled" [readonly]="readonly"> <thf-clean #clean (click)="cleanInput()" *ngIf="clean!==\'\' && !disabled"></thf-clean> </div> <div class="thf-field-error"> <div *ngIf="errorPattern!==\'\' && hasInvalidClass()" class="thf-field-error"> <span class="thf-icon thf-icon-close"></span> {{errorPattern}} </div> </div> </thf-field-container> ',styles:[".thf-input-elem { width: 100%; line-height: 24px; font-family: NunitoSans; font-size: 16px; border-radius: 3px; background-color: #ffffff; box-shadow: inset 0px 2px 8px 0 #edefef; border: solid 1px #b7bebf !important; padding: 10px 15px 8px 15px; margin-top: 8px; } .thf-input-elem:disabled { background-color: #edefef; border: solid 1px #b7bebf; } thf-input.ng-valid .thf-input-elem:focus, thf-email.ng-valid .thf-input-elem:focus, thf-url.ng-valid .thf-input-elem:focus, thf-number.ng-valid .thf-input-elem:focus { outline: none; border: solid 1px #0c9abe !important; border: solid 1px var(--water-blue); } thf-input.ng-invalid.ng-dirty input, thf-email.ng-invalid.ng-dirty input, thf-url.ng-invalid.ng-dirty input, thf-number.ng-invalid.ng-dirty input { outline: none; border: solid 1px #c64840 !important; } thf-input.ng-invalid.ng-dirty .thf-span-clean, thf-email.ng-invalid.ng-dirty .thf-span-clean, thf-url.ng-invalid.ng-dirty .thf-span-clean, thf-number.ng-invalid.ng-dirty .thf-span-clean { color: #c64840 !important; } .thf-field-flex-container { display: flex; } .thf-text-clean { position: relative; width: 0px; font-size: 25px; color: #0c9abe; right: 35px; top: 10px; text-decoration: none; cursor: pointer; } .thf-field-error { display: block; height: 20px; font-family: NunitoSans; font-size: 12px; text-align: left; color: #c64840; padding-left: 2px; margin-top: 2px; } .thf-field-error span { padding-bottom: 2px; vertical-align: middle; font-size: 14px; font-weight: bold; } "],encapsulation:ViewEncapsulation.None,changeDetection:ChangeDetectionStrategy.OnPush}]}],n.ctorParameters=function(){return[]},n.propDecorators={label:[{type:Input,args:["t-label"]}],help:[{type:Input,args:["t-help"]}]},n}(ThfInputBaseComponent);export{ThfInputComponent};function ThfInputComponent_tsickle_Closure_declarations(){ThfInputComponent.decorators,ThfInputComponent.ctorParameters,ThfInputComponent.propDecorators,ThfInputComponent.prototype.label,ThfInputComponent.prototype.help}