var __extends=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){t(e,o);function s(){this.constructor=e}e.prototype=null===o?Object.create(o):(s.prototype=o.prototype,new s)}}();import{Component,ElementRef,Optional}from"@angular/core";import{NgControl}from"@angular/forms";import{ThfUploadFile}from"@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file";import{ThfUploadStatus}from"@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum";import{ThfUploadBaseComponent}from"@totvs/thf-core/components/thf-field-base";import{ThfUploadService}from"./thf-upload.service";var ThfUploadComponent=function(t){__extends(e,t);function e(e,o,s){var i=t.call(this,s)||this;return i.elementRef=e,i.uploadService=o,i}return e.prototype.onClick=function(){this.elementRef.nativeElement.querySelector("input").click()},e.prototype.onFileChange=function(t){var e=t.target.files;this.currentFiles=this.currentFiles||[],this.currentFiles=this.parseFiles(e),this.updateModel(this.currentFiles),this.autoUpload&&this.uploadFiles(this.currentFiles)},e.prototype.updateModel=function(t){if(t&&0===t.length)return this.onModelChange?this.onModelChange(t):this.ngModelChange.emit(t);this.onModelChange?this.onModelChange(t):this.ngModelChange.emit(t)},e.prototype.uploadFiles=function(t){var e=this,o=t.filter(function(t){return t.status!==ThfUploadStatus.Uploaded});this.uploadService.upload(this.url,o,this.onUpload,function(t,o){e.uploadingHandler(t,o)},function(t,o){e.successHandler(t),e.onSuccess.emit(o)},function(t,o){e.errorHandler(t),e.onError.emit(o)})},e.prototype.stopUpload=function(t){var e=this;this.uploadService.stopRequestByFile(t,function(){e.autoUpload?e.removeFile(t):e.stopUploadHandler(t)})},e.prototype.stopUploadHandler=function(t){t.status=ThfUploadStatus.None,this.removeFileNameClass(t.uid),this.setProgressStatus(t.uid,0,!1),this.setUploadStatus(t,"thf-upload-progress",100)},e.prototype.uploadingHandler=function(t,e){t.status=ThfUploadStatus.Uploading,this.setProgressStatus(t.uid,e,!0),this.setUploadStatus(t,"thf-upload-progress",e)},e.prototype.successHandler=function(t){t.status=ThfUploadStatus.Uploaded,this.setProgressStatus(t.uid,0,!1),this.setUploadStatus(t,"thf-upload-progress-success",100)},e.prototype.errorHandler=function(t){t.status=ThfUploadStatus.Error,this.setProgressStatus(t.uid,0,!1),this.setUploadStatus(t,"thf-upload-progress-error",100)},e.prototype.isStatusFile=function(t,e){return e.status===ThfUploadStatus[t]},e.prototype.hasAnyFileUploading=function(t){return!(!t||!t.length)&&t.some(function(t){return t.status===ThfUploadStatus.Uploading})},e.prototype.getThfIcon=function(t){switch(t.status){case ThfUploadStatus.Uploaded:return"thf-icon-ok";case ThfUploadStatus.Error:return"thf-icon-close";case ThfUploadStatus.None:return"thf-icon-info";case ThfUploadStatus.Uploading:default:return""}},e.prototype.setUploadStatus=function(t,e,o){var s=t.uid,i=this.elementRef.nativeElement.querySelector("div[id='"+s+"'].thf-upload-progress");i.classList.remove("thf-upload-progress-error","thf-upload-progress-success"),i.classList.add(e),o>5&&t.status!==ThfUploadStatus.None&&this.addFileNameClass(s)},e.prototype.setProgressStatus=function(t,e,o){var s=this.elementRef.nativeElement.querySelector("div[id='"+t+"'].thf-upload-progress").querySelector(".thf-upload-progress-status"),i=o?"block":"none";s.setAttribute("style","display: "+i+";"),s.setAttribute("style","width: "+e+"%;")},e.prototype.removeFile=function(t){var e=this.currentFiles.indexOf(t);this.currentFiles.splice(e,1)},e.prototype.getFileSize=function(t){var e=0;return t&&(e=Math.ceil(t/1024)),e+" KB"},e.prototype.writeValue=function(t){t&&(this.currentFiles=this.parseFiles(t))},e.prototype.addFileNameClass=function(t){this.elementRef.nativeElement.querySelector("div[id='"+t+"'].thf-upload-progress").querySelector(".thf-upload-filename").classList.add("thf-upload-filename-loading")},e.prototype.removeFileNameClass=function(t){this.elementRef.nativeElement.querySelector("div[id='"+t+"'].thf-upload-progress").querySelector(".thf-upload-filename").classList.remove("thf-upload-filename-loading")},e.prototype.parseFiles=function(t){for(var e=this.currentFiles||[],o=t.length,s=0;s<o;s++){var i=new ThfUploadFile(t[s]);this.checkRestrictions(i)&&(this.isMultiple?e.push(i):e.splice(0,1,i))}return e},e.prototype.checkRestrictions=function(t){var e=this.fileRestrictions;if(e){var o=e.allowedExtensions,s=e.minFileSize||0,i=e.maxFileSize||31457280,n=!o||this.isAllowedExtension(t.extension,o),l=t.size>=s&&t.size<=i;return n&&l}return!0},e.prototype.isAllowedExtension=function(t,e){return e.some(function(e){return e.toLowerCase()===t})},e.decorators=[{type:Component,args:[{selector:"thf-upload",template:'<thf-field-container [t-label]="label" [t-help]="help" [t-opcional]="!required"> <div class="thf-upload"> <div (click)="onClick()"> <input type="file" [name]="name" [id]="id" (change)="onFileChange($event)" [accept]="fileRestrictions?.allowedExtensions" [multiple]="isMultiple" class="thf-upload-input" [disabled]="hasAnyFileUploading(currentFiles) || !url || disabled"> <div for="file" class="thf-upload-button" [ngClass]="{\'thf-upload-button-disabled\': hasAnyFileUploading(currentFiles) || !url || disabled}"> Selecionar arquivo </div> </div> <div class="thf-upload-progress" *ngFor="let file of currentFiles" [id]="file.uid"> <div class="thf-upload-progress-status"></div> <div class="thf-upload-filename-foreground"> <div class="thf-upload-filename"> <span class="thf-icon {{ getThfIcon(file) }}"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div (click)="removeFile(file)" *ngIf="isStatusFile(\'None\', file)"> <span class="thf-upload-action"> Excluir </span> </div> <div (click)="stopUpload(file)" *ngIf="isStatusFile(\'Uploading\', file)"> <span class="thf-upload-action"> Cancelar </span> </div> <div (click)="uploadFiles([file])" *ngIf="isStatusFile(\'Error\', file)"> <span class="thf-upload-action"> Tentar Novamente </span> </div> </div> </div> <thf-button *ngIf="!autoUpload && currentFiles?.length > 0" [t-disabled]="hasAnyFileUploading(currentFiles)" t-primary="true" t-label="Iniciar envio" (t-click)="uploadFiles(currentFiles)"> </thf-button> </div> </thf-field-container> ',providers:[ThfUploadService]}]}],e.ctorParameters=function(){return[{type:ElementRef},{type:ThfUploadService},{type:NgControl,decorators:[{type:Optional}]}]},e}(ThfUploadBaseComponent);export{ThfUploadComponent};function ThfUploadComponent_tsickle_Closure_declarations(){ThfUploadComponent.decorators,ThfUploadComponent.ctorParameters,ThfUploadComponent.prototype.currentFiles,ThfUploadComponent.prototype.elementRef,ThfUploadComponent.prototype.uploadService}