var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, Optional } from '@angular/core';
import { NgControl } from '@angular/forms';
import { ThfUploadFile } from '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-file';
import { ThfUploadStatus } from '@totvs/thf-core/components/thf-field-base/thf-upload-base/thf-upload-status.enum';
import { ThfUploadBaseComponent } from '@totvs/thf-core/components/thf-field-base';
import { ThfUploadService } from './thf-upload.service';
/**
 *
 * \@example
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *   <file name="sample-thf-upload-labs.component.html"> </file>
 *   <file name="sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 */
var ThfUploadComponent = (function (_super) {
    __extends(ThfUploadComponent, _super);
    /**
     * @param {?} elementRef
     * @param {?} uploadService
     * @param {?=} ngControl
     */
    function ThfUploadComponent(elementRef, uploadService, ngControl) {
        var _this = _super.call(this, ngControl) || this;
        _this.elementRef = elementRef;
        _this.uploadService = uploadService;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfUploadComponent.prototype.onClick = function () {
        var /** @type {?} */ input = this.elementRef.nativeElement.querySelector('input');
        input.click();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfUploadComponent.prototype.onFileChange = function (event) {
        var /** @type {?} */ files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel(this.currentFiles);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.updateModel = function (files) {
        if (files && files.length === 0) {
            return this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
        }
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadFiles = function (files) {
        var _this = this;
        var /** @type {?} */ filesFiltered = files.filter(function (file) {
            return file.status !== ThfUploadStatus.Uploaded;
        });
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, function (file, porcent) {
            // UPLOADING
            _this.uploadingHandler(file, porcent);
        }, function (file, eventResponse) {
            // SUCCESS
            _this.successHandler(file);
            _this.onSuccess.emit(eventResponse);
        }, function (file, eventError) {
            // Error
            _this.errorHandler(file);
            _this.onError.emit(eventError);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUpload = function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.stopUploadHandler = function (file) {
        file.status = ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    };
    /**
     * @param {?} file
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.uploadingHandler = function (file, porcent) {
        file.status = ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, porcent, true);
        this.setUploadStatus(file, 'thf-upload-progress', porcent);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.successHandler = function (file) {
        file.status = ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.errorHandler = function (file) {
        file.status = ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    };
    /**
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.isStatusFile = function (status, file) {
        return file.status === ThfUploadStatus[status];
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.hasAnyFileUploading = function (files) {
        if (files && files.length) {
            return files.some(function (file) { return file.status === ThfUploadStatus.Uploading; });
        }
        return false;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.getThfIcon = function (file) {
        switch (file.status) {
            case ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case ThfUploadStatus.Error:
                return 'thf-icon-close';
            case ThfUploadStatus.None:
                return 'thf-icon-info';
            case ThfUploadStatus.Uploading:
            default:
                return '';
        }
    };
    /**
     * @param {?} file
     * @param {?} className
     * @param {?} porcent
     * @return {?}
     */
    ThfUploadComponent.prototype.setUploadStatus = function (file, className, porcent) {
        var /** @type {?} */ uid = file.uid;
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (porcent > 5 && file.status !== ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    };
    /**
     * @param {?} uid
     * @param {?} porcent
     * @param {?} isShow
     * @return {?}
     */
    ThfUploadComponent.prototype.setProgressStatus = function (uid, porcent, isShow) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ divProgress = divStatus.querySelector('.thf-upload-progress-status');
        var /** @type {?} */ isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', "display: " + isDisplay + ";");
        divProgress.setAttribute('style', "width: " + porcent + "%;");
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFile = function (file) {
        var /** @type {?} */ index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    ThfUploadComponent.prototype.getFileSize = function (size) {
        var /** @type {?} */ kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadComponent.prototype.writeValue = function (model) {
        if (model) {
            this.currentFiles = this.parseFiles(model);
        }
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.addFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    };
    /**
     * @param {?} uid
     * @return {?}
     */
    ThfUploadComponent.prototype.removeFileNameClass = function (uid) {
        var /** @type {?} */ divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
        var /** @type {?} */ fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    };
    /**
     * @param {?} files
     * @return {?}
     */
    ThfUploadComponent.prototype.parseFiles = function (files) {
        var /** @type {?} */ thfUploadFiles = this.currentFiles || [];
        var /** @type {?} */ filesLength = files.length;
        for (var /** @type {?} */ i = 0; i < filesLength; i++) {
            var /** @type {?} */ file = new ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                if (this.isMultiple) {
                    thfUploadFiles.push(file);
                }
                else {
                    thfUploadFiles.splice(0, 1, file);
                }
            }
        }
        return thfUploadFiles;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ThfUploadComponent.prototype.checkRestrictions = function (file) {
        var /** @type {?} */ restrictions = this.fileRestrictions;
        if (restrictions) {
            var /** @type {?} */ allowedExtensions = restrictions.allowedExtensions;
            var /** @type {?} */ minFileSize = restrictions.minFileSize || 0;
            var /** @type {?} */ maxFileSize = restrictions.maxFileSize || 31457280; // 30MB
            var /** @type {?} */ isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            var /** @type {?} */ isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @param {?} extension
     * @param {?} allowedExtensions
     * @return {?}
     */
    ThfUploadComponent.prototype.isAllowedExtension = function (extension, allowedExtensions) {
        return allowedExtensions.some(function (ext) {
            return ext.toLowerCase() === extension;
        });
    };
    ThfUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-upload', template: "<thf-field-container [t-label]=\"label\" [t-help]=\"help\" [t-opcional]=\"!required\"> <div class=\"thf-upload\"> <div (click)=\"onClick()\"> <input type=\"file\" [name]=\"name\" [id]=\"id\" (change)=\"onFileChange($event)\" [accept]=\"fileRestrictions?.allowedExtensions\" [multiple]=\"isMultiple\" class=\"thf-upload-input\" [disabled]=\"hasAnyFileUploading(currentFiles) || !url || disabled\"> <div for=\"file\" class=\"thf-upload-button\" [ngClass]=\"{'thf-upload-button-disabled': hasAnyFileUploading(currentFiles) || !url || disabled}\"> Selecionar arquivo </div> </div> <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\"> <div class=\"thf-upload-progress-status\"></div> <div class=\"thf-upload-filename-foreground\"> <div class=\"thf-upload-filename\"> <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }} </div> <div (click)=\"removeFile(file)\" *ngIf=\"isStatusFile('None', file)\"> <span class=\"thf-upload-action\"> Excluir </span> </div> <div (click)=\"stopUpload(file)\" *ngIf=\"isStatusFile('Uploading', file)\"> <span class=\"thf-upload-action\"> Cancelar </span> </div> <div (click)=\"uploadFiles([file])\" *ngIf=\"isStatusFile('Error', file)\"> <span class=\"thf-upload-action\"> Tentar Novamente </span> </div> </div> </div> <thf-button *ngIf=\"!autoUpload && currentFiles?.length > 0\" [t-disabled]=\"hasAnyFileUploading(currentFiles)\" t-primary=\"true\" t-label=\"Iniciar envio\" (t-click)=\"uploadFiles(currentFiles)\"> </thf-button> </div> </thf-field-container> ",
                    providers: [ThfUploadService]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfUploadComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ThfUploadService, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    return ThfUploadComponent;
}(ThfUploadBaseComponent));
export { ThfUploadComponent };
function ThfUploadComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfUploadComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfUploadComponent.ctorParameters;
    /** @type {?} */
    ThfUploadComponent.prototype.currentFiles;
    /** @type {?} */
    ThfUploadComponent.prototype.elementRef;
    /** @type {?} */
    ThfUploadComponent.prototype.uploadService;
}
