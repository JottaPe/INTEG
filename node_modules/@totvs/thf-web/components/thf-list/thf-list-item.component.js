import { Component, Input, ElementRef } from '@angular/core';
import { ViewContainerRef, ViewChild } from '@angular/core';
/**
 * \@description
 *
 * Este componente é utilizado em conjunto thf-list.
 */
var ThfListItemComponent = (function () {
    /**
     * @param {?} myElement
     * @param {?} viewRef
     */
    function ThfListItemComponent(myElement, viewRef) {
        this.myElement = myElement;
        this.viewRef = viewRef;
        /**
         * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
         * se passar de duas ações é exibido um menu com todas as opções.
         */
        this.actions = [];
        this.showLink = true;
        this.showContent = true;
        this._parentRef = viewRef['_view']['component'];
        this.collapsed = true;
    }
    /**
     * @return {?}
     */
    ThfListItemComponent.prototype.ngAfterContentInit = function () {
        if (this.content && this.content.nativeElement.children.length === 0) {
            this.showContent = false;
        }
        if (this.detailsContent && this.detailsContent.nativeElement.children.length === 0) {
            this.showLink = false;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfListItemComponent.prototype.showDetails = function (index) {
        var /** @type {?} */ nativeElement = this.myElement.nativeElement;
        var /** @type {?} */ spanElement = nativeElement.querySelector("#spanIcon" + index + "Id");
        var /** @type {?} */ colElement = nativeElement.querySelector("#col" + index + "Id");
        if (spanElement) {
            var /** @type {?} */ icon = spanElement.className.includes('thf-icon-arrow-up') ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up';
            var /** @type {?} */ text = icon === 'thf-icon-arrow-up' ? 'Ocultar detalhes' : 'Exibir detalhes';
            nativeElement.querySelector('.thf-list-details').innerHTML = "<span id=\"spanIcon" + index + "Id\" class=\"" + icon + "\"></span> " + text;
        }
        if (colElement) {
            colElement.className = colElement.className === 'collapse' ? 'not-collapse' : 'collapse';
        }
    };
    Object.defineProperty(ThfListItemComponent.prototype, "parentRef", {
        /**
         * @return {?}
         */
        get: function () {
            return this._parentRef;
        },
        enumerable: true,
        configurable: true
    });
    ThfListItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-list-item', template: "<div class=\"thf-list-border\"> <div class=\"thf-list-header-container\"> <div *ngIf=\"title\" class=\"thf-list-title-container\"> <span class=\"thf-list-title\">{{title}}</span> </div> <div id=\"divActionButtonsId\" class=\"thf-list-actions-button\" *ngIf=\"actions.length > 0 && actions.length <= 2\"> <thf-button *ngFor=\"let action of actions\" [t-label]=\"action.label\" (t-click)=\"parentRef[action.function](index)\" t-small=\"true\"></thf-button> </div> <div id=\"divActionDropdownId\" class=\"thf-list-more-button\" *ngIf=\"actions.length > 0 && actions.length > 2\"> <a href=\"javascript:void(0);\" id=\"dropdownMenu{{index}}\" data-toggle=\"dropdown\"><span class=\"thf-icon thf-icon-more\"></span></a> <ul class=\"dropdown-menu thf-list-more-base\" aria-labelledby=\"dropdownMenu\"> <li class=\"thf-list-li-margin\" *ngFor=\"let action of actions\"> <a href=\"javascript:void(0);\" class=\"thf-list-more-text\" (click)=\"parentRef[action.function](index)\">{{action.label}}</a> </li> </ul> </div>  </div> <div class=\"thf-list-item-container\" #content [hidden]=\"!showContent\"> <ng-content select=\"thf-list-item-content\"></ng-content> </div> <div select=\"details\" class=\"thf-list-details-link text-center\" [hidden]=\"!showLink\"> <a href=\"javascript:void(0);\" class=\"thf-list-details\" (click)=\"showDetails(index)\"><span id=\"spanIcon{{index}}Id\" class=\"thf-icon thf-icon-arrow-down\"></span> Exibir detalhes</a> <div id=\"col{{index}}Id\" class=\"collapse\" #detailsContent> <ng-content select=\"thf-list-item-detail\"></ng-content> </div> </div> </div>", styles: [".thf-list-title { display: block; height: 22px; font-family: NunitoSans; font-size: 24px; line-height: 1.25; text-align: left; color: #0c9abe; margin: 19px 0 27px 27px; } .thf-list-title-container { width: 60%; } .thf-list-border { border-radius: 3px; background-color: #ffffff; border: solid 1px #dbdedf; margin-bottom: 16px; } .thf-list-actions-button, .thf-list-more-button { padding-right: 38px; margin-top: 18px; width: 40%; text-align: end; } .thf-list-header-container { width: 100%; display: flex; } .thf-list-item-container { padding-left: 27px; margin-bottom: 20px; } thf-button { padding-left: 10px; } .thf-list-li-margin { padding-top: 8px; padding-bottom: 8px; } .thf-list-more-text { font-family: NunitoSans; font-size: 14px !important; line-height: 1.71; text-align: left; color: #1d9abc; padding-left: 16px; } .thf-list-more-text:hover { color: #c44944; } .dropdown-menu { left: 82% !important; top: initial !important; } .thf-list-more-base { border-radius: 3px; background-color: #ffffff; border: none; left: auto; box-shadow: 0px 1px 4px 0 rgba(0, 0, 0, 0.3) !important; } .thf-list-details { height: 12px; font-family: 'NunitoSans-Bold'; font-size: 14px !important; line-height: 1.71; text-align: left; color: #1d9abc; padding-top: 13px; padding-bottom: 15px; } .thf-list-details-link { border-top: solid 1px #dbdedf; margin-top: 49px; } "]
                },] },
    ];
    /**
     * @nocollapse
     */
    ThfListItemComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ViewContainerRef, },
    ]; };
    ThfListItemComponent.propDecorators = {
        'title': [{ type: Input, args: ['t-title',] },],
        'index': [{ type: Input, args: ['t-index',] },],
        'actions': [{ type: Input, args: ['t-actions',] },],
        'detailsContent': [{ type: ViewChild, args: ['detailsContent',] },],
        'content': [{ type: ViewChild, args: ['content',] },],
    };
    return ThfListItemComponent;
}());
export { ThfListItemComponent };
function ThfListItemComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfListItemComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfListItemComponent.ctorParameters;
    /** @type {?} */
    ThfListItemComponent.propDecorators;
    /**
     * Parâmetro que recebe um titulo a ser renderizado no item.
     * @type {?}
     */
    ThfListItemComponent.prototype.title;
    /**
     * Índice do for utilizado para controles internos do componente.
     * @type {?}
     */
    ThfListItemComponent.prototype.index;
    /**
     * Lista de ações a ser executadas no item. Ao passar até duas ações é exibido apenas botões,
     * se passar de duas ações é exibido um menu com todas as opções.
     * @type {?}
     */
    ThfListItemComponent.prototype.actions;
    /** @type {?} */
    ThfListItemComponent.prototype.detailsContent;
    /** @type {?} */
    ThfListItemComponent.prototype.content;
    /** @type {?} */
    ThfListItemComponent.prototype._parentRef;
    /** @type {?} */
    ThfListItemComponent.prototype.collapsed;
    /** @type {?} */
    ThfListItemComponent.prototype.showLink;
    /** @type {?} */
    ThfListItemComponent.prototype.showContent;
    /** @type {?} */
    ThfListItemComponent.prototype.myElement;
    /** @type {?} */
    ThfListItemComponent.prototype.viewRef;
}
