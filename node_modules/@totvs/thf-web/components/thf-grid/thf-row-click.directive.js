import { Output, Directive, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
var /** @type {?} */ hasClass = function (el, className) { return new RegExp(className).test(el.className); };
var /** @type {?} */ isChildOf = function (el, className) {
    while (el && el.parentElement) {
        if (hasClass(el.parentElement, className)) {
            return true;
        }
        el = el.parentElement;
    }
    return false;
};
var /** @type {?} */ eq = function (s1, s2) { return s1.toLowerCase() === s2.toLowerCase(); };
var /** @type {?} */ closest = function (el, nodeName) {
    while (el && el.parentElement) {
        if (eq(el.nodeName, nodeName) || eq(el.parentElement.nodeName, nodeName)) {
            return el.parentElement;
        }
        el = el.parentElement;
    }
    return null;
};
var ThfRowClickDirective = (function () {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    function ThfRowClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.editRow = new EventEmitter();
        this.saveRow = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ThfRowClickDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer.listen(this.el.nativeElement, 'click', function (_a) {
            var target = _a.target;
            var /** @type {?} */ tr = closest(target, 'tr');
            if (tr && !hasClass(tr, 'k-grid-edit-row') && isChildOf(target, 'k-grid-content')) {
                _this.editRow.emit(tr.rowIndex);
            }
        });
        this.renderer.listen('document', 'click', function (_a) {
            var target = _a.target;
            if (!isChildOf(target, 'k-grid-content') && !isChildOf(target, 'k-grid-toolbar')) {
                _this.saveRow.emit();
            }
        });
    };
    ThfRowClickDirective.decorators = [
        { type: Directive, args: [{ selector: '[row-click]' },] },
    ];
    /**
     * @nocollapse
     */
    ThfRowClickDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    ThfRowClickDirective.propDecorators = {
        'editRow': [{ type: Output },],
        'saveRow': [{ type: Output },],
    };
    return ThfRowClickDirective;
}());
export { ThfRowClickDirective };
function ThfRowClickDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfRowClickDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ThfRowClickDirective.ctorParameters;
    /** @type {?} */
    ThfRowClickDirective.propDecorators;
    /** @type {?} */
    ThfRowClickDirective.prototype.editRow;
    /** @type {?} */
    ThfRowClickDirective.prototype.saveRow;
    /** @type {?} */
    ThfRowClickDirective.prototype.el;
    /** @type {?} */
    ThfRowClickDirective.prototype.renderer;
}
