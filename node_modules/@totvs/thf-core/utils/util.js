/**
 * @param {?} val
 * @return {?}
 */
export function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    return !!val;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
export function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @return {?}
 */
export function callFunction(fn, context) {
    if (isTypeof(fn, 'function')) {
        fn.call(context);
    }
    else {
        context[fn]();
    }
}
/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
export function convertIsoToDate(value, start, end) {
    if (value) {
        var /** @type {?} */ day = parseInt(value.substring(8, 10), 10);
        var /** @type {?} */ month = parseInt(value.substring(5, 7), 10);
        var /** @type {?} */ year = parseInt(value.substring(0, 4), 10);
        if (start) {
            return new Date(year, month - 1, day, 0, 0, 0);
        }
        else if (end) {
            return new Date(year, month - 1, day, 23, 59, 59);
        }
        else {
            var /** @type {?} */ milliseconds = Date.parse(value);
            var /** @type {?} */ timezone = new Date().getTimezoneOffset() * 60000;
            return new Date(milliseconds + timezone);
        }
    }
}
/**
 * @param {?} value
 * @param {?} time
 * @return {?}
 */
export function convertDateToISOExtended(value, time) {
    if (value) {
        var /** @type {?} */ day = value.getDate() < 10 ? '0' + value.getDate() : value.getDate();
        var /** @type {?} */ month = value.getMonth() + 1 < 10 ? '0' + (value.getMonth() + 1) : (value.getMonth() + 1);
        var /** @type {?} */ year = value.getFullYear();
        var /** @type {?} */ dateString = value.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * @return {?}
 */
export function isMobile() {
    var /** @type {?} */ userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
/**
 * @return {?}
 */
export function checkIsNativeIOS() {
    var /** @type {?} */ isUserAgentMobile = isMobile();
    return isUserAgentMobile ? isUserAgentMobile.some(function (os) { return os === 'iPhone' || os === 'iPad'; }) : false;
}
/**
 * @param {?} value
 * @return {?}
 */
export function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
