import{HttpResponse}from"@angular/common/http";import"rxjs/add/operator/do";import{ThfToasterOrientation}from"../../services/thf-notification-base/thf-toaster-base/thf-toaster-orientation.enum";var ThfHttpInterceptorBaseService=function(){function t(t,e){this.notification=t,this.dialog=e,this.notificationTypes=["success","warning","error","information"]}return t.prototype.intercept=function(t,e){var o=this;return e.handle(t).do(function(t){t instanceof HttpResponse&&o.processResponse(t)},function(t){o.processErrorResponse(t)})},t.prototype.processResponse=function(t){var e=this;if(t.body&&t.body.totvs_messages){var o=t.body.totvs_messages;o instanceof Array?o.forEach(function(t){e.showNotification(t)}):this.showNotification(o)}},t.prototype.processErrorResponse=function(t){var e=t.error;e&&e.message&&this.showErrorNotification(e)},t.prototype.showNotification=function(t){this.notificationTypes.includes(t.type)&&this.notification[t.type]({message:t.detail})},t.prototype.showErrorNotification=function(t){var e=this.generateErrorNotificationAction(t);this.notification.error({message:t.message,orientation:ThfToasterOrientation.Top,actionLabel:e.label,action:e.action})},t.prototype.generateErrorNotificationAction=function(t){var e,o,i=t.message.concat(t.detailedMessage);return t.details&&t.details instanceof Array&&t.details.forEach(function(t){i+="\n"+t.message}),!t.helpUrl||t.detailedMessage||t.details?(t.detailedMessage||t.details)&&(o="Detalhes",e=this.generateDialogDetailFunction(t,i)):(o="Ajuda",e=this.generateUrlHelpFunction(t.helpUrl)),{label:o,action:e}},t.prototype.generateUrlHelpFunction=function(t){return function(){window.open(t,"_blank")}},t.prototype.generateDialogDetailFunction=function(t,e){var o=this;return function(){o.dialog.alert({title:t.code,message:e,ok:t.helpUrl?o.generateUrlHelpFunction(t.helpUrl):void 0})}},t}();export{ThfHttpInterceptorBaseService};function ThfHttpInterceptorBaseService_tsickle_Closure_declarations(){ThfHttpInterceptorBaseService.prototype.notificationTypes,ThfHttpInterceptorBaseService.prototype.notification,ThfHttpInterceptorBaseService.prototype.dialog}