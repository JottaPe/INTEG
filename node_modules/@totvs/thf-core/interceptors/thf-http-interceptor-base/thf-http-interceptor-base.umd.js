(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('rxjs/add/operator/do')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common/http', 'rxjs/add/operator/do'], factory) :
	(factory((global['thf-http-interceptor-base'] = {}),global.http));
}(this, (function (exports,http) { 'use strict';

var ThfToasterOrientation = {};
ThfToasterOrientation.Bottom = 0;
ThfToasterOrientation.Top = 1;
ThfToasterOrientation[ThfToasterOrientation.Bottom] = "Bottom";
ThfToasterOrientation[ThfToasterOrientation.Top] = "Top";

/**
 * \@description
 *
 * O serviço Totvs Http Interceptor realiza o tratamento de requisições Http do padrão do Guia de implementação das APIs
 * TOTVS [http://tdn.totvs.com/pages/releaseview.action?pageId=271660444] para adaptá-lo ao modelo do THF.
 *
 * Ao analisar o objeto totvs_messages retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erro, com códigos 4xx e 5xx são tratados automaticamente sem a necessidade de incluir o totvs_messages.
 *
 * O content-type deve ser ```application/json``` e a estrutura de mensagem recebida pelo serviço é:
 * - totvs_messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - detail: detalhamento ou texto da mensagem.
 *
 * Para utilizar o thf-http-interceptor em sua aplicação apenas adicione no módulo:
 *
 * ```
 *  import { HTTP_INTERCEPTORS } from '\@angular/common/http';
 *  import { ThfHttpInterceptorService } from '\@totvs/thf-web/interceptors/thf-http-interceptor/thf-http-interceptor.service';
 * ```
 *
 * ```
 * \@NgModule({
 *  ...
 *  providers: [
 *   {
 *      provide: HTTP_INTERCEPTORS,
 *      useClass: ThfHttpInterceptorService,
 *      multi: true
 *    }
 * ...
 * ```
 * Ao realizar suas requisições, utilize o ```Http Client```, conforme exemplo abaixo:
 *
 * ```
 *  import { HttpClient } from '\@angular/common/http';
 *  import { HTTP_INTERCEPTORS } from '\@angular/common/http';
 * ```
 *
 * ``` this.http.get('http://localhost:3000/api/users'); ```
 *
 * @abstract
 */
var ThfHttpInterceptorBaseService = (function () {
    /**
     * @param {?} notification
     * @param {?} dialog
     */
    function ThfHttpInterceptorBaseService(notification, dialog) {
        this.notification = notification;
        this.dialog = dialog;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.intercept = function (request, next) {
        var _this = this;
        return next.handle(request).do(function (response) {
            if (response instanceof http.HttpResponse) {
                _this.processResponse(response);
            }
        }, function (error) {
            _this.processErrorResponse(error);
        });
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processResponse = function (response) {
        var _this = this;
        if (response.body && response.body.totvs_messages) {
            var /** @type {?} */ totvsMessages = response.body.totvs_messages;
            if (totvsMessages instanceof Array) {
                totvsMessages.forEach(function (totvsMessage) {
                    _this.showNotification(totvsMessage);
                });
            }
            else {
                this.showNotification(totvsMessages);
            }
        }
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.processErrorResponse = function (response) {
        var /** @type {?} */ errorResponse = response.error;
        if (errorResponse && errorResponse.message) {
            this.showErrorNotification(errorResponse);
        }
    };
    /**
     * @param {?} totvsMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showNotification = function (totvsMessage) {
        if (this.notificationTypes.includes(totvsMessage.type)) {
            this.notification[totvsMessage.type]({ message: totvsMessage.detail });
        }
    };
    /**
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.showErrorNotification = function (errorResponse) {
        var /** @type {?} */ notificationAction = this.generateErrorNotificationAction(errorResponse);
        this.notification.error({
            message: errorResponse.message,
            orientation: ThfToasterOrientation.Top,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    };
    /**
     * @param {?} errorResponse
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateErrorNotificationAction = function (errorResponse) {
        var /** @type {?} */ notificationAction;
        var /** @type {?} */ notificationLabel;
        var /** @type {?} */ notificationMessage = errorResponse.message.concat(errorResponse.detailedMessage);
        if (errorResponse.details && errorResponse.details instanceof Array) {
            errorResponse.details.forEach(function (detailError) {
                notificationMessage += "\n" + detailError.message;
            });
        }
        if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {
            notificationLabel = 'Ajuda';
            notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);
        }
        else if (errorResponse.detailedMessage || errorResponse.details) {
            notificationLabel = 'Detalhes';
            notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    };
    /**
     * @param {?} helpUrl
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateUrlHelpFunction = function (helpUrl) {
        return function () { window.open(helpUrl, '_blank'); };
    };
    /**
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    ThfHttpInterceptorBaseService.prototype.generateDialogDetailFunction = function (errorResponse, notificationMessage) {
        var _this = this;
        return function () {
            _this.dialog.alert({
                title: errorResponse.code,
                message: notificationMessage,
                ok: errorResponse.helpUrl ? _this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined
            });
        };
    };
    return ThfHttpInterceptorBaseService;
}());

exports.ThfHttpInterceptorBaseService = ThfHttpInterceptorBaseService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
