(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['thf-button-base'] = {}),global.core));
}(this, (function (exports,core) { 'use strict';

/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    return !!val;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */

/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */

/**
 * @param {?} value
 * @param {?} time
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @return {?}
 */

/**
 * @param {?} value
 * @return {?}
 */

/**
 * \@description
 *
 * Para utilização em telas com a necessidade de incluir botões dentro do padrão visual da Totvs.
 */
var ThfButtonBaseComponent = (function () {
    function ThfButtonBaseComponent() {
        /**
         * Recebe uma ação de clique do controller da página.
         */
        this.click = new core.EventEmitter();
    }
    Object.defineProperty(ThfButtonBaseComponent.prototype, "setPrimary", {
        /**
         * @param {?} primary
         * @return {?}
         */
        set: function (primary) {
            this.primary = primary === '' ? false : convertToBoolean(primary);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "setSmall", {
        /**
         * @param {?} small
         * @return {?}
         */
        set: function (small) {
            this.small = small === '' ? false : convertToBoolean(small);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonBaseComponent.prototype, "setDisabled", {
        /**
         * @param {?} disabled
         * @return {?}
         */
        set: function (disabled) {
            this.disabled = disabled === '' ? false : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfButtonBaseComponent.prototype.onClick = function () {
        this.click.emit(null);
    };
    ThfButtonBaseComponent.propDecorators = {
        'id': [{ type: core.Input, args: ['t-id',] },],
        'label': [{ type: core.Input, args: ['t-label',] },],
        'icon': [{ type: core.Input, args: ['t-icon',] },],
        'setPrimary': [{ type: core.Input, args: ['t-primary',] },],
        'setSmall': [{ type: core.Input, args: ['t-small',] },],
        'setDisabled': [{ type: core.Input, args: ['t-disabled',] },],
        'click': [{ type: core.Output, args: ['t-click',] },],
    };
    return ThfButtonBaseComponent;
}());

exports.ThfButtonBaseComponent = ThfButtonBaseComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
