import { Input } from '@angular/core';
import { convertToBoolean } from './../../utils/index';
/**
 * \@description
 *
 * O componente thf-modal é utilizado para incluir conteúdos rápidos e informativos.
 * O rodapé possui um botão de ação primária, e um de ação secundária no qual permite adicionar uma ação, e um label por botão.
 * Além de title no cabeçalho do componente, e o conteúdo no body do componente para inserir algum conteúdo informativo.
 */
var ThfModalBaseComponent = (function () {
    function ThfModalBaseComponent() {
        /**
         * Define o tamanho da modal, esta proriedade aceita os valores 'sm' (pequeno), 'md' (médio), 'lg' (grande),
         * 'xl' (extra grande) e 'auto' (automático).
         * Quando informado 'auto' o modal calculará automaticamente o tamanho da modal baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como 'md' (médio).
         */
        this.modalSize = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma. Informe o valor "true" para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        /**
         * Permite esconder o ícone de fechar do título da modal
         */
        this.hideClose = false;
        // Controla se o modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
    }
    Object.defineProperty(ThfModalBaseComponent.prototype, "setModalSize", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var /** @type {?} */ sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this.modalSize = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setHideClose", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.hideClose = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.ngOnInit = function () {
        if (!this.primaryAction) {
            throw new Error('Parâmetro "t-primary-action" é obrigatório.');
        }
        else if (!this.primaryAction.label || !this.primaryAction.action) {
            throw new Error('Parâmetro "t-primary-action" inválido.');
        }
    };
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.onClickOut = function () {
        if (this.clickOut) {
            this.close();
        }
    };
    /**
     * Função para fechar a modal
     * @return {?}
     */
    ThfModalBaseComponent.prototype.close = function () {
        this.isHidden = true;
    };
    /**
     * Função para abrir a modal
     * @return {?}
     */
    ThfModalBaseComponent.prototype.open = function () {
        this.isHidden = false;
    };
    ThfModalBaseComponent.propDecorators = {
        'title': [{ type: Input, args: ['t-title',] },],
        'primaryAction': [{ type: Input, args: ['t-primary-action',] },],
        'secondaryAction': [{ type: Input, args: ['t-secondary-action',] },],
        'setModalSize': [{ type: Input, args: ['t-size',] },],
        'setClickOut': [{ type: Input, args: ['t-click-out',] },],
        'setHideClose': [{ type: Input, args: ['t-hide-close',] },],
    };
    return ThfModalBaseComponent;
}());
export { ThfModalBaseComponent };
function ThfModalBaseComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfModalBaseComponent.propDecorators;
    /**
     * Título da modal.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.title;
    /**
     * Deve ser definido um objeto que implementa a interface ThfModalAction contendo a label e a função da primeira ação.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.primaryAction;
    /**
     * Deve ser definido um objeto que implementa a interface ThfModalAction contendo a label e a função da segunda ação.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.secondaryAction;
    /**
     * Define o tamanho da modal, esta proriedade aceita os valores 'sm' (pequeno), 'md' (médio), 'lg' (grande),
     * 'xl' (extra grande) e 'auto' (automático).
     * Quando informado 'auto' o modal calculará automaticamente o tamanho da modal baseado em seu conteúdo.
     * Caso não seja informado um valor, a modal terá o tamanho definido como 'md' (médio).
     * @type {?}
     */
    ThfModalBaseComponent.prototype.modalSize;
    /**
     * Define o fechamento da modal ao clicar fora da mesma. Informe o valor "true" para ativar o fechamento ao clicar fora da modal.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.clickOut;
    /**
     * Permite esconder o ícone de fechar do título da modal
     * @type {?}
     */
    ThfModalBaseComponent.prototype.hideClose;
    /** @type {?} */
    ThfModalBaseComponent.prototype.isHidden;
}
