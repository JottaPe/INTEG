import { ChangeDetectorRef, ElementRef, EventEmitter, Input, Optional, Output } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
/**
 * \@description
 *
 * O componente thf-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O thf-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 *
 * > Quando utilizar o componente fora da tag Form, deve ser informado a diretiva ngDefaultControl.
 *
 * @abstract
 */
var ThfSelectBaseComponent = (function () {
    /**
     * @param {?} element
     * @param {?} changeDetector
     * @param {?=} ngControl
     */
    function ThfSelectBaseComponent(element, changeDetector, ngControl) {
        this.element = element;
        this.changeDetector = changeDetector;
        /**
         * Indica que o campo será desabilitado.
         */
        this.disabled = false;
        /**
         * Indica que o campo será obrigatório
         */
        this.required = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.validators = [];
        this.element = element;
        this.ngControl = ngControl;
    }
    /**
     * @abstract
     * @param {?} selectOption
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.updateModel = function (selectOption) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.writeValue = function (value) { };
    /**
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.ngOnInit = function () {
        // Adicionar este componente ao ngControl, para que o formulário encontre-o
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
            if (this.required) {
                this.validators.push(Validators.required);
            }
            this.ngControl.control.setValidators(this.validators);
        }
    };
    /**
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.ngAfterViewChecked = function () {
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.onChange = function () {
        this.change.emit(null);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSelectBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @nocollapse
     */
    ThfSelectBaseComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfSelectBaseComponent.propDecorators = {
        'disabled': [{ type: Input, args: ['t-disabled',] },],
        'required': [{ type: Input, args: ['t-required',] },],
        'label': [{ type: Input, args: ['t-label',] },],
        'name': [{ type: Input, args: ['name',] },],
        'help': [{ type: Input, args: ['t-help',] },],
        'placeholder': [{ type: Input, args: ['t-placeholder',] },],
        'options': [{ type: Input, args: ['t-options',] },],
        'change': [{ type: Output, args: ['t-change',] },],
        'ngModelChange': [{ type: Output, args: ['ngModelChange',] },],
    };
    return ThfSelectBaseComponent;
}());
export { ThfSelectBaseComponent };
function ThfSelectBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfSelectBaseComponent.ctorParameters;
    /** @type {?} */
    ThfSelectBaseComponent.propDecorators;
    /**
     * Indica que o campo será desabilitado.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será obrigatório
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.required;
    /**
     * Adiciona uma label no componente.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.label;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.name;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto nenhuma opção estiver selecionada
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.placeholder;
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.options;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfSelectBaseComponent.prototype.change;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.validators;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.ngControl;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.element;
    /** @type {?} */
    ThfSelectBaseComponent.prototype.changeDetector;
}
