import { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ThfSelectOption } from './thf-select-option.interface';
/**
 * @description
 *
 * O componente thf-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O thf-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 *
 * > Quando utilizar o componente fora da tag Form, deve ser informado a diretiva ngDefaultControl.
 *
 */
export declare abstract class ThfSelectBaseComponent implements OnInit, AfterViewChecked, ControlValueAccessor {
    element: ElementRef;
    private changeDetector;
    /** Indica que o campo será desabilitado. */
    disabled?: boolean;
    /** Indica que o campo será obrigatório */
    required?: boolean;
    /** Adiciona uma label no componente. */
    label?: string;
    /** Nome do componente. */
    name: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada */
    placeholder?: string;
    /** Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption. */
    options: Array<ThfSelectOption>;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    private validators;
    onModelChange: any;
    onModelTouched: any;
    ngControl: NgControl;
    constructor(element: ElementRef, changeDetector: ChangeDetectorRef, ngControl?: NgControl);
    abstract updateModel(selectOption: ThfSelectOption): void;
    abstract writeValue(value: any): void;
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    onChange(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
