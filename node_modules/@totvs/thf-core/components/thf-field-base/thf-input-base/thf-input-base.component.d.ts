import { AfterViewInit, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input padrão e várias outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 * - Caso o input não esteja dentro de um form, é preciso adicionar ngDefaultControl ao componente:
 * Exemplo: [(ngModel)]="pessoa.nome" name="nome" ngDefaultControl
 *
 * - Caso o input esteja passando um [(ngModel)], mas não tenha um name, então irá ocorrer um erro
 * de angular. Então você precisa informar o atributo name ou o seguinte atributo
 * [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 */
export declare class ThfInputBaseComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    /** Nome e Id do Input */
    name: string;
    setName: string;
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido */
    placeholder?: string;
    /** Indica que o campo será desabilitado */
    disabled?: boolean;
    setDisabled: string;
    /** Indica que o campo será somente leitura */
    readonly?: boolean;
    setReadonly: string;
    /** Indica que o campo será obrigatório */
    required?: boolean;
    setRequired: string;
    /** Indica que o campo iniciará com foco */
    focus?: boolean;
    setFocus: string;
    /** Indica se o campo terá a opção de limpa-lo
     * Opções:
     *  "" : para limpar o campo e atribuir "" para o model
     *  "undefined" : para limpar o campo e atribuir undefined para o model
     *  qualquer valor : para atribuir este valor ao campo e ao model
     */
    clean?: string;
    setClean: string;
    /** Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara (t-mask) será automaticamente validado por ela, porém
     * é possível definir um t-pattern para substituir a validação da máscara. */
    pattern?: string;
    setPattern: string;
    /** Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
     * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido */
    errorPattern?: string;
    /** Indica a quantidade máxima de caracteres que o campo aceita */
    maxlength?: number;
    setMaxlength: string;
    /** Indica a quantidade mínima de caracteres que o campo aceita */
    minlength?: number;
    setMinlength: string;
    /** Indica máscara que o campo vai receber. Exemplo: (+99) (99) 99999?-9999
     * A máscara poderá ser validada por um pattern diferente da máscara informada, usando
     * a propriedade t-pattern.
     * O campo sendo obrigatório (t-required), será sinalizado quando estiver fora do padrão definido.*/
    mask?: string;
    setMask: string;
    /** Indica se o model receberá o valor formatado ou puro. Padrão valor puro 'false'. */
    maskFormatModel?: boolean;
    setMaskFormatModel: string;
    /** Evento disparado ao sair do campo */
    blur?: EventEmitter<any>;
    /** Evento disparado ao entrar do campo */
    enter?: EventEmitter<any>;
    /** Evento disparado ao alterar valor e deixar o campo */
    change?: EventEmitter<any>;
    /** Evento disparado ao alterar valor do model */
    changeModel?: EventEmitter<any>;
    inputEl: ElementRef;
    cleanEl: ElementRef;
    type: string;
    validators: any;
    ngControl: NgControl;
    onChangePropagate: any;
    onTouched: any;
    el: ElementRef;
    objMask: any;
    valueBeforeChange: any;
    modelLastUpdate: any;
    fireChange: boolean;
    constructor(el: ElementRef, ngControl?: NgControl);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    _onInit(): void;
    _afterViewInit(): void;
    setValidators(): void;
    getValidatorRequired(): any;
    getValidatorPattern(): any;
    getValidatorMinlength(): any;
    getValidatorMaxlength(): any;
    updateValidators(): void;
    convertObjectToArray(validators: any): any[];
    onKeyup(e: any): void;
    onKeypress(e: any): void;
    onKeydown(e: any): void;
    hasInvalidClass(): boolean;
    cleanInput(): void;
    eventOnInput(e: any): void;
    eventOnFocus(e: any): void;
    eventOnBlur(e: any): void;
    verifyPattern(pattern: string, value: any): boolean;
    eventOnClick($event: any): void;
    writeValue(value: any): void;
    callOnChange(value: any): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
}
