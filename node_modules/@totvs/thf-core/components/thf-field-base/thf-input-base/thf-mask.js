/**
 * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
var ThfMask = (function () {
    /**
     * @param {?} mask
     * @param {?} formatModel
     */
    function ThfMask(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.keypress = function ($event) { };
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    Object.defineProperty(ThfMask.prototype, "getPattern", {
        /**
         * @return {?}
         */
        get: function () {
            return this.pattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToInput", {
        /**
         * @return {?}
         */
        get: function () {
            return this.valueToInput;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToInput", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.valueToInput = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToModel", {
        /**
         * @return {?}
         */
        get: function () {
            return this.valueToModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToModel", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.valueToModel = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keyup = function ($event) {
        if (this.mask) {
            var /** @type {?} */ value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37:// seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39:// seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35:// end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36:// HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositionNotShiftKey = function ($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setSelectionRange = function ($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keydown = function ($event) {
        if (this.mask) {
            var /** @type {?} */ value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8:// backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46:// delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default:// qualquer outra tecla válida
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    ThfMask.prototype.clearRangeSelection = function (value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.click = function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.blur = function ($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            var /** @type {?} */ value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    };
    /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    ThfMask.prototype.revertPositions = function (initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            var /** @type {?} */ tempPosition = void 0;
            tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.resetPositions = function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositions = function ($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    };
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.changePosition = function ($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.getPosition = function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.controlFormatting = function (value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        var /** @type {?} */ valueProcessed;
        var /** @type {?} */ maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        var /** @type {?} */ arrMasks = [];
        var /** @type {?} */ contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    };
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.formatValue = function (value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        var /** @type {?} */ guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        var /** @type {?} */ contGuide = 0;
        // String final formatada
        var /** @type {?} */ valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (var /** @type {?} */ i = 0; i < value.length; i++) {
            var /** @type {?} */ charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    };
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskBefore = function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    };
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskAfter = function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.replaceOptionalNumber = function (mask) {
        var /** @type {?} */ i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ThfMask.prototype.isFixedCharacterGuide = function (key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    };
    /**
     * @return {?}
     */
    ThfMask.prototype.getFixedCharacterGuide = function () {
        return /[\\\/() +-.\:]/g;
    };
    /**
     * @return {?}
     */
    ThfMask.prototype.listValidKeys = function () {
        return /[a-zA-Z0-9]/g;
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyValid = function (keyCode) {
        return this.isKeyCodeValid(keyCode);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyCodeValid = function (keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            (keyCode === 8) || keyCode === 9 ||
            (keyCode === 46));
    };
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    ThfMask.prototype.isKeyValidMask = function (key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    };
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    ThfMask.prototype.testRegex = function (key, regex) {
        return regex.test(key);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.removeFormattingValue = function (value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.hasOptionalNumber = function (mask) {
        return mask.match(/\d\?/g);
    };
    /**
     * @param {?} char
     * @return {?}
     */
    ThfMask.prototype.replaceMask = function (char) {
        var /** @type {?} */ regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.getRegexFromMask = function (mask) {
        var /** @type {?} */ pattern;
        if (this.formatModel) {
            pattern = mask.replace(/\\/g, '\\\\');
            pattern = pattern.replace(/\+/g, '\\+');
            pattern = pattern.replace(/\./g, '\\.');
            pattern = pattern.replace(/-/g, '-');
            pattern = pattern.replace(/\(/g, '\\(');
            pattern = pattern.replace(/\)/g, '\\)');
            pattern = pattern.replace(/\//g, '\\/');
            pattern = pattern.replace(/\s/g, '\\s');
            pattern = pattern.replace(/:/g, '\\:');
            pattern = pattern.replace(/\@(?!\s)/g, '\\w');
            pattern = pattern.replace(/\d/g, '\\w');
        }
        else {
            pattern = mask.replace(/\\/g, '');
            pattern = pattern.replace(/\+/g, '');
            pattern = pattern.replace(/\./g, '');
            pattern = pattern.replace(/-/g, '');
            pattern = pattern.replace(/\(/g, '');
            pattern = pattern.replace(/\)/g, '');
            pattern = pattern.replace(/\//g, '');
            pattern = pattern.replace(/\s/g, '');
            pattern = pattern.replace(/:/g, '');
            pattern = pattern.replace(/\@/g, '\\w');
            pattern = pattern.replace(/\d/g, '\\w');
        }
        return pattern;
    };
    return ThfMask;
}());
export { ThfMask };
function ThfMask_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfMask.prototype.mask;
    /** @type {?} */
    ThfMask.prototype.formatModel;
    /** @type {?} */
    ThfMask.prototype.initialPosition;
    /** @type {?} */
    ThfMask.prototype.finalPosition;
    /** @type {?} */
    ThfMask.prototype.pattern;
    /** @type {?} */
    ThfMask.prototype.valueToInput;
    /** @type {?} */
    ThfMask.prototype.valueToModel;
    /** @type {?} */
    ThfMask.prototype.formattingEnds;
    /** @type {?} */
    ThfMask.prototype.keypress;
}
