import { Input, Output, EventEmitter, ElementRef, ViewChild, Optional } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { convertToBoolean } from './../../../utils/index';
/**
 * \@description
 *
 * O componente thf-radio-group deve ser utilizado para disponibilizar multiplas
 * opções ao usuário, permitindo a ele que selecione apenas uma delas.
 */
var ThfRadioGroupBaseComponent = (function () {
    /**
     * @param {?} el
     * @param {?=} ngControl
     */
    function ThfRadioGroupBaseComponent(el, ngControl) {
        /**
         * Indica que o campo será desabilitado
         */
        this.disabled = false;
        /**
         * Indica que o campo será obrigatório
         */
        this.required = false;
        /**
         * Evento ao alterar valor do campo
         */
        this.change = new EventEmitter;
        this.propagateChange = function () { };
        this.el = el;
        this.ngControl = ngControl;
    }
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "setDisabled", {
        /**
         * @param {?} disabled
         * @return {?}
         */
        set: function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "setRequired", {
        /**
         * @param {?} required
         * @return {?}
         */
        set: function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.ngOnInit = function () {
        // Adicionar este componente ao ngControl, para que o formulário encontre-o
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
            if (this.required) {
                this.ngControl.control.setValidators([Validators.required]);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.keyup = function () {
        var /** @type {?} */ selected = this.inputEl.nativeElement.querySelector("input:checked");
        if (selected) {
            this.changeValue(selected.value);
        }
    };
    /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.eventClick = function (value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.changeValue = function (value) {
        if (this.selectCheckedValue !== value) {
            this.change.emit(value);
        }
        this.selectCheckedValue = value;
        this.propagateChange(this.selectCheckedValue);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.writeValue = function (value) {
        var /** @type {?} */ selected;
        if (value !== undefined) {
            // Busca radio com o valor especificado
            selected = this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
        }
        if (selected) {
            selected.checked = true;
            this.selectCheckedValue = value;
        }
        else {
            // Se não encontrar nenhum select com o valor especificado no model
            // então desmarca todos os radios
            selected = this.inputEl.nativeElement.querySelector("input:checked");
            if (selected) {
                selected.checked = false;
                this.selectCheckedValue = null;
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    ThfRadioGroupBaseComponent.prototype.registerOnTouched = function () { };
    /**
     * @nocollapse
     */
    ThfRadioGroupBaseComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfRadioGroupBaseComponent.propDecorators = {
        'name': [{ type: Input, args: ['name',] },],
        'setDisabled': [{ type: Input, args: ['t-disabled',] },],
        'setRequired': [{ type: Input, args: ['t-required',] },],
        'options': [{ type: Input, args: ['t-options',] },],
        'change': [{ type: Output, args: ['t-change',] },],
        'inputEl': [{ type: ViewChild, args: ['inp', { read: ElementRef },] },],
    };
    return ThfRadioGroupBaseComponent;
}());
export { ThfRadioGroupBaseComponent };
function ThfRadioGroupBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfRadioGroupBaseComponent.ctorParameters;
    /** @type {?} */
    ThfRadioGroupBaseComponent.propDecorators;
    /**
     * Nome dos radios
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.name;
    /**
     * Indica que o campo será desabilitado
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será obrigatório
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.required;
    /**
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.options;
    /**
     * Evento ao alterar valor do campo
     * @type {?}
     */
    ThfRadioGroupBaseComponent.prototype.change;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.inputEl;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.el;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.ngControl;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.selectCheckedValue;
    /** @type {?} */
    ThfRadioGroupBaseComponent.prototype.propagateChange;
}
