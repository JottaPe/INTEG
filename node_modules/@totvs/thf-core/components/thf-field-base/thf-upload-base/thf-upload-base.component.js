import { EventEmitter, Input, Optional, Output } from '@angular/core';
import { NgControl } from '@angular/forms';
import { convertToBoolean } from './../../../utils/index';
/**
 * \@description
 *
 * O componente thf-upload permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 * @abstract
 */
var ThfUploadBaseComponent = (function () {
    /**
     * @param {?=} ngControl
     */
    function ThfUploadBaseComponent(ngControl) {
        /**
         * Define o valor do atributo name do componente.
         */
        this.name = 'file';
        /**
         * Indica que o campo será desabilitado
         */
        this.disabled = false;
        /**
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         */
        this.autoUpload = false;
        /**
         * Define o ID para o componente.
         */
        this.id = 'file';
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição.
         * Por exemplo:
         * event.data = {id: 'id do usuario'};
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.ngControl = ngControl;
    }
    Object.defineProperty(ThfUploadBaseComponent.prototype, "setRequired", {
        /**
         * @param {?} required
         * @return {?}
         */
        set: function (required) {
            this.required = required === '' ? false : convertToBoolean(required);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.ngOnInit = function () {
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    };
    /**
     * @abstract
     * @param {?} event
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.onFileChange = function (event) { };
    /**
     * @abstract
     * @param {?=} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.uploadFiles = function (files) { };
    /**
     * @abstract
     * @param {?} file
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.stopUpload = function (file) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.updateModel = function (value) { };
    /**
     * @abstract
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.writeValue = function (model) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @nocollapse
     */
    ThfUploadBaseComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfUploadBaseComponent.propDecorators = {
        'label': [{ type: Input, args: ['t-label',] },],
        'help': [{ type: Input, args: ['t-help',] },],
        'url': [{ type: Input, args: ['t-url',] },],
        'fileRestrictions': [{ type: Input, args: ['t-restrictions',] },],
        'name': [{ type: Input, args: ['name',] },],
        'disabled': [{ type: Input, args: ['t-disabled',] },],
        'autoUpload': [{ type: Input, args: ['t-auto-upload',] },],
        'id': [{ type: Input, args: ['t-id',] },],
        'isMultiple': [{ type: Input, args: ['t-multiple',] },],
        'setRequired': [{ type: Input, args: ['t-required',] },],
        'onUpload': [{ type: Output, args: ['t-upload',] },],
        'onError': [{ type: Output, args: ['t-error',] },],
        'onSuccess': [{ type: Output, args: ['t-success',] },],
        'ngModelChange': [{ type: Output, args: ['ngModelChange',] },],
    };
    return ThfUploadBaseComponent;
}());
export { ThfUploadBaseComponent };
function ThfUploadBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfUploadBaseComponent.ctorParameters;
    /** @type {?} */
    ThfUploadBaseComponent.propDecorators;
    /**
     * Label do campo
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.url;
    /**
     * Objeto que segue a definição da interface ThfFileRestrictions.
     * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos;
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.fileRestrictions;
    /**
     * Define o valor do atributo name do componente.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.name;
    /**
     * Indica que o campo será desabilitado
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.disabled;
    /**
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.autoUpload;
    /**
     * Define o ID para o componente.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.id;
    /**
     * Define se pode selecionar mais de um arquivo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.isMultiple;
    /**
     * Indica que o campo será obrigatório
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.required;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição.
     * Por exemplo:
     * event.data = {id: 'id do usuario'};
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.ngControl;
}
