import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadFileRestrictions } from './thf-upload-file-restriction.interface';
/**
 * @description
 *
 * O componente thf-upload permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 */
export declare abstract class ThfUploadBaseComponent implements OnInit, ControlValueAccessor {
    /** Label do campo */
    label?: string;
    /** Texto de apoio para o campo */
    help?: string;
    /** URL que deve ser feita a requisição com os arquivos selecionados. */
    url: string;
    /** Objeto que segue a definição da interface ThfFileRestrictions.
     * Onde é possível definir tamanho máximo, minimo e extensão dos arquivos permitidos; */
    fileRestrictions?: ThfUploadFileRestrictions;
    /** Define o valor do atributo name do componente. */
    name: string;
    /** Indica que o campo será desabilitado */
    disabled?: boolean;
    /** Define se o envio do arquivo será automático ao selecionar o mesmo. */
    autoUpload?: boolean;
    /** Define o ID para o componente. */
    id?: string;
    /** Define se pode selecionar mais de um arquivo. */
    isMultiple?: boolean;
    /** Indica que o campo será obrigatório */
    required?: boolean;
    setRequired: string;
    /** Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição.
     * Por exemplo:
     * event.data = {id: 'id do usuario'};
     */
    onUpload?: EventEmitter<any>;
    /** Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpErrorResponse.
    */
    onError?: EventEmitter<any>;
    /** Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * Por parâmetro será passado o objeto do retorno que é do tipo HttpResponse.
    */
    onSuccess?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    onModelChange: any;
    onModelTouched: any;
    ngControl: any;
    constructor(ngControl?: NgControl);
    ngOnInit(): void;
    abstract onFileChange(event: any): void;
    abstract uploadFiles(files?: Array<ThfUploadFile>): void;
    abstract stopUpload(file: ThfUploadFile): void;
    abstract updateModel(value: any): void;
    abstract writeValue(model: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
