import { AfterViewChecked, ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';
/**
 * @description
 *
 * O componente thf-switch é um checkbox mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando quer se passar a ideia de ligar / desligar um funcionalidade específica.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * sendo assim é importante sempre informar textos que contextualizem seu uso facilitando a compreensão por parte dos usuários.
 *
 * > Quando utilizar o componente fora da tag Form, deve ser informado a diretiva ngDefaultControl.
 */
export declare class ThfSwitchBaseComponent implements AfterViewChecked, ControlValueAccessor, OnInit {
    /** Nome do componente. */
    name: string;
    /** Label exibido pelo componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /**
     * Texto exibido quando o componente estiver com o valor setado em *true*, se não for especificado um valor,
     * será exibido o texto "true".
     **/
    labelOn?: string;
    setLabelOn: string;
    /**
     * Texto exibido quando o componente estiver com o valor setado em *false*, se não for especificado um valor,
     * será exibido o texto "false".
     **/
    labelOff?: string;
    setLabelOff: string;
    /**
     * Posição de exibição do valor do switch, caso não seja especificado um valor, será exibido a direita do switch.
     **/
    labelPosition?: ThfSwitchLabelPosition;
    setLabelPosition: ThfSwitchLabelPosition;
    /** Indica se o campo será desabilitado. */
    disabled?: boolean;
    setDisabled: string;
    /** Indica se o campo será obrigatório. */
    required?: boolean;
    setRequired: string;
    /** Evento disparado ao alterar valor do campo. */
    change?: EventEmitter<{}>;
    ngModelChange?: EventEmitter<any>;
    private ngControl;
    private changeDetector;
    propagateChange: any;
    switchValue: boolean;
    constructor(changeDetector?: ChangeDetectorRef, ngControl?: NgControl);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    eventClick(): void;
    changeValue(value: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
