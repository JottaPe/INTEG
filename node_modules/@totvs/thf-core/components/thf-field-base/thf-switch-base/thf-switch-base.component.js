import { ChangeDetectorRef, EventEmitter, Input, Optional, Output } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { convertToBoolean } from './../../../utils/index';
import { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';
/**
 * \@description
 *
 * O componente thf-switch é um checkbox mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando quer se passar a ideia de ligar / desligar um funcionalidade específica.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * sendo assim é importante sempre informar textos que contextualizem seu uso facilitando a compreensão por parte dos usuários.
 *
 * > Quando utilizar o componente fora da tag Form, deve ser informado a diretiva ngDefaultControl.
 */
var ThfSwitchBaseComponent = (function () {
    /**
     * @param {?=} changeDetector
     * @param {?=} ngControl
     */
    function ThfSwitchBaseComponent(changeDetector, ngControl) {
        /**
         * Texto exibido quando o componente estiver com o valor setado em *true*, se não for especificado um valor,
         * será exibido o texto "true".
         *
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o componente estiver com o valor setado em *false*, se não for especificado um valor,
         * será exibido o texto "false".
         *
         */
        this.labelOff = 'false';
        /**
         * Posição de exibição do valor do switch, caso não seja especificado um valor, será exibido a direita do switch.
         *
         */
        this.labelPosition = ThfSwitchLabelPosition.Right;
        /**
         * Indica se o campo será desabilitado.
         */
        this.disabled = false;
        /**
         * Indica se o campo será obrigatório.
         */
        this.required = false;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.ngControl = ngControl;
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOn", {
        /**
         * @param {?} label
         * @return {?}
         */
        set: function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOff", {
        /**
         * @param {?} label
         * @return {?}
         */
        set: function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelPosition", {
        /**
         * @param {?} position
         * @return {?}
         */
        set: function (position) {
            this.labelPosition = (position in ThfSwitchLabelPosition) ? position : ThfSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setDisabled", {
        /**
         * @param {?} disabled
         * @return {?}
         */
        set: function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setRequired", {
        /**
         * @param {?} required
         * @return {?}
         */
        set: function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.ngOnInit = function () {
        // Adicionar este componente ao ngControl, para que o formulário encontre-o
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
            if (this.required) {
                this.ngControl.control.setValidators([Validators.required]);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.ngAfterViewChecked = function () {
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.eventClick = function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.changeValue = function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            this.change.emit(this.switchValue);
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.writeValue = function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnTouched = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @nocollapse
     */
    ThfSwitchBaseComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfSwitchBaseComponent.propDecorators = {
        'name': [{ type: Input, args: ['name',] },],
        'label': [{ type: Input, args: ['t-label',] },],
        'help': [{ type: Input, args: ['t-help',] },],
        'setLabelOn': [{ type: Input, args: ['t-label-on',] },],
        'setLabelOff': [{ type: Input, args: ['t-label-off',] },],
        'setLabelPosition': [{ type: Input, args: ['t-label-position',] },],
        'setDisabled': [{ type: Input, args: ['t-disabled',] },],
        'setRequired': [{ type: Input, args: ['t-required',] },],
        'change': [{ type: Output, args: ['t-change',] },],
        'ngModelChange': [{ type: Output, args: ['ngModelChange',] },],
    };
    return ThfSwitchBaseComponent;
}());
export { ThfSwitchBaseComponent };
function ThfSwitchBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfSwitchBaseComponent.ctorParameters;
    /** @type {?} */
    ThfSwitchBaseComponent.propDecorators;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.name;
    /**
     * Label exibido pelo componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o componente estiver com o valor setado em *true*, se não for especificado um valor,
     * será exibido o texto "true".
     *
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o componente estiver com o valor setado em *false*, se não for especificado um valor,
     * será exibido o texto "false".
     *
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOff;
    /**
     * Posição de exibição do valor do switch, caso não seja especificado um valor, será exibido a direita do switch.
     *
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelPosition;
    /**
     * Indica se o campo será desabilitado.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.disabled;
    /**
     * Indica se o campo será obrigatório.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.required;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.change;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.ngControl;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.changeDetector;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.switchValue;
}
