import { EventEmitter, Input, Optional, Output } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { convertDateToISOExtended, convertIsoToDate, convertToBoolean } from '../../../utils/index';
import { ThfMask } from '../index';
/**
 * \@description
 *
 * O thf-datepicker é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade t-format).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade t-locale.
 *
 * O datepicker aceita apenas dois formatos de data o ISO-8601 extendido e o Date padrão do Javascript.
 * Exemplo:
 *
 * ```
 * this.date = '2017-11-28T00:00:00-02:00'
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > O thf-datepicker usa o padrão ISO-8601 extendido internamente, ou seja, o model estará nesse padrão.
 *
 * Importante:
 *
 * - Caso a data seja inválida, o model receberá: 'Data inválida'.
 * - Caso a data esteja fora do período estabelecido pelas propriedades t-start e t-end,
 * então o model receberá: 'Data fora do período'
 * - Caso o input não esteja dentro de um form, é preciso adicionar ngDefaultControl ao componente:
 * Exemplo:
 *
 * ```
 * <thf-datepicker
 *   name="pessoa.nome"
 *   [(ngModel)]="pessoa.nome"
 *   ngDefaultControl>
 * </thf-datepicker>
 * ```
 *
 * - Caso o input esteja passando um [(ngModel)], mas não tenha um name, então irá ocorrer um erro
 * do próprio angular.
 * [ngModelOptions]="{standalone: true}".
 * Exemplo:
 *
 * ```
 * <thf-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </thf-datepicker>
 * ```
 *
 * - Não esqueça de importar o FormsModule no seu módulo, assim como também é importado para
 * utilizar o input padrão.
 * @abstract
 */
var ThfDatepickerBaseComponent = (function () {
    /**
     * @param {?=} ngControl
     */
    function ThfDatepickerBaseComponent(ngControl) {
        /**
         * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Indica que o campo será desabilitado.
         */
        this.disabled = false;
        /**
         * Indica que o campo será somente leitura.
         */
        this.readonly = false;
        /**
         * Indica que o campo será obrigatório.
         */
        this.required = false;
        /**
         * Indica que o campo iniciará com foco.
         */
        this.focus = false;
        /**
         * Indica se o campo terá a opção de limpá-lo.
         */
        this.clean = false;
        /**
         * Mensagem que será apresentada quando o pattern ou a máscara não for satisfatória.
         * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /**
         * Idioma do Datepicker. Opções: pt, en, es.
         * Por padrão será usado o idioma do browser.
         */
        this.locale = navigator.language;
        /**
         * Evento disparado ao sair do campo.
         */
        this.onblur = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.onchange = new EventEmitter();
        this.onChangeModel = null;
        this.onTouchedModel = null;
        this.validators = [];
        this.firstStart = true;
        this.ngControl = ngControl;
    }
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDisabled", {
        /**
         * @param {?} disabled
         * @return {?}
         */
        set: function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setReadonly", {
        /**
         * @param {?} readonly
         * @return {?}
         */
        set: function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setRequired", {
        /**
         * @param {?} required
         * @return {?}
         */
        set: function (required) {
            var _this = this;
            this.required = required === '' ? true : convertToBoolean(required);
            setTimeout(function () {
                if (_this.required) {
                    _this.controlModel(_this.date);
                }
                else {
                    if (_this.date) {
                        _this.controlModel(_this.date);
                    }
                    else {
                        _this.onChangeModel('');
                    }
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setFocus", {
        /**
         * @param {?} focus
         * @return {?}
         */
        set: function (focus) {
            this.focus = focus === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setClean", {
        /**
         * @param {?} clean
         * @return {?}
         */
        set: function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDateStart", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var _this = this;
            if (value instanceof Date) {
                this.start = new Date(value.getFullYear(), value.getMonth(), value.getDate(), 0, 0, 0);
            }
            else {
                this.start = convertIsoToDate(value, true, false);
            }
            setTimeout(function () {
                if (_this.date) {
                    _this.controlModel(_this.date);
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDateEnd", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var _this = this;
            if (value instanceof Date) {
                this.end = new Date(value.getFullYear(), value.getMonth(), value.getDate(), 23, 59, 59);
            }
            else {
                this.end = convertIsoToDate(value, false, true);
            }
            setTimeout(function () {
                if (_this.date) {
                    _this.controlModel(_this.date);
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setFormat", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            value = value.toLowerCase();
            if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                this.format = value;
            }
            else {
                this.format = this.locale.indexOf('en') > -1 ? 'mm/dd/yyyy' : 'dd/mm/yyyy';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setLocale", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.locale = value.length < 2 ? 'en' : value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @abstract
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.cleanInput = function () { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.writeValue = function (value) { };
    /**
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.ngOnInit = function () {
        if (!this.format) {
            this.format = (this.locale.indexOf('en') > -1) ? 'mm/dd/yyyy' : 'dd/mm/yyyy';
        }
        // Classe de máscara
        this.objMask = this.buildMask();
        // Adicionar este componente ao ngControl, para que o formulário encontre-o
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
            // Validações do campo. Estas validações que irão tornar o campo válido ou inválido
            if (this.required) {
                this.validators.push(Validators.required);
            }
            this.validators.push(this.validate);
            this.ngControl.control.setValidators(this.validators);
        }
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.getDateFromString = function (dateString) {
        var /** @type {?} */ day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        var /** @type {?} */ month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        var /** @type {?} */ year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        var /** @type {?} */ date = new Date(year, month, day);
        return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.formatToDate = function (value) {
        var /** @type {?} */ dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.controlModel = function (date) {
        if (date) {
            if (this.start && this.end) {
                this.validateModel((date >= this.start && date <= this.end), date);
            }
            if (this.start && !this.end) {
                this.validateModel((date >= this.start), date);
            }
            if (this.end && !this.start) {
                this.validateModel((date <= this.end), date);
            }
            if (!this.start && !this.end) {
                this.date = date;
                this.callOnChange(convertDateToISOExtended(this.date, this.hour));
            }
        }
        else {
            this.date = date;
            if (this.required) {
                this.callOnChange('Data Inválida');
            }
            else {
                this.callOnChange('');
            }
        }
    };
    /**
     * @param {?} dateValid
     * @param {?} date
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.validateModel = function (dateValid, date) {
        if (dateValid) {
            this.date = date;
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else {
            this.date = date;
            this.callOnChange('Data fora do período');
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.callOnChange = function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangeModel = func;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.buildMask = function () {
        var /** @type {?} */ mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new ThfMask(mask, true);
    };
    /**
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.cleanModel = function () {
        this.callOnChange('');
        this.cleanInput();
    };
    /**
     * @param {?} control
     * @return {?}
     */
    ThfDatepickerBaseComponent.prototype.validate = function (control) {
        if (control.value && isNaN(Date.parse(control.value))) {
            return { invalidDate: true };
        }
        else {
            return null;
        }
    };
    /**
     * @nocollapse
     */
    ThfDatepickerBaseComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfDatepickerBaseComponent.propDecorators = {
        'name': [{ type: Input, args: ['name',] },],
        'placeholder': [{ type: Input, args: ['t-placeholder',] },],
        'setDisabled': [{ type: Input, args: ['t-disabled',] },],
        'setReadonly': [{ type: Input, args: ['t-readonly',] },],
        'setRequired': [{ type: Input, args: ['t-required',] },],
        'setFocus': [{ type: Input, args: ['t-focus',] },],
        'setClean': [{ type: Input, args: ['t-clean',] },],
        'errorPattern': [{ type: Input, args: ['t-error-pattern',] },],
        'setDateStart': [{ type: Input, args: ['t-start',] },],
        'setDateEnd': [{ type: Input, args: ['t-end',] },],
        'setFormat': [{ type: Input, args: ['t-format',] },],
        'setLocale': [{ type: Input, args: ['t-locale',] },],
        'onblur': [{ type: Output, args: ['t-blur',] },],
        'onchange': [{ type: Output, args: ['t-change',] },],
    };
    return ThfDatepickerBaseComponent;
}());
export { ThfDatepickerBaseComponent };
function ThfDatepickerBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfDatepickerBaseComponent.ctorParameters;
    /** @type {?} */
    ThfDatepickerBaseComponent.propDecorators;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.name;
    /**
     * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.placeholder;
    /**
     * Indica que o campo será desabilitado.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será somente leitura.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.readonly;
    /**
     * Indica que o campo será obrigatório.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.required;
    /**
     * Indica que o campo iniciará com foco.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.focus;
    /**
     * Indica se o campo terá a opção de limpá-lo.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.clean;
    /**
     * Mensagem que será apresentada quando o pattern ou a máscara não for satisfatória.
     * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.errorPattern;
    /**
     * Indica a data mínima.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.start;
    /**
     * Indica a data máxima.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.end;
    /**
     * Formato de exibição da data.
     *
     * Exemplo: mm/dd/yyyy, yyyy-mm-dd, dd-mm-yyyy.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.format;
    /**
     * Idioma do Datepicker. Opções: pt, en, es.
     * Por padrão será usado o idioma do browser.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.locale;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.onblur;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    ThfDatepickerBaseComponent.prototype.onchange;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.date;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.onChangeModel;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.onTouchedModel;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.ngControl;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.validators;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.objMask;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.firstStart;
    /** @type {?} */
    ThfDatepickerBaseComponent.prototype.hour;
}
