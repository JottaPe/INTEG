import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ThfMask } from '../index';
/**
 * @description
 *
 * O thf-datepicker é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade t-format).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade t-locale.
 *
 * O datepicker aceita apenas dois formatos de data o ISO-8601 extendido e o Date padrão do Javascript.
 * Exemplo:
 *
 * ```
 * this.date = '2017-11-28T00:00:00-02:00'
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > O thf-datepicker usa o padrão ISO-8601 extendido internamente, ou seja, o model estará nesse padrão.
 *
 * Importante:
 *
 * - Caso a data seja inválida, o model receberá: 'Data inválida'.
 * - Caso a data esteja fora do período estabelecido pelas propriedades t-start e t-end,
 * então o model receberá: 'Data fora do período'
 * - Caso o input não esteja dentro de um form, é preciso adicionar ngDefaultControl ao componente:
 * Exemplo:
 *
 * ```
 * <thf-datepicker
 *   name="pessoa.nome"
 *   [(ngModel)]="pessoa.nome"
 *   ngDefaultControl>
 * </thf-datepicker>
 * ```
 *
 * - Caso o input esteja passando um [(ngModel)], mas não tenha um name, então irá ocorrer um erro
 * do próprio angular.
 * [ngModelOptions]="{standalone: true}".
 * Exemplo:
 *
 * ```
 * <thf-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </thf-datepicker>
 * ```
 *
 * - Não esqueça de importar o FormsModule no seu módulo, assim como também é importado para
 * utilizar o input padrão.
 */
export declare abstract class ThfDatepickerBaseComponent implements ControlValueAccessor, OnInit {
    name: string;
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
    placeholder?: string;
    /** Indica que o campo será desabilitado. */
    disabled?: boolean;
    setDisabled: string;
    /** Indica que o campo será somente leitura. */
    readonly?: boolean;
    setReadonly: string;
    /** Indica que o campo será obrigatório. */
    required?: boolean;
    setRequired: string;
    /** Indica que o campo iniciará com foco. */
    focus?: boolean;
    setFocus: string;
    /** Indica se o campo terá a opção de limpá-lo. */
    clean?: boolean;
    setClean: string;
    /**
     * Mensagem que será apresentada quando o pattern ou a máscara não for satisfatória.
     * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
     */
    errorPattern?: string;
    /** Indica a data mínima. */
    start?: Date;
    setDateStart: string | Date;
    /** Indica a data máxima. */
    end?: Date;
    setDateEnd: string | Date;
    /**
     * Formato de exibição da data.
     *
     * Exemplo: mm/dd/yyyy, yyyy-mm-dd, dd-mm-yyyy.
     */
    format?: string;
    setFormat: string;
    /**
     * Idioma do Datepicker. Opções: pt, en, es.
     * Por padrão será usado o idioma do browser.
     */
    locale: string;
    setLocale: string;
    /** Evento disparado ao sair do campo. */
    onblur?: EventEmitter<{}>;
    /** Evento disparado ao alterar valor do campo. */
    onchange?: EventEmitter<{}>;
    protected date: Date;
    protected onChangeModel: any;
    protected onTouchedModel: any;
    protected ngControl: NgControl;
    protected validators: any[];
    protected objMask: any;
    protected firstStart: boolean;
    protected hour: string;
    constructor(ngControl?: NgControl);
    abstract cleanInput(): void;
    abstract writeValue(value: any): void;
    ngOnInit(): void;
    getDateFromString(dateString: string): Date;
    formatToDate(value: Date): string;
    controlModel(date: Date): void;
    validateModel(dateValid: boolean, date: Date): void;
    callOnChange(value: any): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    protected buildMask(): ThfMask;
    cleanModel(): void;
    validate(control: any): any;
}
