import { Input, EventEmitter, Output, ViewChild, ElementRef, Optional } from '@angular/core';
import { NgControl, Validators } from '@angular/forms';
import { convertToBoolean } from './../../../utils/index';
/**
 * \@description
 *
 * O componente thf-checkbox-group deve ser utilizado para disponibilizar múltiplas
 * opções ao usuário, permitindo a ele que selecione uma ou múltiplas delas.
 */
var ThfCheckboxGroupBaseComponent = (function () {
    /**
     * @param {?} el
     * @param {?=} ngControl
     */
    function ThfCheckboxGroupBaseComponent(el, ngControl) {
        /**
         * Indica que o campo será obrigatório
         */
        this.required = false;
        /**
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
         */
        this.options = [];
        /**
         * Evento ao alterar valor do campo
         */
        this.change = new EventEmitter;
        this.el = el;
        this.ngControl = ngControl;
    }
    Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "setRequired", {
        /**
         * @param {?} required
         * @return {?}
         */
        set: function (required) {
            this.required = (required === '') ? true : convertToBoolean(required);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.ngOnInit = function () {
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
            if (this.required) {
                this.ngControl.control.setValidators([Validators.required]);
            }
        }
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.eventClick = function (name, value) {
        var /** @type {?} */ index;
        var /** @type {?} */ selected = this.inputEl.nativeElement.querySelector(".thf-input-checkbox[id=\"" + (name + value) + "\"]");
        if (selected) {
            if (selected.checked && !this.selectCheckedValue.includes(value)) {
                this.selectCheckedValue.push(value);
            }
            else if (!selected.checked && this.selectCheckedValue.includes(value)) {
                index = this.selectCheckedValue.indexOf(value);
                this.selectCheckedValue.splice(index, 1);
            }
            this.changeValue(this.selectCheckedValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.changeValue = function (value) {
        this.propagateChange(value);
        this.change.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.writeValue = function (value) {
        if (value) {
            this.changeValue(value);
            this.selectCheckedValue = [].concat(value);
        }
        var /** @type {?} */ selected = this.inputEl.nativeElement.querySelectorAll(".thf-input-checkbox");
        if (selected && value) {
            for (var /** @type {?} */ i = 0; i < selected.length; i++) {
                if (value.includes(selected[i].value)) {
                    selected[i].checked = true;
                }
                else {
                    selected[i].checked = false;
                }
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.registerOnTouched = function () { };
    /**
     * @nocollapse
     */
    ThfCheckboxGroupBaseComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    ThfCheckboxGroupBaseComponent.propDecorators = {
        'name': [{ type: Input, args: ['name',] },],
        'setRequired': [{ type: Input, args: ['t-required',] },],
        'options': [{ type: Input, args: ['t-options',] },],
        'change': [{ type: Output, args: ['t-change',] },],
        'inputEl': [{ type: ViewChild, args: ['inp', { read: ElementRef },] },],
    };
    return ThfCheckboxGroupBaseComponent;
}());
export { ThfCheckboxGroupBaseComponent };
function ThfCheckboxGroupBaseComponent_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.ctorParameters;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.propDecorators;
    /**
     * Nome dos checkboxes
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.name;
    /**
     * Indica que o campo será obrigatório
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.required;
    /**
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.options;
    /**
     * Evento ao alterar valor do campo
     * @type {?}
     */
    ThfCheckboxGroupBaseComponent.prototype.change;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.inputEl;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.el;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.ngControl;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.selectCheckedValue;
    /** @type {?} */
    ThfCheckboxGroupBaseComponent.prototype.propagateChange;
}
