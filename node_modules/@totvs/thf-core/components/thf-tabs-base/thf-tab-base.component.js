import { Input, Output, EventEmitter } from '@angular/core';
import { convertToBoolean } from './../../utils/index';
/**
 * \@description
 *
 * Cada thf-tab gera uma aba com o conteúdo HTML inserido dentro dele.
 */
var ThfTabBaseComponent = (function () {
    function ThfTabBaseComponent() {
        /**
         * Para a aba parecer ativa e mostrar o conteúdo quando iniciar
         */
        this.active = false;
        /**
         * Esconder a aba
         */
        this.hide = false;
        /**
         * Desabilitar a aba
         */
        this.disabled = false;
        /**
         * ID da aba
         */
        this.id = String(Math.random());
        /**
         * Método disparado ao clicar na aba
         */
        this.click = new EventEmitter;
    }
    Object.defineProperty(ThfTabBaseComponent.prototype, "setActive", {
        /**
         * @param {?} active
         * @return {?}
         */
        set: function (active) {
            (active === '') ? this.active = true : this.active = convertToBoolean(active);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "setHide", {
        /**
         * @param {?} hide
         * @return {?}
         */
        set: function (hide) {
            (hide === '') ? this.hide = true : this.hide = convertToBoolean(hide);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabBaseComponent.prototype, "setDisabled", {
        /**
         * @param {?} disabled
         * @return {?}
         */
        set: function (disabled) {
            (disabled === '') ? this.disabled = true : this.disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    ThfTabBaseComponent.propDecorators = {
        'label': [{ type: Input, args: ['t-label',] },],
        'setActive': [{ type: Input, args: ['t-active',] },],
        'setHide': [{ type: Input, args: ['t-hide',] },],
        'setDisabled': [{ type: Input, args: ['t-disabled',] },],
        'id': [{ type: Input, args: ['t-id',] },],
        'click': [{ type: Output, args: ['t-click',] },],
    };
    return ThfTabBaseComponent;
}());
export { ThfTabBaseComponent };
function ThfTabBaseComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfTabBaseComponent.propDecorators;
    /**
     * Label que aparecerá na aba
     * @type {?}
     */
    ThfTabBaseComponent.prototype.label;
    /**
     * Para a aba parecer ativa e mostrar o conteúdo quando iniciar
     * @type {?}
     */
    ThfTabBaseComponent.prototype.active;
    /**
     * Esconder a aba
     * @type {?}
     */
    ThfTabBaseComponent.prototype.hide;
    /**
     * Desabilitar a aba
     * @type {?}
     */
    ThfTabBaseComponent.prototype.disabled;
    /**
     * ID da aba
     * @type {?}
     */
    ThfTabBaseComponent.prototype.id;
    /**
     * Método disparado ao clicar na aba
     * @type {?}
     */
    ThfTabBaseComponent.prototype.click;
}
