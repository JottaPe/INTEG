import { EventEmitter, Input, Output } from '@angular/core';
/**
 * \@description
 *
 * O componente de gráfico thf-chart deve ser utilizado para renderizar visualizações de dados de alta qualidade.
 *
 */
var ThfChartBaseComponent = (function () {
    function ThfChartBaseComponent() {
        /**
         * Altura do gráfico em pixels, por padrão é definido 400px.
         */
        this.height = '400px';
        /**
         * Evento que será disparado ao clicar nas séries.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento que será disparado ao posicionar o mouse sobre a série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(ThfChartBaseComponent.prototype, "setHeight", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var /** @type {?} */ number = this.getValueAsNumber(value);
            this.height = number && number > 0 ? number + "px" : '400px';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfChartBaseComponent.prototype, "setMaxValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.maxValue = this.getValueAsNumber(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfChartBaseComponent.prototype, "setMinValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.minValue = this.getValueAsNumber(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesClick = function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesHover = function (event) {
        this.seriesHover.emit(event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfChartBaseComponent.prototype.getValueAsNumber = function (value) {
        var /** @type {?} */ number = (typeof value === 'string') ? parseInt(value, null) : value;
        return (number || number === 0) ? number : undefined;
    };
    ThfChartBaseComponent.propDecorators = {
        'title': [{ type: Input, args: ['t-title',] },],
        'series': [{ type: Input, args: ['t-series',] },],
        'categories': [{ type: Input, args: ['t-categories',] },],
        'typeChart': [{ type: Input, args: ['t-type',] },],
        'labelVisible': [{ type: Input, args: ['t-label-visible',] },],
        'setHeight': [{ type: Input, args: ['t-height',] },],
        'setMaxValue': [{ type: Input, args: ['t-max-value',] },],
        'setMinValue': [{ type: Input, args: ['t-min-value',] },],
        'seriesClick': [{ type: Output, args: ['t-series-click',] },],
        'seriesHover': [{ type: Output, args: ['t-series-hover',] },],
    };
    return ThfChartBaseComponent;
}());
export { ThfChartBaseComponent };
function ThfChartBaseComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfChartBaseComponent.propDecorators;
    /**
     * Título do gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.title;
    /**
     * Séries do gráfico, deve ser informado de acordo com o tipo de gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.series;
    /**
     * Os nomes das categorias. O gráfico criará uma categoria para cada array de dados, exceto quando for pie, donut e funnel.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.categories;
    /**
     * Tipo do gráfico, pode ser informado os seguintes tipos:
     * area, bar, bubble, bullet, candlestick, column, donut, funnel, line, ohlc, pie, polarLine, rangeBar, scatter, scatterLine e waterfall.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.typeChart;
    /**
     * Define se as labels das séries devem ser exibidas. O valor padrão é false.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.labelVisible;
    /**
     * Altura do gráfico em pixels, por padrão é definido 400px.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.height;
    /**
     * Valor máximo a ser apresentado no eixo y do gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.maxValue;
    /**
     * Valor mínimo a ser apresentado no eixo y do gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.minValue;
    /**
     * Evento que será disparado ao clicar nas séries.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesClick;
    /**
     * Evento que será disparado ao posicionar o mouse sobre a série.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesHover;
}
