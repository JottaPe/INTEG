(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['thf-page-base'] = {}),global.core));
}(this, (function (exports,core) { 'use strict';

/**
 * \@description Verifica se existe a função dentro do contexto.
 *
 * @param {?} action Nome da função que será verificada a existência no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será verificada.
 * @return {?}
 */
function hasAction(action, parentContext) {
    return parentContext && parentContext[action];
}
/**
 * \@description Executa a função cujo o nome foi passado por parâmetro.
 *
 * @param {?} action Nome da função que será executada no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será executada.
 * @return {?}
 */
function callAction(action, parentContext) {
    if (hasAction(action, parentContext)) {
        parentContext[action]();
    }
}

/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page** é utilizado como container principal para os componentes thf-page-header, thf-page-content
 * e para as ações dos componentes thf-page-edit e thf-page-detail.
 *
 * Quando estiver sendo utilizado o componente thf-menu junto ao thf-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **thf-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **thf-page** também pode ser utilizado sem o thf-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o thf-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
var ThfPageBaseComponent = (function () {
    function ThfPageBaseComponent() {
    }
    return ThfPageBaseComponent;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page-content** é utilizado como o container para o conteúdo da página.
 */
var ThfPageContentBaseComponent = (function () {
    function ThfPageContentBaseComponent() {
    }
    return ThfPageContentBaseComponent;
}());

/**
 * \@description
 *
 * O componente **thf-page-default** é utilizado como o container principal para as telas sem um template definido.
 */
var ThfPageDefaultBaseComponent = (function () {
    function ThfPageDefaultBaseComponent() {
        /**
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfPageAction.
         */
        this.actions = [];
    }
    ThfPageDefaultBaseComponent.propDecorators = {
        'title': [{ type: core.Input, args: ['t-title',] },],
        'actions': [{ type: core.Input, args: ['t-actions',] },],
    };
    return ThfPageDefaultBaseComponent;
}());

/**
 * \@description
 *
 * O componente **thf-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
var ThfPageDetailBaseComponent = (function () {
    function ThfPageDetailBaseComponent() {
    }
    ThfPageDetailBaseComponent.propDecorators = {
        'title': [{ type: core.Input, args: ['t-title',] },],
    };
    return ThfPageDetailBaseComponent;
}());

/**
 * \@description
 *
 * O componente **thf-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-edit,
 * são elas:
 *  - Cancelar (função: cancel);
 *  - Salvar e Novo (função: saveNew);
 *  - Salvar (função: save);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade t-disable-submit.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
var ThfPageEditBaseComponent = (function () {
    function ThfPageEditBaseComponent() {
    }
    ThfPageEditBaseComponent.propDecorators = {
        'title': [{ type: core.Input, args: ['t-title',] },],
        'disableSubmit': [{ type: core.Input, args: ['t-disable-submit',] },],
    };
    return ThfPageEditBaseComponent;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **thf-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
 * thf-page-list e thf-page-base.
 */
var ThfPageHeaderBaseComponent = (function () {
    function ThfPageHeaderBaseComponent() {
    }
    ThfPageHeaderBaseComponent.propDecorators = {
        'title': [{ type: core.Input, args: ['t-title',] },],
    };
    return ThfPageHeaderBaseComponent;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * \@description
 *
 * O componente **thf-page-list** é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 * É possível também filtrar o conteúdo da lista e adicionar ações para a mesma.
 */
var ThfPageListBaseComponent = (function (_super) {
    __extends(ThfPageListBaseComponent, _super);
    function ThfPageListBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfPageListBaseComponent.propDecorators = {
        'filter': [{ type: core.Input, args: ['t-filter',] },],
    };
    return ThfPageListBaseComponent;
}(ThfPageDefaultBaseComponent));

exports.callAction = callAction;
exports.hasAction = hasAction;
exports.ThfPageBaseComponent = ThfPageBaseComponent;
exports.ThfPageContentBaseComponent = ThfPageContentBaseComponent;
exports.ThfPageDefaultBaseComponent = ThfPageDefaultBaseComponent;
exports.ThfPageDetailBaseComponent = ThfPageDetailBaseComponent;
exports.ThfPageEditBaseComponent = ThfPageEditBaseComponent;
exports.ThfPageHeaderBaseComponent = ThfPageHeaderBaseComponent;
exports.ThfPageListBaseComponent = ThfPageListBaseComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
