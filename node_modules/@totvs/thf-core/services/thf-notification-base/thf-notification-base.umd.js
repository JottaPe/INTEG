(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global['thf-notification-base'] = {})));
}(this, (function (exports) { 'use strict';

var ThfToasterOrientation = {};
ThfToasterOrientation.Bottom = 0;
ThfToasterOrientation.Top = 1;
ThfToasterOrientation[ThfToasterOrientation.Bottom] = "Bottom";
ThfToasterOrientation[ThfToasterOrientation.Top] = "Top";

var ThfToasterType = {};
ThfToasterType.Error = 0;
ThfToasterType.Information = 1;
ThfToasterType.Success = 2;
ThfToasterType.Warning = 3;
ThfToasterType[ThfToasterType.Error] = "Error";
ThfToasterType[ThfToasterType.Information] = "Information";
ThfToasterType[ThfToasterType.Success] = "Success";
ThfToasterType[ThfToasterType.Warning] = "Warning";

/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 * @abstract
 */
var ThfNotificationBaseService = (function () {
    function ThfNotificationBaseService() {
        // Array responsável por guardar a instância de thf-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de thf-toaster's inferiores.
        this.stackBottom = [];
        // Duração do toaster ativo.
        this.durationToaster = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.success = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.warning = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.error = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.information = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
    };
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    ThfNotificationBaseService.prototype.buildToaster = function (notification, type) {
        var _this = this;
        var /** @type {?} */ index = 0;
        var /** @type {?} */ orientation;
        if (((notification)).orientation === undefined ||
            ((notification)).orientation === ThfToasterOrientation.Top) {
            index = this.stackTop.length;
            orientation = ThfToasterOrientation.Top;
        }
        else {
            index = this.stackBottom.length;
            orientation = ThfToasterOrientation.Bottom;
        }
        var /** @type {?} */ toaster = {
            componentRef: undefined,
            message: ((notification)).message || (notification),
            type: type,
            orientation: orientation,
            action: ((notification)).action,
            actionLabel: ((notification)).actionLabel,
            position: index
        };
        if (((notification)).action) {
            toaster.action = function (param) {
                ((notification)).action();
                _this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    };
    /**
     * \@docsPrivate
     *
     * Método responsável por criar o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ThfToaster} Objeto contendo as informações do toaster.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.createToaster = function (toaster) { };
    /**
     * \@docsPrivate
     *
     * Método responsável por destruir o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ComponentRef} Número da posição ou instancia do toaster a ser destruído.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.destroyToaster = function (toaster) { };
    return ThfNotificationBaseService;
}());

/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente thf-toaster foi construído para exibir notificações para o usuário.
 * @abstract
 */
var ThfToasterBaseComponent = (function () {
    function ThfToasterBaseComponent() {
    }
    /**
     * Fecha a notificação.
     * @abstract
     * @return {?}
     */
    ThfToasterBaseComponent.prototype.close = function () { };
    /**
     * Altera a posição da notificação.
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfToasterBaseComponent.prototype.changePosition = function (value) { };
    /**
     * Configura o componente thf-toaster de acordo com as definições do usuário.
     * @abstract
     * @param {?} thfToaster
     * @return {?}
     */
    ThfToasterBaseComponent.prototype.configToaster = function (thfToaster) { };
    return ThfToasterBaseComponent;
}());

exports.ThfNotificationBaseService = ThfNotificationBaseService;
exports.ThfToasterBaseComponent = ThfToasterBaseComponent;
exports.ThfToasterOrientation = ThfToasterOrientation;
exports.ThfToasterType = ThfToasterType;

Object.defineProperty(exports, '__esModule', { value: true });

})));
