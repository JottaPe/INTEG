import { ThfToasterOrientation } from './thf-toaster-base/thf-toaster-orientation.enum';
import { ThfToasterType } from './thf-toaster-base/thf-toaster-type.enum';
/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 * @abstract
 */
var ThfNotificationBaseService = (function () {
    function ThfNotificationBaseService() {
        // Array responsável por guardar a instância de thf-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de thf-toaster's inferiores.
        this.stackBottom = [];
        // Duração do toaster ativo.
        this.durationToaster = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.success = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.warning = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.error = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    ThfNotificationBaseService.prototype.information = function (notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
    };
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    ThfNotificationBaseService.prototype.buildToaster = function (notification, type) {
        var _this = this;
        var /** @type {?} */ index = 0;
        var /** @type {?} */ orientation;
        if (((notification)).orientation === undefined ||
            ((notification)).orientation === ThfToasterOrientation.Top) {
            index = this.stackTop.length;
            orientation = ThfToasterOrientation.Top;
        }
        else {
            index = this.stackBottom.length;
            orientation = ThfToasterOrientation.Bottom;
        }
        var /** @type {?} */ toaster = {
            componentRef: undefined,
            message: ((notification)).message || (notification),
            type: type,
            orientation: orientation,
            action: ((notification)).action,
            actionLabel: ((notification)).actionLabel,
            position: index
        };
        if (((notification)).action) {
            toaster.action = function (param) {
                ((notification)).action();
                _this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    };
    /**
     * \@docsPrivate
     *
     * Método responsável por criar o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ThfToaster} Objeto contendo as informações do toaster.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.createToaster = function (toaster) { };
    /**
     * \@docsPrivate
     *
     * Método responsável por destruir o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ComponentRef} Número da posição ou instancia do toaster a ser destruído.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.destroyToaster = function (toaster) { };
    return ThfNotificationBaseService;
}());
export { ThfNotificationBaseService };
function ThfNotificationBaseService_tsickle_Closure_declarations() {
    /** @type {?} */
    ThfNotificationBaseService.prototype.stackTop;
    /** @type {?} */
    ThfNotificationBaseService.prototype.stackBottom;
    /** @type {?} */
    ThfNotificationBaseService.prototype.durationToaster;
}
